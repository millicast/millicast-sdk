(function(we,st){typeof exports=="object"&&typeof module<"u"?st(exports):typeof define=="function"&&define.amd?define(["exports"],st):(we=typeof globalThis<"u"?globalThis:we||self,st(we["millicast-debug"]={}))})(this,function(we){"use strict";var Ss;var st=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function gt(i){return i&&i.__esModule&&Object.prototype.hasOwnProperty.call(i,"default")?i.default:i}var Qt={exports:{}};/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */var Zs=Qt.exports,Ti;function Gs(){return Ti||(Ti=1,function(i){(function(e){var t={};t.VERSION="1.6.1";var n,r={},o=function(u,I){return function(){return I.apply(u,arguments)}},c=function(){var u=arguments,I=u[0],F,m;for(m=1;m<u.length;m++)for(F in u[m])!(F in I)&&u[m].hasOwnProperty(F)&&(I[F]=u[m][F]);return I},a=function(u,I){return{value:u,name:I}};t.TRACE=a(1,"TRACE"),t.DEBUG=a(2,"DEBUG"),t.INFO=a(3,"INFO"),t.TIME=a(4,"TIME"),t.WARN=a(5,"WARN"),t.ERROR=a(8,"ERROR"),t.OFF=a(99,"OFF");var g=function(u){this.context=u,this.setLevel(u.filterLevel),this.log=this.info};g.prototype={setLevel:function(u){u&&"value"in u&&(this.context.filterLevel=u)},getLevel:function(){return this.context.filterLevel},enabledFor:function(u){var I=this.context.filterLevel;return u.value>=I.value},trace:function(){this.invoke(t.TRACE,arguments)},debug:function(){this.invoke(t.DEBUG,arguments)},info:function(){this.invoke(t.INFO,arguments)},warn:function(){this.invoke(t.WARN,arguments)},error:function(){this.invoke(t.ERROR,arguments)},time:function(u){typeof u=="string"&&u.length>0&&this.invoke(t.TIME,[u,"start"])},timeEnd:function(u){typeof u=="string"&&u.length>0&&this.invoke(t.TIME,[u,"end"])},invoke:function(u,I){n&&this.enabledFor(u)&&n(I,c({level:u},this.context))}};var d=new g({filterLevel:t.OFF});(function(){var u=t;u.enabledFor=o(d,d.enabledFor),u.trace=o(d,d.trace),u.debug=o(d,d.debug),u.time=o(d,d.time),u.timeEnd=o(d,d.timeEnd),u.info=o(d,d.info),u.warn=o(d,d.warn),u.error=o(d,d.error),u.log=u.info})(),t.setHandler=function(u){n=u},t.setLevel=function(u){d.setLevel(u);for(var I in r)r.hasOwnProperty(I)&&r[I].setLevel(u)},t.getLevel=function(){return d.getLevel()},t.get=function(u){return r[u]||(r[u]=new g(c({name:u},d.context)))},t.createDefaultHandler=function(u){u=u||{},u.formatter=u.formatter||function(f,y){y.name&&f.unshift("["+y.name+"]")};var I={},F=function(m,f){Function.prototype.apply.call(m,console,f)};return typeof console>"u"?function(){}:function(m,f){m=Array.prototype.slice.call(m);var y=console.log,x;f.level===t.TIME?(x=(f.name?"["+f.name+"] ":"")+m[0],m[1]==="start"?console.time?console.time(x):I[x]=new Date().getTime():console.timeEnd?console.timeEnd(x):F(y,[x+": "+(new Date().getTime()-I[x])+"ms"])):(f.level===t.WARN&&console.warn?y=console.warn:f.level===t.ERROR&&console.error?y=console.error:f.level===t.INFO&&console.info?y=console.info:f.level===t.DEBUG&&console.debug?y=console.debug:f.level===t.TRACE&&console.trace&&(y=console.trace),u.formatter(m,f),F(y,m))}},t.useDefaults=function(u){t.setLevel(u&&u.defaultLevel||t.DEBUG),t.setHandler(t.createDefaultHandler(u))},t.setDefaults=t.useDefaults,i.exports?i.exports=t:(t._prevLogger=e.Logger,t.noConflict=function(){return e.Logger=t._prevLogger,t},e.Logger=t)})(Zs)}(Qt)),Qt.exports}var vs=Gs();const _e=gt(vs),Di="0.6.0-RC-2",xt=60,ws=((Ss=window==null?void 0:window.navigator)==null?void 0:Ss.userAgent)||"No user agent available";let Vt="",Rt="",Ct="",ht="",ft="",Hi="",Et="",St=0;const Zt=[];function Ls(i){function e(t,n){return{ts:Math.round(n.timestamp)||"",ot:t==="audio"?"a":"v",bl:n.jitterBufferDelay||0,br:Math.round(n.bitrateBitsPerSecond||0),pld:n.packetsLostDeltaPerSecond||0,j:n.jitter||0,mtp:n.packetRate||0,mid:n.mid||"",mimeType:n.mimeType||""}}return i.stats=i.stats.reduce((t,n)=>{const r=n.audio.inbounds.length!==0?n.audio.inbounds.map(c=>e("audio",c)):n.audio.outbounds.map(c=>e("audio",c)),o=n.video.inbounds.length!==0?n.video.inbounds.map(c=>e("video",c)):n.video.outbounds.map(c=>e("video",c));return t.concat([...r,...o])},[]),i}const xe={initAccountId:i=>{Vt=Vt===""?i:Vt},initStreamName:i=>{Rt=Rt===""?i:Rt},initSubscriberId:i=>{Ct=Ct===""?i:Ct},initStreamViewId:i=>{ht=ht===""?i:ht},initFeedId:i=>{ft=ft===""?i:ft},setConnectionTime:i=>{St=St===0?i:St},setConnectionState:i=>{Hi=i},setClusterId:i=>{Et=Et===""?i:Et},addStats:i=>{Zt.length===xt&&Zt.shift(),Zt.push(i)},get:(i=xt,e="JSON")=>{let t;!Number.isInteger(i)||i>xt||i<=0?t=xt:t=i;const n={client:"@millicast/millicast-sdk",version:Di,timestamp:new Date().toISOString(),userAgent:ws,clusterId:Et,accountId:Vt,streamName:Rt,subscriberId:Ct,connection:Hi,stats:Zt.slice(-t),connectionDurationMs:new Date().getTime()-St};return ft!==""?n.feedId=ft:ht!==""&&(n.streamViewId=ht),e==="CMCD"?Ls(n):n}};_e.useDefaults({defaultLevel:_e.TRACE});const Gt=["TRACE","DEBUG","INFO","WARN","ERROR"],Ji=(i,e)=>{i.unshift(`[${e.name||"Global"}] ${new Date().toISOString()} - ${e.level.name} -`)},Yi=(i,e)=>e?i.value>=qe[e].value:i.value>=vt.value,Xs=(i,e)=>{i=Array.prototype.slice.call(i),i=i.map(t=>typeof t=="object"?JSON.stringify(t):t),Ji(i,e),mt!==0?(ot.push(i.join(" ")),ot.length>=mt&&(ot=ot.slice(-mt))):ot=[]},As=_e.createDefaultHandler({formatter:Ji});_e.setHandler((i,e)=>{Xs(i,e),Yi(e.level,e.name)&&As(i,e);for(const{handler:t,level:n}of Mi)e.level.value>=n.value&&t(i,e)});let mt=1e4,ot=[],vt=_e.OFF;const qe={},Mi=[],Ne={..._e,enabledFor:Yi,getHistory:()=>ot,getHistoryMaxSize:()=>mt,setHistoryMaxSize:i=>{mt=i},setLevel:i=>{vt=i;for(const e in qe)qe[e]=i},getLevel:()=>vt,get:i=>{qe[i]||(qe[i]=vt);const e=_e.get(i);return e.setLevel=t=>{qe[i]=t},e.getLevel=()=>qe[i],e},setHandler:(i,e)=>{Mi.push({handler:i,level:e})},diagnose:(i={})=>{let e;const t={statsCount:60,historySize:1e3,minLogLevel:"TRACE",statsFormat:"JSON"};typeof i=="number"?(t.statsCount=i,e=t):e={...t,...i};const{statsCount:n,historySize:r,minLogLevel:o,statsFormat:c}=e,a=xe.get(n,c),g=Ne.getHistory();if(!Number.isInteger(r)||r<=0)throw new Error("Invalid Argument Exception : historySize must be a positive integer.");if(!Gt.includes(o.toUpperCase()))throw new Error('Invalid Argument Exception : the minLogLevel parameter only excepts "trace", "debug", "info", "warn", and "error" as arguments.');if(Gt.includes(o.toUpperCase())){const d=Gt.slice(Gt.indexOf(o.toUpperCase())),u=g.filter(I=>d.some(F=>I.includes(F)));a.history=u.slice(-r)}return a},JSON:"JSON",CMCD:"CMCD",VERSION:Di};var wt={exports:{}},Pi;function on(){if(Pi)return wt.exports;Pi=1;var i=typeof Reflect=="object"?Reflect:null,e=i&&typeof i.apply=="function"?i.apply:function(b,Q,B){return Function.prototype.apply.call(b,Q,B)},t;i&&typeof i.ownKeys=="function"?t=i.ownKeys:Object.getOwnPropertySymbols?t=function(b){return Object.getOwnPropertyNames(b).concat(Object.getOwnPropertySymbols(b))}:t=function(b){return Object.getOwnPropertyNames(b)};function n(U){console&&console.warn&&console.warn(U)}var r=Number.isNaN||function(b){return b!==b};function o(){o.init.call(this)}wt.exports=o,wt.exports.once=v,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var c=10;function a(U){if(typeof U!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof U)}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(U){if(typeof U!="number"||U<0||r(U))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+U+".");c=U}}),o.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(b){if(typeof b!="number"||b<0||r(b))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+b+".");return this._maxListeners=b,this};function g(U){return U._maxListeners===void 0?o.defaultMaxListeners:U._maxListeners}o.prototype.getMaxListeners=function(){return g(this)},o.prototype.emit=function(b){for(var Q=[],B=1;B<arguments.length;B++)Q.push(arguments[B]);var R=b==="error",w=this._events;if(w!==void 0)R=R&&w.error===void 0;else if(!R)return!1;if(R){var E;if(Q.length>0&&(E=Q[0]),E instanceof Error)throw E;var N=new Error("Unhandled error."+(E?" ("+E.message+")":""));throw N.context=E,N}var K=w[b];if(K===void 0)return!1;if(typeof K=="function")e(K,this,Q);else for(var Y=K.length,ee=f(K,Y),B=0;B<Y;++B)e(ee[B],this,Q);return!0};function d(U,b,Q,B){var R,w,E;if(a(Q),w=U._events,w===void 0?(w=U._events=Object.create(null),U._eventsCount=0):(w.newListener!==void 0&&(U.emit("newListener",b,Q.listener?Q.listener:Q),w=U._events),E=w[b]),E===void 0)E=w[b]=Q,++U._eventsCount;else if(typeof E=="function"?E=w[b]=B?[Q,E]:[E,Q]:B?E.unshift(Q):E.push(Q),R=g(U),R>0&&E.length>R&&!E.warned){E.warned=!0;var N=new Error("Possible EventEmitter memory leak detected. "+E.length+" "+String(b)+" listeners added. Use emitter.setMaxListeners() to increase limit");N.name="MaxListenersExceededWarning",N.emitter=U,N.type=b,N.count=E.length,n(N)}return U}o.prototype.addListener=function(b,Q){return d(this,b,Q,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(b,Q){return d(this,b,Q,!0)};function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function I(U,b,Q){var B={fired:!1,wrapFn:void 0,target:U,type:b,listener:Q},R=u.bind(B);return R.listener=Q,B.wrapFn=R,R}o.prototype.once=function(b,Q){return a(Q),this.on(b,I(this,b,Q)),this},o.prototype.prependOnceListener=function(b,Q){return a(Q),this.prependListener(b,I(this,b,Q)),this},o.prototype.removeListener=function(b,Q){var B,R,w,E,N;if(a(Q),R=this._events,R===void 0)return this;if(B=R[b],B===void 0)return this;if(B===Q||B.listener===Q)--this._eventsCount===0?this._events=Object.create(null):(delete R[b],R.removeListener&&this.emit("removeListener",b,B.listener||Q));else if(typeof B!="function"){for(w=-1,E=B.length-1;E>=0;E--)if(B[E]===Q||B[E].listener===Q){N=B[E].listener,w=E;break}if(w<0)return this;w===0?B.shift():y(B,w),B.length===1&&(R[b]=B[0]),R.removeListener!==void 0&&this.emit("removeListener",b,N||Q)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(b){var Q,B,R;if(B=this._events,B===void 0)return this;if(B.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):B[b]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete B[b]),this;if(arguments.length===0){var w=Object.keys(B),E;for(R=0;R<w.length;++R)E=w[R],E!=="removeListener"&&this.removeAllListeners(E);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(Q=B[b],typeof Q=="function")this.removeListener(b,Q);else if(Q!==void 0)for(R=Q.length-1;R>=0;R--)this.removeListener(b,Q[R]);return this};function F(U,b,Q){var B=U._events;if(B===void 0)return[];var R=B[b];return R===void 0?[]:typeof R=="function"?Q?[R.listener||R]:[R]:Q?x(R):f(R,R.length)}o.prototype.listeners=function(b){return F(this,b,!0)},o.prototype.rawListeners=function(b){return F(this,b,!1)},o.listenerCount=function(U,b){return typeof U.listenerCount=="function"?U.listenerCount(b):m.call(U,b)},o.prototype.listenerCount=m;function m(U){var b=this._events;if(b!==void 0){var Q=b[U];if(typeof Q=="function")return 1;if(Q!==void 0)return Q.length}return 0}o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]};function f(U,b){for(var Q=new Array(b),B=0;B<b;++B)Q[B]=U[B];return Q}function y(U,b){for(;b+1<U.length;b++)U[b]=U[b+1];U.pop()}function x(U){for(var b=new Array(U.length),Q=0;Q<b.length;++Q)b[Q]=U[Q].listener||U[Q];return b}function v(U,b){return new Promise(function(Q,B){function R(E){U.removeListener(b,w),B(E)}function w(){typeof U.removeListener=="function"&&U.removeListener("error",R),Q([].slice.call(arguments))}A(U,b,w,{once:!0}),b!=="error"&&L(U,R,{once:!0})})}function L(U,b,Q){typeof U.on=="function"&&A(U,"error",b,Q)}function A(U,b,Q,B){if(typeof U.on=="function")B.once?U.once(b,Q):U.on(b,Q);else if(typeof U.addEventListener=="function")U.addEventListener(b,function R(w){B.once&&U.removeEventListener(b,R),Q(w)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof U)}return wt.exports}var Ns=on();const Lt=gt(Ns);var Xt={exports:{}},zi;function Ws(){if(zi)return Xt.exports;zi=1,Xt.exports=e,Xt.exports.filter=t;var i=on().EventEmitter;function e(n,r,o){Array.isArray(o)||(o=[o]);var c=[];return o.forEach(function(a){var g=function(){var d=[].slice.call(arguments);d.unshift(a),r.emit.apply(r,d)};c.push(g),n.on(a,g)}),function(){o.forEach(function(g,d){n.removeListener(g,c[d])})}}function t(n,r){var o=new i;return e(n,o,r),o}return Xt.exports}var ks=Ws();const At=gt(ks);var an={exports:{}};/*! For license information please see webrtc-stats.js.LICENSE.txt */var ji;function Ts(){return ji||(ji=1,function(i,e){(function(t,n){i.exports=n()})(self,()=>{return t={7:r=>{var o,c=typeof Reflect=="object"?Reflect:null,a=c&&typeof c.apply=="function"?c.apply:function(U,b,Q){return Function.prototype.apply.call(U,b,Q)};o=c&&typeof c.ownKeys=="function"?c.ownKeys:Object.getOwnPropertySymbols?function(U){return Object.getOwnPropertyNames(U).concat(Object.getOwnPropertySymbols(U))}:function(U){return Object.getOwnPropertyNames(U)};var g=Number.isNaN||function(U){return U!=U};function d(){d.init.call(this)}r.exports=d,r.exports.once=function(U,b){return new Promise(function(Q,B){function R(E){U.removeListener(b,w),B(E)}function w(){typeof U.removeListener=="function"&&U.removeListener("error",R),Q([].slice.call(arguments))}A(U,b,w,{once:!0}),b!=="error"&&function(E,N){typeof E.on=="function"&&A(E,"error",N,{once:!0})}(U,R)})},d.EventEmitter=d,d.prototype._events=void 0,d.prototype._eventsCount=0,d.prototype._maxListeners=void 0;var u=10;function I(U){if(typeof U!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof U)}function F(U){return U._maxListeners===void 0?d.defaultMaxListeners:U._maxListeners}function m(U,b,Q,B){var R,w,E,N;if(I(Q),(w=U._events)===void 0?(w=U._events=Object.create(null),U._eventsCount=0):(w.newListener!==void 0&&(U.emit("newListener",b,Q.listener?Q.listener:Q),w=U._events),E=w[b]),E===void 0)E=w[b]=Q,++U._eventsCount;else if(typeof E=="function"?E=w[b]=B?[Q,E]:[E,Q]:B?E.unshift(Q):E.push(Q),(R=F(U))>0&&E.length>R&&!E.warned){E.warned=!0;var K=new Error("Possible EventEmitter memory leak detected. "+E.length+" "+String(b)+" listeners added. Use emitter.setMaxListeners() to increase limit");K.name="MaxListenersExceededWarning",K.emitter=U,K.type=b,K.count=E.length,N=K,console&&console.warn&&console.warn(N)}return U}function f(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function y(U,b,Q){var B={fired:!1,wrapFn:void 0,target:U,type:b,listener:Q},R=f.bind(B);return R.listener=Q,B.wrapFn=R,R}function x(U,b,Q){var B=U._events;if(B===void 0)return[];var R=B[b];return R===void 0?[]:typeof R=="function"?Q?[R.listener||R]:[R]:Q?function(w){for(var E=new Array(w.length),N=0;N<E.length;++N)E[N]=w[N].listener||w[N];return E}(R):L(R,R.length)}function v(U){var b=this._events;if(b!==void 0){var Q=b[U];if(typeof Q=="function")return 1;if(Q!==void 0)return Q.length}return 0}function L(U,b){for(var Q=new Array(b),B=0;B<b;++B)Q[B]=U[B];return Q}function A(U,b,Q,B){if(typeof U.on=="function")B.once?U.once(b,Q):U.on(b,Q);else{if(typeof U.addEventListener!="function")throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof U);U.addEventListener(b,function R(w){B.once&&U.removeEventListener(b,R),Q(w)})}}Object.defineProperty(d,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(U){if(typeof U!="number"||U<0||g(U))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+U+".");u=U}}),d.init=function(){this._events!==void 0&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},d.prototype.setMaxListeners=function(U){if(typeof U!="number"||U<0||g(U))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+U+".");return this._maxListeners=U,this},d.prototype.getMaxListeners=function(){return F(this)},d.prototype.emit=function(U){for(var b=[],Q=1;Q<arguments.length;Q++)b.push(arguments[Q]);var B=U==="error",R=this._events;if(R!==void 0)B=B&&R.error===void 0;else if(!B)return!1;if(B){var w;if(b.length>0&&(w=b[0]),w instanceof Error)throw w;var E=new Error("Unhandled error."+(w?" ("+w.message+")":""));throw E.context=w,E}var N=R[U];if(N===void 0)return!1;if(typeof N=="function")a(N,this,b);else{var K=N.length,Y=L(N,K);for(Q=0;Q<K;++Q)a(Y[Q],this,b)}return!0},d.prototype.addListener=function(U,b){return m(this,U,b,!1)},d.prototype.on=d.prototype.addListener,d.prototype.prependListener=function(U,b){return m(this,U,b,!0)},d.prototype.once=function(U,b){return I(b),this.on(U,y(this,U,b)),this},d.prototype.prependOnceListener=function(U,b){return I(b),this.prependListener(U,y(this,U,b)),this},d.prototype.removeListener=function(U,b){var Q,B,R,w,E;if(I(b),(B=this._events)===void 0)return this;if((Q=B[U])===void 0)return this;if(Q===b||Q.listener===b)--this._eventsCount==0?this._events=Object.create(null):(delete B[U],B.removeListener&&this.emit("removeListener",U,Q.listener||b));else if(typeof Q!="function"){for(R=-1,w=Q.length-1;w>=0;w--)if(Q[w]===b||Q[w].listener===b){E=Q[w].listener,R=w;break}if(R<0)return this;R===0?Q.shift():function(N,K){for(;K+1<N.length;K++)N[K]=N[K+1];N.pop()}(Q,R),Q.length===1&&(B[U]=Q[0]),B.removeListener!==void 0&&this.emit("removeListener",U,E||b)}return this},d.prototype.off=d.prototype.removeListener,d.prototype.removeAllListeners=function(U){var b,Q,B;if((Q=this._events)===void 0)return this;if(Q.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):Q[U]!==void 0&&(--this._eventsCount==0?this._events=Object.create(null):delete Q[U]),this;if(arguments.length===0){var R,w=Object.keys(Q);for(B=0;B<w.length;++B)(R=w[B])!=="removeListener"&&this.removeAllListeners(R);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(typeof(b=Q[U])=="function")this.removeListener(U,b);else if(b!==void 0)for(B=b.length-1;B>=0;B--)this.removeListener(U,b[B]);return this},d.prototype.listeners=function(U){return x(this,U,!0)},d.prototype.rawListeners=function(U){return x(this,U,!1)},d.listenerCount=function(U,b){return typeof U.listenerCount=="function"?U.listenerCount(b):v.call(U,b)},d.prototype.listenerCount=v,d.prototype.eventNames=function(){return this._eventsCount>0?o(this._events):[]}},156:function(r,o,c){var a=this&&this.__createBinding||(Object.create?function(I,F,m,f){f===void 0&&(f=m);var y=Object.getOwnPropertyDescriptor(F,m);y&&!("get"in y?!F.__esModule:y.writable||y.configurable)||(y={enumerable:!0,get:function(){return F[m]}}),Object.defineProperty(I,f,y)}:function(I,F,m,f){f===void 0&&(f=m),I[f]=F[m]}),g=this&&this.__exportStar||function(I,F){for(var m in I)m==="default"||Object.prototype.hasOwnProperty.call(F,m)||a(F,I,m)},d=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(o,"__esModule",{value:!0}),o.Logger=void 0;var u=c(586);Object.defineProperty(o,"Logger",{enumerable:!0,get:function(){return d(u).default}}),g(c(284),o),g(c(280),o),g(c(738),o),g(c(767),o)},185:(r,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.calculatePacketsLostRatio=o.calculateRate=o.getMediaKind=void 0,o.getMediaKind=c=>{let a=c.kind||c.mediaType;return["audio","video"].includes(a)||c.type!=="inbound-rtp"||(a=c.id.toLocaleLowerCase().includes("video")?"video":"audio"),a},o.calculateRate=(c,a,g,d)=>g&&d?(a-d)/((c-g)/1e3):0,o.calculatePacketsLostRatio=(c,a,g,d)=>{const u=c-(g??0),I=u+(a-(d??0));return I===0?0:u/I}},280:(r,o)=>{Object.defineProperty(o,"__esModule",{value:!0})},284:function(r,o,c){var a,g,d,u,I,F,m,f,y,x,v,L,A,U,b,Q,B=this&&this.__awaiter||function(D,X,T,j){return new(T||(T=Promise))(function(O,k){function W(P){try{M(j.next(P))}catch(z){k(z)}}function H(P){try{M(j.throw(P))}catch(z){k(z)}}function M(P){var z;P.done?O(P.value):(z=P.value,z instanceof T?z:new T(function(ie){ie(z)})).then(W,H)}M((j=j.apply(D,X||[])).next())})},R=this&&this.__classPrivateFieldSet||function(D,X,T,j,O){if(j==="m")throw new TypeError("Private method is not writable");if(j==="a"&&!O)throw new TypeError("Private accessor was defined without a setter");if(typeof X=="function"?D!==X||!O:!X.has(D))throw new TypeError("Cannot write private member to an object whose class did not declare it");return j==="a"?O.call(D,T):O?O.value=T:X.set(D,T),T},w=this&&this.__classPrivateFieldGet||function(D,X,T,j){if(T==="a"&&!j)throw new TypeError("Private accessor was defined without a getter");if(typeof X=="function"?D!==X||!j:!X.has(D))throw new TypeError("Cannot read private member from an object whose class did not declare it");return T==="m"?j:T==="a"?j.call(D):j?j.value:X.get(D)},E=this&&this.__importDefault||function(D){return D&&D.__esModule?D:{default:D}};Object.defineProperty(o,"__esModule",{value:!0}),o.WebRTCStats=void 0;const N=c(7),K=E(c(586)),Y=c(738),ee=c(185);class J extends N.EventEmitter{constructor(X){super(),a.add(this),g.set(this,void 0),d.set(this,void 0),u.set(this,void 0),I.set(this,null),F.set(this,void 0),m.set(this,null),this.start=()=>{w(this,F,"f").info("WebRTC statistics collection is starting..."),R(this,m,null,"f"),R(this,I,setInterval(w(this,f,"f"),w(this,d,"f")),"f")},this.stop=()=>{w(this,I,"f")&&(clearInterval(w(this,I,"f")),R(this,I,null,"f"),w(this,F,"f").info("WebRTC statistics collection has stopped."))},f.set(this,()=>B(this,void 0,void 0,function*(){let T,j;try{w(this,F,"f").trace("Requesting WebRTC statistics..."),T=yield w(this,g,"f").call(this),j=new Date().toISOString()}catch(W){return w(this,F,"f").error("Problem collecting the WebRTC statistics.",W),void this.emit("error",`Problem collecting the WebRTC statistics - ${W}`)}const O=Array.from(T.values()),k={timestamp:j,input:{audio:[],video:[]},output:{audio:[],video:[]}};w(this,u,"f")&&(k.rawStats=T);for(let W=0;W<Object.keys(O).length;W++){const H=O[W];switch(H.type){case"outbound-rtp":const M=H,P=(0,ee.getMediaKind)(M);P==="audio"?yield w(this,a,"m",v).call(this,T,M,k):P==="video"&&(yield w(this,a,"m",L).call(this,T,M,k));break;case"inbound-rtp":const z=H;let ie=(0,ee.getMediaKind)(z);ie==="audio"?yield w(this,a,"m",U).call(this,T,z,k):ie==="video"&&(yield w(this,a,"m",b).call(this,T,z,k));break;case"candidate-pair":const ge=H;ge.nominated&&w(this,a,"m",Q).call(this,ge,k)}}R(this,m,k,"f"),this.emit("stats",k)})),R(this,F,K.default.get("WebRTCStats"),"f"),R(this,g,X.getStats,"f"),R(this,d,X.getStatsInterval||1e3,"f"),R(this,u,!!X.includeRawStats,"f")}}o.WebRTCStats=J,g=new WeakMap,d=new WeakMap,u=new WeakMap,I=new WeakMap,F=new WeakMap,m=new WeakMap,f=new WeakMap,a=new WeakSet,y=function(D,X){if(X){const T=D.get(X);if(T)return{mimeType:T.mimeType}}return{}},x=function(D,X,T){return B(this,void 0,void 0,function*(){var j,O,k,W;const H=(0,ee.calculateRate)(X.timestamp,X.bytesSent,T==null?void 0:T.timestamp,T==null?void 0:T.totalBytesSent),M=(0,ee.calculateRate)(X.timestamp,X.packetsSent,T==null?void 0:T.timestamp,T==null?void 0:T.totalPacketsSent),P=w(this,a,"m",y).call(this,D,X.codecId);return Object.assign({id:X.id,timestamp:X.timestamp,mid:X.mid,totalBytesSent:X.bytesSent,bytesSentDelta:X.bytesSent-((j=T==null?void 0:T.totalBytesSent)!==null&&j!==void 0?j:0),totalPacketsSent:X.packetsSent,packetsSentDelta:X.packetsSent-((O=T==null?void 0:T.totalPacketsSent)!==null&&O!==void 0?O:0),bitrate:H,packetRate:M,targetBitrate:X.targetBitrate,retransmittedPacketsSent:X.retransmittedPacketsSent,retransmittedPacketsSentDelta:X.retransmittedPacketsSent-((k=T==null?void 0:T.retransmittedPacketsSent)!==null&&k!==void 0?k:0),retransmittedBytesSent:X.retransmittedBytesSent,retransmittedBytesSentDelta:X.retransmittedBytesSent-((W=T==null?void 0:T.retransmittedBytesSent)!==null&&W!==void 0?W:0)},P)})},v=function(D,X,T){return B(this,void 0,void 0,function*(){var j;const O=(j=w(this,m,"f"))===null||j===void 0?void 0:j.output.audio.find(H=>H.id===X.id);if(O&&X.timestamp-O.timestamp<=0)return;const k=yield w(this,a,"m",x).call(this,D,X,O),W=Object.assign({},k);T.output.audio.push(W)})},L=function(D,X,T){return B(this,void 0,void 0,function*(){var j;const O=(j=w(this,m,"f"))===null||j===void 0?void 0:j.output.video.find(M=>M.id===X.id);if(O&&X.timestamp-O.timestamp<=0)return;const k=yield w(this,a,"m",x).call(this,D,X,O);let W=Y.QualityLimitationReason.none;X.qualityLimitationReason&&(W=X.qualityLimitationReason);const H=Object.assign(Object.assign({},k),{frameWidth:X.frameWidth,frameHeight:X.frameHeight,framesPerSecond:X.framesPerSecond,framesSent:X.framesSent,qualityLimitationReason:W,qualityLimitationDurations:X.qualityLimitationDurations});T.output.video.push(H)})},A=function(D,X,T){return B(this,void 0,void 0,function*(){var j,O;const k=(0,ee.calculateRate)(X.timestamp,X.bytesReceived,T==null?void 0:T.timestamp,T==null?void 0:T.totalBytesReceived),W=(0,ee.calculateRate)(X.timestamp,X.packetsReceived,T==null?void 0:T.timestamp,T==null?void 0:T.totalPacketsReceived),H=(0,ee.calculatePacketsLostRatio)(X.packetsLost,X.packetsReceived,T==null?void 0:T.totalPacketsLost,T==null?void 0:T.totalPacketsReceived),M=((j=X.packetsLost)!==null&&j!==void 0?j:0)-((O=T==null?void 0:T.totalPacketsLost)!==null&&O!==void 0?O:0),P=w(this,a,"m",y).call(this,D,X.codecId);return Object.assign({id:X.id,timestamp:X.timestamp,mid:X.mid,trackIdentifier:X.trackIdentifier,jitter:X.jitter,jitterBufferDelay:X.jitterBufferDelay,jitterBufferEmittedCount:X.jitterBufferEmittedCount,totalBytesReceived:X.bytesReceived,totalPacketsReceived:X.packetsReceived,totalPacketsLost:X.packetsLost,bitrate:k,packetRate:W,packetLossRatio:H,packetLossDelta:M},P)})},U=function(D,X,T){return B(this,void 0,void 0,function*(){var j;const O=(j=w(this,m,"f"))===null||j===void 0?void 0:j.input.audio.find(W=>W.id===X.id);if(O&&X.timestamp-O.timestamp<=0)return;const k=yield w(this,a,"m",A).call(this,D,X,O);T.input.audio.push(k)})},b=function(D,X,T){return B(this,void 0,void 0,function*(){var j;const O=(j=w(this,m,"f"))===null||j===void 0?void 0:j.input.video.find(H=>H.id===X.id);if(O&&X.timestamp-O.timestamp<=0)return;const k=yield w(this,a,"m",A).call(this,D,X,O),W=Object.assign(Object.assign({},k),{keyFramesDecoded:X.keyFramesDecoded,frameHeight:X.frameHeight,frameWidth:X.frameWidth,framesDecoded:X.framesDecoded,framesDropped:X.framesDropped,framesPerSecond:X.framesPerSecond,framesReceived:X.framesReceived});T.input.video.push(W)})},Q=function(D,X){X.totalRoundTripTime=D.totalRoundTripTime,X.currentRoundTripTime=D.currentRoundTripTime,X.responsesReceived=D.responsesReceived,X.availableOutgoingBitrate=D.availableOutgoingBitrate,X.availableIncomingBitrate=D.availableIncomingBitrate}},586:function(r,o,c){var a,g;(function(){var d,u={VERSION:"1.6.1"},I={},F=function(L,A){return function(){return A.apply(L,arguments)}},m=function(){var L,A,U=arguments,b=U[0];for(A=1;A<U.length;A++)for(L in U[A])!(L in b)&&U[A].hasOwnProperty(L)&&(b[L]=U[A][L]);return b},f=function(L,A){return{value:L,name:A}};u.TRACE=f(1,"TRACE"),u.DEBUG=f(2,"DEBUG"),u.INFO=f(3,"INFO"),u.TIME=f(4,"TIME"),u.WARN=f(5,"WARN"),u.ERROR=f(8,"ERROR"),u.OFF=f(99,"OFF");var y=function(L){this.context=L,this.setLevel(L.filterLevel),this.log=this.info};y.prototype={setLevel:function(L){L&&"value"in L&&(this.context.filterLevel=L)},getLevel:function(){return this.context.filterLevel},enabledFor:function(L){var A=this.context.filterLevel;return L.value>=A.value},trace:function(){this.invoke(u.TRACE,arguments)},debug:function(){this.invoke(u.DEBUG,arguments)},info:function(){this.invoke(u.INFO,arguments)},warn:function(){this.invoke(u.WARN,arguments)},error:function(){this.invoke(u.ERROR,arguments)},time:function(L){typeof L=="string"&&L.length>0&&this.invoke(u.TIME,[L,"start"])},timeEnd:function(L){typeof L=="string"&&L.length>0&&this.invoke(u.TIME,[L,"end"])},invoke:function(L,A){d&&this.enabledFor(L)&&d(A,m({level:L},this.context))}};var x,v=new y({filterLevel:u.OFF});(x=u).enabledFor=F(v,v.enabledFor),x.trace=F(v,v.trace),x.debug=F(v,v.debug),x.time=F(v,v.time),x.timeEnd=F(v,v.timeEnd),x.info=F(v,v.info),x.warn=F(v,v.warn),x.error=F(v,v.error),x.log=x.info,u.setHandler=function(L){d=L},u.setLevel=function(L){for(var A in v.setLevel(L),I)I.hasOwnProperty(A)&&I[A].setLevel(L)},u.getLevel=function(){return v.getLevel()},u.get=function(L){return I[L]||(I[L]=new y(m({name:L},v.context)))},u.createDefaultHandler=function(L){(L=L||{}).formatter=L.formatter||function(b,Q){Q.name&&b.unshift("["+Q.name+"]")};var A={},U=function(b,Q){Function.prototype.apply.call(b,console,Q)};return typeof console>"u"?function(){}:function(b,Q){b=Array.prototype.slice.call(b);var B,R=console.log;Q.level===u.TIME?(B=(Q.name?"["+Q.name+"] ":"")+b[0],b[1]==="start"?console.time?console.time(B):A[B]=new Date().getTime():console.timeEnd?console.timeEnd(B):U(R,[B+": "+(new Date().getTime()-A[B])+"ms"])):(Q.level===u.WARN&&console.warn?R=console.warn:Q.level===u.ERROR&&console.error?R=console.error:Q.level===u.INFO&&console.info?R=console.info:Q.level===u.DEBUG&&console.debug?R=console.debug:Q.level===u.TRACE&&console.trace&&(R=console.trace),L.formatter(b,Q),U(R,b))}},u.useDefaults=function(L){u.setLevel(L&&L.defaultLevel||u.DEBUG),u.setHandler(u.createDefaultHandler(L))},u.setDefaults=u.useDefaults,(g=typeof(a=u)=="function"?a.call(o,c,o,r):a)===void 0||(r.exports=g)})()},738:(r,o)=>{var c;Object.defineProperty(o,"__esModule",{value:!0}),o.QualityLimitationReason=void 0,function(a){a[a.none=0]="none",a[a.cpu=1]="cpu",a[a.bandwidth=2]="bandwidth",a[a.other=3]="other"}(c||(o.QualityLimitationReason=c={}))},767:(r,o)=>{Object.defineProperty(o,"__esModule",{value:!0})}},n={},function r(o){var c=n[o];if(c!==void 0)return c.exports;var a=n[o]={exports:{}};return t[o].call(a.exports,a,a.exports,r),a.exports}(156);var t,n})}(an)),an.exports}var Ds=Ts();const Ft=Ne.get("PeerConnectionStats"),Oi={stats:"stats"},Hs=i=>{const{input:e,output:t,rawStats:n,...r}=i;return{...r,audio:{inbounds:i.input.audio.map(({packetLossRatio:c,packetLossDelta:a,bitrate:g,...d})=>({packetsLostRatioPerSecond:c,packetsLostDeltaPerSecond:a,bitrateBitsPerSecond:g*8,bitrate:g,...d})),outbounds:i.output.audio.map(({packetLossRatio:c,packetLossDelta:a,bitrate:g,...d})=>({packetsLostRatioPerSecond:c,packetsLostDeltaPerSecond:a,bitrateBitsPerSecond:g*8,bitrate:g,...d}))},video:{inbounds:i.input.video.map(({packetLossRatio:c,packetLossDelta:a,bitrate:g,...d})=>({packetsLostRatioPerSecond:c,packetsLostDeltaPerSecond:a,bitrateBitsPerSecond:g*8,bitrate:g,...d})),outbounds:i.output.video.map(({packetLossRatio:c,packetLossDelta:a,bitrate:g,...d})=>({packetsLostRatioPerSecond:c,packetsLostDeltaPerSecond:a,bitrateBitsPerSecond:g*8,bitrate:g,...d}))},raw:i.rawStats}};class Js extends Lt{constructor(e,t={statsIntervalMs:1e3,autoInitStats:!0}){super(),this.peer=e,this.collection=null,this.initialized=!1,t.autoInitStats&&this.init(t.statsIntervalMs)}init(e){if(this.initialized){Ft.warn("PeerConnectionStats.init() has already been called. Automatic initialization occurs when the PeerConnectionStats object is constructed.");return}Ft.info("Initializing peer connection stats");const t=this.peer;try{this.collection=new Ds.WebRTCStats({getStatsInterval:e,getStats:()=>t.getStats(),includeRawStats:!0}),this.collection.on("stats",n=>{const r=Hs(n);xe.addStats(r),this.emit(Oi.stats,r)}),this.collection.start(),this.initialized=!0}catch(n){Ft.error(n)}}parseStats(e){return Ft.warn("The parseStats method is deprecated and will be removed in future releases."),null}stop(){Ft.info("Stopping peer connection stats"),this.collection.stop()}}var he={},We={},cn={},ln={exports:{}},Ki;function _i(){if(Ki)return ln.exports;Ki=1;var i=ln.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(e){return e.encoding?"rtpmap:%d %s/%s/%s":e.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(e){return e.address!=null?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%s trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(e){return e.subtype!=null?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,names:["value","direction","encrypt-uri","uri","config"],format:function(e){return"extmap:%d"+(e.direction?"/%s":"%v")+(e["encrypt-uri"]?" %s":"%v")+" %s"+(e.config?" %s":"")}},{name:"extmapAllowMixed",reg:/^(extmap-allow-mixed)/},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(e){return e.sessionConfig!=null?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"connectionType",reg:/^connection:(new|existing)/,format:"connection:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*(?:\.\d*)*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*(?:\.\d*)*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(e){var t="candidate:%s %d %s %d %s %d typ %s";return t+=e.raddr!=null?" raddr %s rport %d":"%v%v",t+=e.tcptype!=null?" tcptype %s":"%v",e.generation!=null&&(t+=" generation %d"),t+=e["network-id"]!=null?" network-id %d":"%v",t+=e["network-cost"]!=null?" network-cost %d":"%v",t}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,names:["id","attribute","value"],format:function(e){var t="ssrc:%d";return e.attribute!=null&&(t+=" %s",e.value!=null&&(t+=":%s")),t}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(e){return e.maxMessageSize!=null?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(e){return e.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(e){return"imageattr:%s %s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(e){return"simulcast:%s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{name:"sourceFilter",reg:/^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,names:["filterMode","netType","addressTypes","destAddress","srcList"],format:"source-filter: %s %s %s %s %s"},{name:"bundleOnly",reg:/^(bundle-only)/},{name:"label",reg:/^label:(.+)/,format:"label:%s"},{name:"sctpPort",reg:/^sctp-port:(\d+)$/,format:"sctp-port:%s"},{name:"maxMessageSize",reg:/^max-message-size:(\d+)$/,format:"max-message-size:%s"},{push:"tsRefClocks",reg:/^ts-refclk:([^\s=]*)(?:=(\S*))?/,names:["clksrc","clksrcExt"],format:function(e){return"ts-refclk:%s"+(e.clksrcExt!=null?"=%s":"")}},{name:"mediaClk",reg:/^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,names:["id","mediaClockName","mediaClockValue","rateNumerator","rateDenominator"],format:function(e){var t="mediaclk:";return t+=e.id!=null?"id=%s %s":"%v%s",t+=e.mediaClockValue!=null?"=%s":"",t+=e.rateNumerator!=null?" rate=%s":"",t+=e.rateDenominator!=null?"/%s":"",t}},{name:"keywords",reg:/^keywds:(.+)$/,format:"keywds:%s"},{name:"content",reg:/^content:(.+)/,format:"content:%s"},{name:"bfcpFloorCtrl",reg:/^floorctrl:(c-only|s-only|c-s)/,format:"floorctrl:%s"},{name:"bfcpConfId",reg:/^confid:(\d+)/,format:"confid:%s"},{name:"bfcpUserId",reg:/^userid:(\d+)/,format:"userid:%s"},{name:"bfcpFloorId",reg:/^floorid:(.+) (?:m-stream|mstrm):(.+)/,names:["id","mStream"],format:"floorid:%s mstrm:%s"},{push:"invalid",names:["value"]}]};return Object.keys(i).forEach(function(e){var t=i[e];t.forEach(function(n){n.reg||(n.reg=/(.*)/),n.format||(n.format="%s")})}),ln.exports}var qi;function Ys(){return qi||(qi=1,function(i){var e=function(a){return String(Number(a))===a?Number(a):a},t=function(a,g,d,u){if(u&&!d)g[u]=e(a[1]);else for(var I=0;I<d.length;I+=1)a[I+1]!=null&&(g[d[I]]=e(a[I+1]))},n=function(a,g,d){var u=a.name&&a.names;a.push&&!g[a.push]?g[a.push]=[]:u&&!g[a.name]&&(g[a.name]={});var I=a.push?{}:u?g[a.name]:g;t(d.match(a.reg),I,a.names,a.name),a.push&&g[a.push].push(I)},r=_i(),o=RegExp.prototype.test.bind(/^([a-z])=(.*)/);i.parse=function(a){var g={},d=[],u=g;return a.split(/(\r\n|\r|\n)/).filter(o).forEach(function(I){var F=I[0],m=I.slice(2);F==="m"&&(d.push({rtp:[],fmtp:[]}),u=d[d.length-1]);for(var f=0;f<(r[F]||[]).length;f+=1){var y=r[F][f];if(y.reg.test(m))return n(y,u,m)}}),g.media=d,g};var c=function(a,g){var d=g.split(/=(.+)/,2);return d.length===2?a[d[0]]=e(d[1]):d.length===1&&g.length>1&&(a[d[0]]=void 0),a};i.parseParams=function(a){return a.split(/;\s?/).reduce(c,{})},i.parseFmtpConfig=i.parseParams,i.parsePayloads=function(a){return a.toString().split(" ").map(Number)},i.parseRemoteCandidates=function(a){for(var g=[],d=a.split(" ").map(e),u=0;u<d.length;u+=3)g.push({component:d[u],ip:d[u+1],port:d[u+2]});return g},i.parseImageAttributes=function(a){return a.split(" ").map(function(g){return g.substring(1,g.length-1).split(",").reduce(c,{})})},i.parseSimulcastStreamList=function(a){return a.split(";").map(function(g){return g.split(",").map(function(d){var u,I=!1;return d[0]!=="~"?u=e(d):(u=e(d.substring(1,d.length)),I=!0),{scid:u,paused:I}})})}}(cn)),cn}var dn,$i;function Ms(){if($i)return dn;$i=1;var i=_i(),e=/%[sdv%]/g,t=function(c){var a=1,g=arguments,d=g.length;return c.replace(e,function(u){if(a>=d)return u;var I=g[a];switch(a+=1,u){case"%%":return"%";case"%s":return String(I);case"%d":return Number(I);case"%v":return""}})},n=function(c,a,g){var d=a.format instanceof Function?a.format(a.push?g:g[a.name]):a.format,u=[c+"="+d];if(a.names)for(var I=0;I<a.names.length;I+=1){var F=a.names[I];a.name?u.push(g[a.name][F]):u.push(g[a.names[I]])}else u.push(g[a.name]);return t.apply(null,u)},r=["v","o","s","i","u","e","p","c","b","t","r","z","a"],o=["i","c","b","a"];return dn=function(c,a){a=a||{},c.version==null&&(c.version=0),c.name==null&&(c.name=" "),c.media.forEach(function(I){I.payloads==null&&(I.payloads="")});var g=a.outerOrder||r,d=a.innerOrder||o,u=[];return g.forEach(function(I){i[I].forEach(function(F){F.name in c&&c[F.name]!=null?u.push(n(I,F,c)):F.push in c&&c[F.push]!=null&&c[F.push].forEach(function(m){u.push(n(I,F,m))})})}),c.media.forEach(function(I){u.push(n("m",i.m[0],I)),d.forEach(function(F){i[F].forEach(function(m){m.name in I&&I[m.name]!=null?u.push(n(F,m,I)):m.push in I&&I[m.push]!=null&&I[m.push].forEach(function(f){u.push(n(F,m,f))})})})}),u.join(`\r
`)+`\r
`},dn}var er;function Ps(){if(er)return We;er=1;var i=Ys(),e=Ms();return We.write=e,We.parse=i.parse,We.parseParams=i.parseParams,We.parseFmtpConfig=i.parseFmtpConfig,We.parsePayloads=i.parsePayloads,We.parseRemoteCandidates=i.parseRemoteCandidates,We.parseImageAttributes=i.parseImageAttributes,We.parseSimulcastStreamList=i.parseSimulcastStreamList,We}var un,tr;function zs(){return tr||(tr=1,un=function(i){const e=new Intl.Collator(i,{sensitivity:"base"});return(t,n)=>e.compare(t,n)==0}),un}var gn,nr;function ir(){if(nr)return gn;nr=1;class i{constructor(t,n,r,o,c,a,g,d,u){this.foundation=t,this.componentId=n,this.transport=r,this.priority=o,this.address=c,this.port=a,this.type=g,this.relAddr=d,this.relPort=u}equals(t){return t.foundation===this.foundation&&t.componentId===this.componentId&&t.transport===this.transport&&t.priority===this.priority&&t.address===this.address&&t.port===this.port&&t.type===this.type&&t.relAddr===this.relAddr&&t.relPort===this.relPort}clone(){return new i(this.foundation,this.componentId,this.transport,this.priority,this.address,this.port,this.type,this.relAddr,this.relPort)}plain(){const t={foundation:this.foundation,componentId:this.componentId,transport:this.transport,priority:this.priority,address:this.address,port:this.port,type:this.type};return this.relAddr&&(t.relAddr=this.relAddr),this.relPort&&(t.relPort=this.relPort),t}getFoundation(){return this.foundation}getComponentId(){return this.componentId}getTransport(){return this.transport}getPriority(){return this.priority}getAddress(){return this.address}getPort(){return this.port}getType(){return this.type}getRelAddr(){return this.relAddr}getRelPort(){return this.relPort}}return i.expand=function(e){return e.constructor.name==="CandidateInfo"?e:(e=e,new i(e.foundation,e.componentId,e.transport,e.priority,e.address,e.port,e.type,e.relAddr,e.relPort))},i.clone=function(e){return e.constructor.name==="CandidateInfo"?e.clone():i.expand(e)},gn=i,gn}var hn,rr;function Nt(){if(rr)return hn;rr=1;class i{constructor(t,n){this.id=t,this.params=n||[]}clone(){return new i(this.id,this.params)}plain(){return this.params.length?{id:this.id,params:this.params}:{id:this.id}}getId(){return this.id}getParams(){return this.params}}return i.expand=function(e){return e.constructor.name==="RTCPFeedbackInfo"?e:(e=e,new i(e.id,e.params))},i.clone=function(e){return e.constructor.name==="RTCPFeedbackInfo"?e.clone():i.expand(e)},hn=i,hn}var fn,sr;function Wt(){if(sr)return fn;sr=1;const i=Nt();class e{constructor(n,r,o){this.codec=n,this.type=r,this.params={},this.rtcpfbs=new Set,o&&this.addParams(o)}clone(){const n=new e(this.codec,this.type,this.params);this.hasRTX()&&n.setRTX(this.getRTX());for(const r of this.rtcpfbs)n.addRTCPFeedback(r.clone());return this.hasChannels()&&n.setChannels(this.getChannels()),n}plain(){const n={codec:this.codec,type:this.type};this.rtx&&(n.rtx=this.rtx),this.channels&&(n.channels=this.channels),Object.keys(this.params).length&&(n.params=this.params);for(const r of this.rtcpfbs)n.rtcpfbs||(n.rtcpfbs=[]),n.rtcpfbs.push(r.plain());return n}setRTX(n){this.rtx=n}getType(){return this.type}setType(n){this.type=n}getCodec(){return this.codec}getParams(){return this.params}addParams(n){for(const r in n)this.params[r]=n[r]}addParam(n,r){this.params[n]=r}hasParam(n){return Object.hasOwnProperty.call(this.params,n)}getParam(n,r=void 0){if(this.hasParam(n))return this.params[n];if(r===void 0)throw new Error(`param ${n} not found and no default value provided`);return""+r}hasRTX(){return this.rtx}getRTX(){return this.rtx}hasChannels(){return this.channels}getChannels(){return this.channels}setChannels(n){this.channels=n}addRTCPFeedback(n){this.rtcpfbs.add(n)}getRTCPFeedbacks(){return this.rtcpfbs}}return e.expand=function(t){if(t.constructor.name==="CodecInfo")return t;t=t;const n=new e(t.codec,t.type,t.params);t.rtx&&n.setRTX(t.rtx),t.channels&&n.setChannels(t.channels);for(const r of t.rtcpfbs||[]){const o=i.expand(r);n.addRTCPFeedback(o)}return n},e.clone=function(t){return t.constructor.name==="CodecInfo"?t.clone():e.expand(t)},e.MapFromNames=function(t,n,r){var o;const c=new Map;let a=96;for(const g of t){let d;const u=g.split(";"),I=u.shift().toLowerCase().trim();I==="pcmu"?d=0:I==="pcma"?d=8:d=++a;const F=new e(I,d);I==="opus"?F.setChannels(2):I==="multiopus"&&F.setChannels(6),n&&I!=="ulpfec"&&I!=="flexfec-03"&&I!=="red"&&F.setRTX(++a);for(const m of r||[])F.addRTCPFeedback(new i(m.id,m.params));for(const m of u){let f=m.split("=");F.addParam(f[0].trim(),(o=f[1])===null||o===void 0?void 0:o.trim())}c.set(d,F)}return c},fn=e,fn}var mn,or;function Fn(){if(or)return mn;or=1;function i(){var e=this;if(!(this instanceof i))return new(Function.prototype.bind.apply(i,[null].concat(Array.prototype.slice.call(arguments))));Array.from(arguments).forEach(function(t){e[t]=Symbol.for("MEDOOZE_SEMANTIC_SDP_"+t)})}return mn=i,mn}var pn,ar;function Un(){if(ar)return pn;ar=1;const e=Fn()("ACTIVE","PASSIVE","ACTPASS","INACTIVE");return e.byValue=function(t){switch(t){case e.ACTIVE:case e.PASSIVE:case e.ACTPASS:case e.INACTIVE:return t}return e[t.toUpperCase()]},e.toString=function(t){switch(t){case e.ACTIVE:return"active";case e.PASSIVE:return"passive";case e.ACTPASS:return"actpass";case e.INACTIVE:return"inactive"}},e.reverse=function(t,n){switch(t){case e.ACTIVE:return e.PASSIVE;case e.PASSIVE:return e.ACTIVE;case e.ACTPASS:return n?e.ACTIVE:e.PASSIVE;case e.INACTIVE:return e.INACTIVE}},pn=e,pn}var In,cr;function lr(){if(cr)return In;cr=1;const i=Un();class e{constructor(n,r,o){this.setup=n,this.hash=r,this.fingerprint=o}clone(){return new e(this.setup,this.hash,this.fingerprint)}plain(){return{setup:i.toString(this.setup),hash:this.hash,fingerprint:this.fingerprint}}getFingerprint(){return this.fingerprint}getHash(){return this.hash}getSetup(){return this.setup}setSetup(n){this.setup=n}}return e.expand=function(t){return t.constructor.name==="DTLSInfo"?t:(t=t,new e(t.setup?i.byValue(t.setup):i.ACTPASS,t.hash,t.fingerprint))},e.clone=function(t){return t.constructor.name==="DTLSInfo"?t.clone():e.expand(t)},In=e,In}var Bn,dr;function ur(){if(dr)return Bn;dr=1;class i{constructor(t,n,r,o){this.tag=t,this.suite=n,this.keyParams=r,this.sessionParams=o}clone(){return new i(this.tag,this.suite,this.keyParams,this.sessionParams)}plain(){return{tag:this.tag,suite:this.suite,keyParams:this.keyParams,sessionParams:this.sessionParams}}getSessionParams(){return this.sessionParams}getKeyParams(){return this.keyParams}getSuite(){return this.suite}getTag(){return this.tag}}return i.expand=function(e){return e.constructor.name==="CryptoInfo"?e:(e=e,new i(e.tag,e.suite,e.keyParams,e.sessionParams))},i.clone=function(e){return e.constructor.name==="CryptoInfo"?e.clone():i.expand(e)},Bn=i,Bn}var kt={exports:{}},Tt={exports:{}},bn={},pt={},gr;function js(){if(gr)return pt;gr=1,pt.byteLength=a,pt.toByteArray=d,pt.fromByteArray=F;for(var i=[],e=[],t=typeof Uint8Array<"u"?Uint8Array:Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=0,o=n.length;r<o;++r)i[r]=n[r],e[n.charCodeAt(r)]=r;e[45]=62,e[95]=63;function c(m){var f=m.length;if(f%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var y=m.indexOf("=");y===-1&&(y=f);var x=y===f?0:4-y%4;return[y,x]}function a(m){var f=c(m),y=f[0],x=f[1];return(y+x)*3/4-x}function g(m,f,y){return(f+y)*3/4-y}function d(m){var f,y=c(m),x=y[0],v=y[1],L=new t(g(m,x,v)),A=0,U=v>0?x-4:x,b;for(b=0;b<U;b+=4)f=e[m.charCodeAt(b)]<<18|e[m.charCodeAt(b+1)]<<12|e[m.charCodeAt(b+2)]<<6|e[m.charCodeAt(b+3)],L[A++]=f>>16&255,L[A++]=f>>8&255,L[A++]=f&255;return v===2&&(f=e[m.charCodeAt(b)]<<2|e[m.charCodeAt(b+1)]>>4,L[A++]=f&255),v===1&&(f=e[m.charCodeAt(b)]<<10|e[m.charCodeAt(b+1)]<<4|e[m.charCodeAt(b+2)]>>2,L[A++]=f>>8&255,L[A++]=f&255),L}function u(m){return i[m>>18&63]+i[m>>12&63]+i[m>>6&63]+i[m&63]}function I(m,f,y){for(var x,v=[],L=f;L<y;L+=3)x=(m[L]<<16&16711680)+(m[L+1]<<8&65280)+(m[L+2]&255),v.push(u(x));return v.join("")}function F(m){for(var f,y=m.length,x=y%3,v=[],L=16383,A=0,U=y-x;A<U;A+=L)v.push(I(m,A,A+L>U?U:A+L));return x===1?(f=m[y-1],v.push(i[f>>2]+i[f<<4&63]+"==")):x===2&&(f=(m[y-2]<<8)+m[y-1],v.push(i[f>>10]+i[f>>4&63]+i[f<<2&63]+"=")),v.join("")}return pt}var Dt={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */var hr;function Os(){return hr||(hr=1,Dt.read=function(i,e,t,n,r){var o,c,a=r*8-n-1,g=(1<<a)-1,d=g>>1,u=-7,I=t?r-1:0,F=t?-1:1,m=i[e+I];for(I+=F,o=m&(1<<-u)-1,m>>=-u,u+=a;u>0;o=o*256+i[e+I],I+=F,u-=8);for(c=o&(1<<-u)-1,o>>=-u,u+=n;u>0;c=c*256+i[e+I],I+=F,u-=8);if(o===0)o=1-d;else{if(o===g)return c?NaN:(m?-1:1)*(1/0);c=c+Math.pow(2,n),o=o-d}return(m?-1:1)*c*Math.pow(2,o-n)},Dt.write=function(i,e,t,n,r,o){var c,a,g,d=o*8-r-1,u=(1<<d)-1,I=u>>1,F=r===23?Math.pow(2,-24)-Math.pow(2,-77):0,m=n?0:o-1,f=n?1:-1,y=e<0||e===0&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,c=u):(c=Math.floor(Math.log(e)/Math.LN2),e*(g=Math.pow(2,-c))<1&&(c--,g*=2),c+I>=1?e+=F/g:e+=F*Math.pow(2,1-I),e*g>=2&&(c++,g/=2),c+I>=u?(a=0,c=u):c+I>=1?(a=(e*g-1)*Math.pow(2,r),c=c+I):(a=e*Math.pow(2,I-1)*Math.pow(2,r),c=0));r>=8;i[t+m]=a&255,m+=f,a/=256,r-=8);for(c=c<<r|a,d+=r;d>0;i[t+m]=c&255,m+=f,c/=256,d-=8);i[t+m-f]|=y*128}),Dt}/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */var fr;function Ks(){return fr||(fr=1,function(i){const e=js(),t=Os(),n=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;i.Buffer=a,i.SlowBuffer=L,i.INSPECT_MAX_BYTES=50;const r=2147483647;i.kMaxLength=r,a.TYPED_ARRAY_SUPPORT=o(),!a.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function o(){try{const h=new Uint8Array(1),s={foo:function(){return 42}};return Object.setPrototypeOf(s,Uint8Array.prototype),Object.setPrototypeOf(h,s),h.foo()===42}catch{return!1}}Object.defineProperty(a.prototype,"parent",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.buffer}}),Object.defineProperty(a.prototype,"offset",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.byteOffset}});function c(h){if(h>r)throw new RangeError('The value "'+h+'" is invalid for option "size"');const s=new Uint8Array(h);return Object.setPrototypeOf(s,a.prototype),s}function a(h,s,l){if(typeof h=="number"){if(typeof s=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return I(h)}return g(h,s,l)}a.poolSize=8192;function g(h,s,l){if(typeof h=="string")return F(h,s);if(ArrayBuffer.isView(h))return f(h);if(h==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof h);if(Ze(h,ArrayBuffer)||h&&Ze(h.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(Ze(h,SharedArrayBuffer)||h&&Ze(h.buffer,SharedArrayBuffer)))return y(h,s,l);if(typeof h=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');const p=h.valueOf&&h.valueOf();if(p!=null&&p!==h)return a.from(p,s,l);const C=x(h);if(C)return C;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof h[Symbol.toPrimitive]=="function")return a.from(h[Symbol.toPrimitive]("string"),s,l);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof h)}a.from=function(h,s,l){return g(h,s,l)},Object.setPrototypeOf(a.prototype,Uint8Array.prototype),Object.setPrototypeOf(a,Uint8Array);function d(h){if(typeof h!="number")throw new TypeError('"size" argument must be of type number');if(h<0)throw new RangeError('The value "'+h+'" is invalid for option "size"')}function u(h,s,l){return d(h),h<=0?c(h):s!==void 0?typeof l=="string"?c(h).fill(s,l):c(h).fill(s):c(h)}a.alloc=function(h,s,l){return u(h,s,l)};function I(h){return d(h),c(h<0?0:v(h)|0)}a.allocUnsafe=function(h){return I(h)},a.allocUnsafeSlow=function(h){return I(h)};function F(h,s){if((typeof s!="string"||s==="")&&(s="utf8"),!a.isEncoding(s))throw new TypeError("Unknown encoding: "+s);const l=A(h,s)|0;let p=c(l);const C=p.write(h,s);return C!==l&&(p=p.slice(0,C)),p}function m(h){const s=h.length<0?0:v(h.length)|0,l=c(s);for(let p=0;p<s;p+=1)l[p]=h[p]&255;return l}function f(h){if(Ze(h,Uint8Array)){const s=new Uint8Array(h);return y(s.buffer,s.byteOffset,s.byteLength)}return m(h)}function y(h,s,l){if(s<0||h.byteLength<s)throw new RangeError('"offset" is outside of buffer bounds');if(h.byteLength<s+(l||0))throw new RangeError('"length" is outside of buffer bounds');let p;return s===void 0&&l===void 0?p=new Uint8Array(h):l===void 0?p=new Uint8Array(h,s):p=new Uint8Array(h,s,l),Object.setPrototypeOf(p,a.prototype),p}function x(h){if(a.isBuffer(h)){const s=v(h.length)|0,l=c(s);return l.length===0||h.copy(l,0,0,s),l}if(h.length!==void 0)return typeof h.length!="number"||Qe(h.length)?c(0):m(h);if(h.type==="Buffer"&&Array.isArray(h.data))return m(h.data)}function v(h){if(h>=r)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r.toString(16)+" bytes");return h|0}function L(h){return+h!=h&&(h=0),a.alloc(+h)}a.isBuffer=function(s){return s!=null&&s._isBuffer===!0&&s!==a.prototype},a.compare=function(s,l){if(Ze(s,Uint8Array)&&(s=a.from(s,s.offset,s.byteLength)),Ze(l,Uint8Array)&&(l=a.from(l,l.offset,l.byteLength)),!a.isBuffer(s)||!a.isBuffer(l))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(s===l)return 0;let p=s.length,C=l.length;for(let S=0,Z=Math.min(p,C);S<Z;++S)if(s[S]!==l[S]){p=s[S],C=l[S];break}return p<C?-1:C<p?1:0},a.isEncoding=function(s){switch(String(s).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(s,l){if(!Array.isArray(s))throw new TypeError('"list" argument must be an Array of Buffers');if(s.length===0)return a.alloc(0);let p;if(l===void 0)for(l=0,p=0;p<s.length;++p)l+=s[p].length;const C=a.allocUnsafe(l);let S=0;for(p=0;p<s.length;++p){let Z=s[p];if(Ze(Z,Uint8Array))S+Z.length>C.length?(a.isBuffer(Z)||(Z=a.from(Z)),Z.copy(C,S)):Uint8Array.prototype.set.call(C,Z,S);else if(a.isBuffer(Z))Z.copy(C,S);else throw new TypeError('"list" argument must be an Array of Buffers');S+=Z.length}return C};function A(h,s){if(a.isBuffer(h))return h.length;if(ArrayBuffer.isView(h)||Ze(h,ArrayBuffer))return h.byteLength;if(typeof h!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof h);const l=h.length,p=arguments.length>2&&arguments[2]===!0;if(!p&&l===0)return 0;let C=!1;for(;;)switch(s){case"ascii":case"latin1":case"binary":return l;case"utf8":case"utf-8":return nt(h).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return l*2;case"hex":return l>>>1;case"base64":return sn(h).length;default:if(C)return p?-1:nt(h).length;s=(""+s).toLowerCase(),C=!0}}a.byteLength=A;function U(h,s,l){let p=!1;if((s===void 0||s<0)&&(s=0),s>this.length||((l===void 0||l>this.length)&&(l=this.length),l<=0)||(l>>>=0,s>>>=0,l<=s))return"";for(h||(h="utf8");;)switch(h){case"hex":return j(this,s,l);case"utf8":case"utf-8":return ee(this,s,l);case"ascii":return X(this,s,l);case"latin1":case"binary":return T(this,s,l);case"base64":return Y(this,s,l);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,s,l);default:if(p)throw new TypeError("Unknown encoding: "+h);h=(h+"").toLowerCase(),p=!0}}a.prototype._isBuffer=!0;function b(h,s,l){const p=h[s];h[s]=h[l],h[l]=p}a.prototype.swap16=function(){const s=this.length;if(s%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let l=0;l<s;l+=2)b(this,l,l+1);return this},a.prototype.swap32=function(){const s=this.length;if(s%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let l=0;l<s;l+=4)b(this,l,l+3),b(this,l+1,l+2);return this},a.prototype.swap64=function(){const s=this.length;if(s%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let l=0;l<s;l+=8)b(this,l,l+7),b(this,l+1,l+6),b(this,l+2,l+5),b(this,l+3,l+4);return this},a.prototype.toString=function(){const s=this.length;return s===0?"":arguments.length===0?ee(this,0,s):U.apply(this,arguments)},a.prototype.toLocaleString=a.prototype.toString,a.prototype.equals=function(s){if(!a.isBuffer(s))throw new TypeError("Argument must be a Buffer");return this===s?!0:a.compare(this,s)===0},a.prototype.inspect=function(){let s="";const l=i.INSPECT_MAX_BYTES;return s=this.toString("hex",0,l).replace(/(.{2})/g,"$1 ").trim(),this.length>l&&(s+=" ... "),"<Buffer "+s+">"},n&&(a.prototype[n]=a.prototype.inspect),a.prototype.compare=function(s,l,p,C,S){if(Ze(s,Uint8Array)&&(s=a.from(s,s.offset,s.byteLength)),!a.isBuffer(s))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof s);if(l===void 0&&(l=0),p===void 0&&(p=s?s.length:0),C===void 0&&(C=0),S===void 0&&(S=this.length),l<0||p>s.length||C<0||S>this.length)throw new RangeError("out of range index");if(C>=S&&l>=p)return 0;if(C>=S)return-1;if(l>=p)return 1;if(l>>>=0,p>>>=0,C>>>=0,S>>>=0,this===s)return 0;let Z=S-C,_=p-l;const le=Math.min(Z,_),se=this.slice(C,S),me=s.slice(l,p);for(let oe=0;oe<le;++oe)if(se[oe]!==me[oe]){Z=se[oe],_=me[oe];break}return Z<_?-1:_<Z?1:0};function Q(h,s,l,p,C){if(h.length===0)return-1;if(typeof l=="string"?(p=l,l=0):l>2147483647?l=2147483647:l<-2147483648&&(l=-2147483648),l=+l,Qe(l)&&(l=C?0:h.length-1),l<0&&(l=h.length+l),l>=h.length){if(C)return-1;l=h.length-1}else if(l<0)if(C)l=0;else return-1;if(typeof s=="string"&&(s=a.from(s,p)),a.isBuffer(s))return s.length===0?-1:B(h,s,l,p,C);if(typeof s=="number")return s=s&255,typeof Uint8Array.prototype.indexOf=="function"?C?Uint8Array.prototype.indexOf.call(h,s,l):Uint8Array.prototype.lastIndexOf.call(h,s,l):B(h,[s],l,p,C);throw new TypeError("val must be string, number or Buffer")}function B(h,s,l,p,C){let S=1,Z=h.length,_=s.length;if(p!==void 0&&(p=String(p).toLowerCase(),p==="ucs2"||p==="ucs-2"||p==="utf16le"||p==="utf-16le")){if(h.length<2||s.length<2)return-1;S=2,Z/=2,_/=2,l/=2}function le(me,oe){return S===1?me[oe]:me.readUInt16BE(oe*S)}let se;if(C){let me=-1;for(se=l;se<Z;se++)if(le(h,se)===le(s,me===-1?0:se-me)){if(me===-1&&(me=se),se-me+1===_)return me*S}else me!==-1&&(se-=se-me),me=-1}else for(l+_>Z&&(l=Z-_),se=l;se>=0;se--){let me=!0;for(let oe=0;oe<_;oe++)if(le(h,se+oe)!==le(s,oe)){me=!1;break}if(me)return se}return-1}a.prototype.includes=function(s,l,p){return this.indexOf(s,l,p)!==-1},a.prototype.indexOf=function(s,l,p){return Q(this,s,l,p,!0)},a.prototype.lastIndexOf=function(s,l,p){return Q(this,s,l,p,!1)};function R(h,s,l,p){l=Number(l)||0;const C=h.length-l;p?(p=Number(p),p>C&&(p=C)):p=C;const S=s.length;p>S/2&&(p=S/2);let Z;for(Z=0;Z<p;++Z){const _=parseInt(s.substr(Z*2,2),16);if(Qe(_))return Z;h[l+Z]=_}return Z}function w(h,s,l,p){return rt(nt(s,h.length-l),h,l,p)}function E(h,s,l,p){return rt(it(s),h,l,p)}function N(h,s,l,p){return rt(sn(s),h,l,p)}function K(h,s,l,p){return rt(ut(s,h.length-l),h,l,p)}a.prototype.write=function(s,l,p,C){if(l===void 0)C="utf8",p=this.length,l=0;else if(p===void 0&&typeof l=="string")C=l,p=this.length,l=0;else if(isFinite(l))l=l>>>0,isFinite(p)?(p=p>>>0,C===void 0&&(C="utf8")):(C=p,p=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");const S=this.length-l;if((p===void 0||p>S)&&(p=S),s.length>0&&(p<0||l<0)||l>this.length)throw new RangeError("Attempt to write outside buffer bounds");C||(C="utf8");let Z=!1;for(;;)switch(C){case"hex":return R(this,s,l,p);case"utf8":case"utf-8":return w(this,s,l,p);case"ascii":case"latin1":case"binary":return E(this,s,l,p);case"base64":return N(this,s,l,p);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return K(this,s,l,p);default:if(Z)throw new TypeError("Unknown encoding: "+C);C=(""+C).toLowerCase(),Z=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function Y(h,s,l){return s===0&&l===h.length?e.fromByteArray(h):e.fromByteArray(h.slice(s,l))}function ee(h,s,l){l=Math.min(h.length,l);const p=[];let C=s;for(;C<l;){const S=h[C];let Z=null,_=S>239?4:S>223?3:S>191?2:1;if(C+_<=l){let le,se,me,oe;switch(_){case 1:S<128&&(Z=S);break;case 2:le=h[C+1],(le&192)===128&&(oe=(S&31)<<6|le&63,oe>127&&(Z=oe));break;case 3:le=h[C+1],se=h[C+2],(le&192)===128&&(se&192)===128&&(oe=(S&15)<<12|(le&63)<<6|se&63,oe>2047&&(oe<55296||oe>57343)&&(Z=oe));break;case 4:le=h[C+1],se=h[C+2],me=h[C+3],(le&192)===128&&(se&192)===128&&(me&192)===128&&(oe=(S&15)<<18|(le&63)<<12|(se&63)<<6|me&63,oe>65535&&oe<1114112&&(Z=oe))}}Z===null?(Z=65533,_=1):Z>65535&&(Z-=65536,p.push(Z>>>10&1023|55296),Z=56320|Z&1023),p.push(Z),C+=_}return D(p)}const J=4096;function D(h){const s=h.length;if(s<=J)return String.fromCharCode.apply(String,h);let l="",p=0;for(;p<s;)l+=String.fromCharCode.apply(String,h.slice(p,p+=J));return l}function X(h,s,l){let p="";l=Math.min(h.length,l);for(let C=s;C<l;++C)p+=String.fromCharCode(h[C]&127);return p}function T(h,s,l){let p="";l=Math.min(h.length,l);for(let C=s;C<l;++C)p+=String.fromCharCode(h[C]);return p}function j(h,s,l){const p=h.length;(!s||s<0)&&(s=0),(!l||l<0||l>p)&&(l=p);let C="";for(let S=s;S<l;++S)C+=Ke[h[S]];return C}function O(h,s,l){const p=h.slice(s,l);let C="";for(let S=0;S<p.length-1;S+=2)C+=String.fromCharCode(p[S]+p[S+1]*256);return C}a.prototype.slice=function(s,l){const p=this.length;s=~~s,l=l===void 0?p:~~l,s<0?(s+=p,s<0&&(s=0)):s>p&&(s=p),l<0?(l+=p,l<0&&(l=0)):l>p&&(l=p),l<s&&(l=s);const C=this.subarray(s,l);return Object.setPrototypeOf(C,a.prototype),C};function k(h,s,l){if(h%1!==0||h<0)throw new RangeError("offset is not uint");if(h+s>l)throw new RangeError("Trying to access beyond buffer length")}a.prototype.readUintLE=a.prototype.readUIntLE=function(s,l,p){s=s>>>0,l=l>>>0,p||k(s,l,this.length);let C=this[s],S=1,Z=0;for(;++Z<l&&(S*=256);)C+=this[s+Z]*S;return C},a.prototype.readUintBE=a.prototype.readUIntBE=function(s,l,p){s=s>>>0,l=l>>>0,p||k(s,l,this.length);let C=this[s+--l],S=1;for(;l>0&&(S*=256);)C+=this[s+--l]*S;return C},a.prototype.readUint8=a.prototype.readUInt8=function(s,l){return s=s>>>0,l||k(s,1,this.length),this[s]},a.prototype.readUint16LE=a.prototype.readUInt16LE=function(s,l){return s=s>>>0,l||k(s,2,this.length),this[s]|this[s+1]<<8},a.prototype.readUint16BE=a.prototype.readUInt16BE=function(s,l){return s=s>>>0,l||k(s,2,this.length),this[s]<<8|this[s+1]},a.prototype.readUint32LE=a.prototype.readUInt32LE=function(s,l){return s=s>>>0,l||k(s,4,this.length),(this[s]|this[s+1]<<8|this[s+2]<<16)+this[s+3]*16777216},a.prototype.readUint32BE=a.prototype.readUInt32BE=function(s,l){return s=s>>>0,l||k(s,4,this.length),this[s]*16777216+(this[s+1]<<16|this[s+2]<<8|this[s+3])},a.prototype.readBigUInt64LE=Ge(function(s){s=s>>>0,Ae(s,"offset");const l=this[s],p=this[s+7];(l===void 0||p===void 0)&&je(s,this.length-8);const C=l+this[++s]*2**8+this[++s]*2**16+this[++s]*2**24,S=this[++s]+this[++s]*2**8+this[++s]*2**16+p*2**24;return BigInt(C)+(BigInt(S)<<BigInt(32))}),a.prototype.readBigUInt64BE=Ge(function(s){s=s>>>0,Ae(s,"offset");const l=this[s],p=this[s+7];(l===void 0||p===void 0)&&je(s,this.length-8);const C=l*2**24+this[++s]*2**16+this[++s]*2**8+this[++s],S=this[++s]*2**24+this[++s]*2**16+this[++s]*2**8+p;return(BigInt(C)<<BigInt(32))+BigInt(S)}),a.prototype.readIntLE=function(s,l,p){s=s>>>0,l=l>>>0,p||k(s,l,this.length);let C=this[s],S=1,Z=0;for(;++Z<l&&(S*=256);)C+=this[s+Z]*S;return S*=128,C>=S&&(C-=Math.pow(2,8*l)),C},a.prototype.readIntBE=function(s,l,p){s=s>>>0,l=l>>>0,p||k(s,l,this.length);let C=l,S=1,Z=this[s+--C];for(;C>0&&(S*=256);)Z+=this[s+--C]*S;return S*=128,Z>=S&&(Z-=Math.pow(2,8*l)),Z},a.prototype.readInt8=function(s,l){return s=s>>>0,l||k(s,1,this.length),this[s]&128?(255-this[s]+1)*-1:this[s]},a.prototype.readInt16LE=function(s,l){s=s>>>0,l||k(s,2,this.length);const p=this[s]|this[s+1]<<8;return p&32768?p|4294901760:p},a.prototype.readInt16BE=function(s,l){s=s>>>0,l||k(s,2,this.length);const p=this[s+1]|this[s]<<8;return p&32768?p|4294901760:p},a.prototype.readInt32LE=function(s,l){return s=s>>>0,l||k(s,4,this.length),this[s]|this[s+1]<<8|this[s+2]<<16|this[s+3]<<24},a.prototype.readInt32BE=function(s,l){return s=s>>>0,l||k(s,4,this.length),this[s]<<24|this[s+1]<<16|this[s+2]<<8|this[s+3]},a.prototype.readBigInt64LE=Ge(function(s){s=s>>>0,Ae(s,"offset");const l=this[s],p=this[s+7];(l===void 0||p===void 0)&&je(s,this.length-8);const C=this[s+4]+this[s+5]*2**8+this[s+6]*2**16+(p<<24);return(BigInt(C)<<BigInt(32))+BigInt(l+this[++s]*2**8+this[++s]*2**16+this[++s]*2**24)}),a.prototype.readBigInt64BE=Ge(function(s){s=s>>>0,Ae(s,"offset");const l=this[s],p=this[s+7];(l===void 0||p===void 0)&&je(s,this.length-8);const C=(l<<24)+this[++s]*2**16+this[++s]*2**8+this[++s];return(BigInt(C)<<BigInt(32))+BigInt(this[++s]*2**24+this[++s]*2**16+this[++s]*2**8+p)}),a.prototype.readFloatLE=function(s,l){return s=s>>>0,l||k(s,4,this.length),t.read(this,s,!0,23,4)},a.prototype.readFloatBE=function(s,l){return s=s>>>0,l||k(s,4,this.length),t.read(this,s,!1,23,4)},a.prototype.readDoubleLE=function(s,l){return s=s>>>0,l||k(s,8,this.length),t.read(this,s,!0,52,8)},a.prototype.readDoubleBE=function(s,l){return s=s>>>0,l||k(s,8,this.length),t.read(this,s,!1,52,8)};function W(h,s,l,p,C,S){if(!a.isBuffer(h))throw new TypeError('"buffer" argument must be a Buffer instance');if(s>C||s<S)throw new RangeError('"value" argument is out of bounds');if(l+p>h.length)throw new RangeError("Index out of range")}a.prototype.writeUintLE=a.prototype.writeUIntLE=function(s,l,p,C){if(s=+s,l=l>>>0,p=p>>>0,!C){const _=Math.pow(2,8*p)-1;W(this,s,l,p,_,0)}let S=1,Z=0;for(this[l]=s&255;++Z<p&&(S*=256);)this[l+Z]=s/S&255;return l+p},a.prototype.writeUintBE=a.prototype.writeUIntBE=function(s,l,p,C){if(s=+s,l=l>>>0,p=p>>>0,!C){const _=Math.pow(2,8*p)-1;W(this,s,l,p,_,0)}let S=p-1,Z=1;for(this[l+S]=s&255;--S>=0&&(Z*=256);)this[l+S]=s/Z&255;return l+p},a.prototype.writeUint8=a.prototype.writeUInt8=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,1,255,0),this[l]=s&255,l+1},a.prototype.writeUint16LE=a.prototype.writeUInt16LE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,2,65535,0),this[l]=s&255,this[l+1]=s>>>8,l+2},a.prototype.writeUint16BE=a.prototype.writeUInt16BE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,2,65535,0),this[l]=s>>>8,this[l+1]=s&255,l+2},a.prototype.writeUint32LE=a.prototype.writeUInt32LE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,4,4294967295,0),this[l+3]=s>>>24,this[l+2]=s>>>16,this[l+1]=s>>>8,this[l]=s&255,l+4},a.prototype.writeUint32BE=a.prototype.writeUInt32BE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,4,4294967295,0),this[l]=s>>>24,this[l+1]=s>>>16,this[l+2]=s>>>8,this[l+3]=s&255,l+4};function H(h,s,l,p,C){dt(s,p,C,h,l,7);let S=Number(s&BigInt(4294967295));h[l++]=S,S=S>>8,h[l++]=S,S=S>>8,h[l++]=S,S=S>>8,h[l++]=S;let Z=Number(s>>BigInt(32)&BigInt(4294967295));return h[l++]=Z,Z=Z>>8,h[l++]=Z,Z=Z>>8,h[l++]=Z,Z=Z>>8,h[l++]=Z,l}function M(h,s,l,p,C){dt(s,p,C,h,l,7);let S=Number(s&BigInt(4294967295));h[l+7]=S,S=S>>8,h[l+6]=S,S=S>>8,h[l+5]=S,S=S>>8,h[l+4]=S;let Z=Number(s>>BigInt(32)&BigInt(4294967295));return h[l+3]=Z,Z=Z>>8,h[l+2]=Z,Z=Z>>8,h[l+1]=Z,Z=Z>>8,h[l]=Z,l+8}a.prototype.writeBigUInt64LE=Ge(function(s,l=0){return H(this,s,l,BigInt(0),BigInt("0xffffffffffffffff"))}),a.prototype.writeBigUInt64BE=Ge(function(s,l=0){return M(this,s,l,BigInt(0),BigInt("0xffffffffffffffff"))}),a.prototype.writeIntLE=function(s,l,p,C){if(s=+s,l=l>>>0,!C){const le=Math.pow(2,8*p-1);W(this,s,l,p,le-1,-le)}let S=0,Z=1,_=0;for(this[l]=s&255;++S<p&&(Z*=256);)s<0&&_===0&&this[l+S-1]!==0&&(_=1),this[l+S]=(s/Z>>0)-_&255;return l+p},a.prototype.writeIntBE=function(s,l,p,C){if(s=+s,l=l>>>0,!C){const le=Math.pow(2,8*p-1);W(this,s,l,p,le-1,-le)}let S=p-1,Z=1,_=0;for(this[l+S]=s&255;--S>=0&&(Z*=256);)s<0&&_===0&&this[l+S+1]!==0&&(_=1),this[l+S]=(s/Z>>0)-_&255;return l+p},a.prototype.writeInt8=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,1,127,-128),s<0&&(s=255+s+1),this[l]=s&255,l+1},a.prototype.writeInt16LE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,2,32767,-32768),this[l]=s&255,this[l+1]=s>>>8,l+2},a.prototype.writeInt16BE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,2,32767,-32768),this[l]=s>>>8,this[l+1]=s&255,l+2},a.prototype.writeInt32LE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,4,2147483647,-2147483648),this[l]=s&255,this[l+1]=s>>>8,this[l+2]=s>>>16,this[l+3]=s>>>24,l+4},a.prototype.writeInt32BE=function(s,l,p){return s=+s,l=l>>>0,p||W(this,s,l,4,2147483647,-2147483648),s<0&&(s=4294967295+s+1),this[l]=s>>>24,this[l+1]=s>>>16,this[l+2]=s>>>8,this[l+3]=s&255,l+4},a.prototype.writeBigInt64LE=Ge(function(s,l=0){return H(this,s,l,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),a.prototype.writeBigInt64BE=Ge(function(s,l=0){return M(this,s,l,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function P(h,s,l,p,C,S){if(l+p>h.length)throw new RangeError("Index out of range");if(l<0)throw new RangeError("Index out of range")}function z(h,s,l,p,C){return s=+s,l=l>>>0,C||P(h,s,l,4),t.write(h,s,l,p,23,4),l+4}a.prototype.writeFloatLE=function(s,l,p){return z(this,s,l,!0,p)},a.prototype.writeFloatBE=function(s,l,p){return z(this,s,l,!1,p)};function ie(h,s,l,p,C){return s=+s,l=l>>>0,C||P(h,s,l,8),t.write(h,s,l,p,52,8),l+8}a.prototype.writeDoubleLE=function(s,l,p){return ie(this,s,l,!0,p)},a.prototype.writeDoubleBE=function(s,l,p){return ie(this,s,l,!1,p)},a.prototype.copy=function(s,l,p,C){if(!a.isBuffer(s))throw new TypeError("argument should be a Buffer");if(p||(p=0),!C&&C!==0&&(C=this.length),l>=s.length&&(l=s.length),l||(l=0),C>0&&C<p&&(C=p),C===p||s.length===0||this.length===0)return 0;if(l<0)throw new RangeError("targetStart out of bounds");if(p<0||p>=this.length)throw new RangeError("Index out of range");if(C<0)throw new RangeError("sourceEnd out of bounds");C>this.length&&(C=this.length),s.length-l<C-p&&(C=s.length-l+p);const S=C-p;return this===s&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(l,p,C):Uint8Array.prototype.set.call(s,this.subarray(p,C),l),S},a.prototype.fill=function(s,l,p,C){if(typeof s=="string"){if(typeof l=="string"?(C=l,l=0,p=this.length):typeof p=="string"&&(C=p,p=this.length),C!==void 0&&typeof C!="string")throw new TypeError("encoding must be a string");if(typeof C=="string"&&!a.isEncoding(C))throw new TypeError("Unknown encoding: "+C);if(s.length===1){const Z=s.charCodeAt(0);(C==="utf8"&&Z<128||C==="latin1")&&(s=Z)}}else typeof s=="number"?s=s&255:typeof s=="boolean"&&(s=Number(s));if(l<0||this.length<l||this.length<p)throw new RangeError("Out of range index");if(p<=l)return this;l=l>>>0,p=p===void 0?this.length:p>>>0,s||(s=0);let S;if(typeof s=="number")for(S=l;S<p;++S)this[S]=s;else{const Z=a.isBuffer(s)?s:a.from(s,C),_=Z.length;if(_===0)throw new TypeError('The value "'+s+'" is invalid for argument "value"');for(S=0;S<p-l;++S)this[S+l]=Z[S%_]}return this};const ge={};function ye(h,s,l){ge[h]=class extends l{constructor(){super(),Object.defineProperty(this,"message",{value:s.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${h}]`,this.stack,delete this.name}get code(){return h}set code(C){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:C,writable:!0})}toString(){return`${this.name} [${h}]: ${this.message}`}}}ye("ERR_BUFFER_OUT_OF_BOUNDS",function(h){return h?`${h} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),ye("ERR_INVALID_ARG_TYPE",function(h,s){return`The "${h}" argument must be of type number. Received type ${typeof s}`},TypeError),ye("ERR_OUT_OF_RANGE",function(h,s,l){let p=`The value of "${h}" is out of range.`,C=l;return Number.isInteger(l)&&Math.abs(l)>2**32?C=Ve(String(l)):typeof l=="bigint"&&(C=String(l),(l>BigInt(2)**BigInt(32)||l<-(BigInt(2)**BigInt(32)))&&(C=Ve(C)),C+="n"),p+=` It must be ${s}. Received ${C}`,p},RangeError);function Ve(h){let s="",l=h.length;const p=h[0]==="-"?1:0;for(;l>=p+4;l-=3)s=`_${h.slice(l-3,l)}${s}`;return`${h.slice(0,l)}${s}`}function Se(h,s,l){Ae(s,"offset"),(h[s]===void 0||h[s+l]===void 0)&&je(s,h.length-(l+1))}function dt(h,s,l,p,C,S){if(h>l||h<s){const Z=typeof s=="bigint"?"n":"";let _;throw s===0||s===BigInt(0)?_=`>= 0${Z} and < 2${Z} ** ${(S+1)*8}${Z}`:_=`>= -(2${Z} ** ${(S+1)*8-1}${Z}) and < 2 ** ${(S+1)*8-1}${Z}`,new ge.ERR_OUT_OF_RANGE("value",_,h)}Se(p,C,S)}function Ae(h,s){if(typeof h!="number")throw new ge.ERR_INVALID_ARG_TYPE(s,"number",h)}function je(h,s,l){throw Math.floor(h)!==h?(Ae(h,l),new ge.ERR_OUT_OF_RANGE("offset","an integer",h)):s<0?new ge.ERR_BUFFER_OUT_OF_BOUNDS:new ge.ERR_OUT_OF_RANGE("offset",`>= 0 and <= ${s}`,h)}const Oe=/[^+/0-9A-Za-z-_]/g;function ki(h){if(h=h.split("=")[0],h=h.trim().replace(Oe,""),h.length<2)return"";for(;h.length%4!==0;)h=h+"=";return h}function nt(h,s){s=s||1/0;let l;const p=h.length;let C=null;const S=[];for(let Z=0;Z<p;++Z){if(l=h.charCodeAt(Z),l>55295&&l<57344){if(!C){if(l>56319){(s-=3)>-1&&S.push(239,191,189);continue}else if(Z+1===p){(s-=3)>-1&&S.push(239,191,189);continue}C=l;continue}if(l<56320){(s-=3)>-1&&S.push(239,191,189),C=l;continue}l=(C-55296<<10|l-56320)+65536}else C&&(s-=3)>-1&&S.push(239,191,189);if(C=null,l<128){if((s-=1)<0)break;S.push(l)}else if(l<2048){if((s-=2)<0)break;S.push(l>>6|192,l&63|128)}else if(l<65536){if((s-=3)<0)break;S.push(l>>12|224,l>>6&63|128,l&63|128)}else if(l<1114112){if((s-=4)<0)break;S.push(l>>18|240,l>>12&63|128,l>>6&63|128,l&63|128)}else throw new Error("Invalid code point")}return S}function it(h){const s=[];for(let l=0;l<h.length;++l)s.push(h.charCodeAt(l)&255);return s}function ut(h,s){let l,p,C;const S=[];for(let Z=0;Z<h.length&&!((s-=2)<0);++Z)l=h.charCodeAt(Z),p=l>>8,C=l%256,S.push(C),S.push(p);return S}function sn(h){return e.toByteArray(ki(h))}function rt(h,s,l,p){let C;for(C=0;C<p&&!(C+l>=s.length||C>=h.length);++C)s[C+l]=h[C];return C}function Ze(h,s){return h instanceof s||h!=null&&h.constructor!=null&&h.constructor.name!=null&&h.constructor.name===s.name}function Qe(h){return h!==h}const Ke=function(){const h="0123456789abcdef",s=new Array(256);for(let l=0;l<16;++l){const p=l*16;for(let C=0;C<16;++C)s[p+C]=h[l]+h[C]}return s}();function Ge(h){return typeof BigInt>"u"?te:h}function te(){throw new Error("BigInt not supported")}}(bn)),bn}/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */var mr;function _s(){return mr||(mr=1,function(i,e){var t=Ks(),n=t.Buffer;function r(c,a){for(var g in c)a[g]=c[g]}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?i.exports=t:(r(t,e),e.Buffer=o);function o(c,a,g){return n(c,a,g)}o.prototype=Object.create(n.prototype),r(n,o),o.from=function(c,a,g){if(typeof c=="number")throw new TypeError("Argument must not be a number");return n(c,a,g)},o.alloc=function(c,a,g){if(typeof c!="number")throw new TypeError("Argument must be a number");var d=n(c);return a!==void 0?typeof g=="string"?d.fill(a,g):d.fill(a):d.fill(0),d},o.allocUnsafe=function(c){if(typeof c!="number")throw new TypeError("Argument must be a number");return n(c)},o.allocUnsafeSlow=function(c){if(typeof c!="number")throw new TypeError("Argument must be a number");return t.SlowBuffer(c)}}(Tt,Tt.exports)),Tt.exports}var Fr;function qs(){if(Fr)return kt.exports;Fr=1;var i=65536,e=4294967295;function t(){throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`)}var n=_s().Buffer,r=st.crypto||st.msCrypto;r&&r.getRandomValues?kt.exports=o:kt.exports=t;function o(c,a){if(c>e)throw new RangeError("requested too many random bytes");var g=n.allocUnsafe(c);if(c>0)if(c>i)for(var d=0;d<c;d+=i)r.getRandomValues(g.slice(d,d+i));else r.getRandomValues(g);return typeof a=="function"?process.nextTick(function(){a(null,g)}):g}return kt.exports}var yn,pr;function Ur(){if(pr)return yn;pr=1;const i=qs();class e{constructor(n,r){this.ufrag=n,this.pwd=r,this.lite=!1,this.endOfCandidates=!1}clone(){const n=new e(this.ufrag,this.pwd);return n.setLite(this.lite),n.setEndOfCandidates(this.endOfCandidates),n}plain(){const n={ufrag:this.ufrag,pwd:this.pwd};return this.lite&&(n.lite=this.lite),this.endOfCandidates&&(n.endOfCandidates=this.endOfCandidates),n}getUfrag(){return this.ufrag}getPwd(){return this.pwd}isLite(){return this.lite}setLite(n){this.lite=n}isEndOfCandidates(){return this.endOfCandidates}setEndOfCandidates(n){this.endOfCandidates=n}}return e.generate=function(t){const n=new e,r=i(8),o=i(24);return n.ufrag=r.toString("hex"),n.pwd=o.toString("hex"),n.lite=t,n},e.expand=function(t){if(t.constructor.name==="ICEInfo")return t;t=t;const n=new e(t.ufrag,t.pwd);return n.setLite(t.lite),n.setEndOfCandidates(t.endOfCandidates),n},e.clone=function(t){return t.constructor.name==="ICEInfo"?t.clone():e.expand(t)},yn=e,yn}var Qn,Ir;function Ht(){if(Ir)return Qn;Ir=1;const e=Fn()("SEND","RECV");return e.byValue=function(t){return e[t.toUpperCase()]},e.toString=function(t){switch(t){case e.SEND:return"send";case e.RECV:return"recv"}},e.reverse=function(t){switch(t){case e.SEND:return e.RECV;case e.RECV:return e.SEND}},Qn=e,Qn}var xn,Br;function Vn(){if(Br)return xn;Br=1;const i=Ht();class e{constructor(n,r){this.id=n,this.direction=r,this.formats=[],this.params=new Map}clone(){var n=new e(this.id,this.direction);return n.setFormats(this.formats),n.setParams(this.params),n}plain(){var n={id:this.id,direction:i.toString(this.direction)};this.formats&&(n.formats=this.formats);for(var[r,o]of this.params.entries())n.params||(n.params={}),n.params[r]=o;return n}getId(){return this.id}getDirection(){return this.direction}setDirection(n){this.direction=n}getFormats(){return this.formats}setFormats(n){this.formats=[];for(let r=0;r<n.length;++r)this.formats.push(parseInt(n[r]))}getParams(){return this.params}setParams(n){this.params=new Map(n)}addParam(n,r){this.params.set(n,r)}}return e.expand=function(t){if(t.constructor.name==="RIDInfo")return t;t=t;const n=new e(t.id,i.byValue(t.direction));for(const[r,o]of Object.entries(t.params||{}))n.addParam(r,o);return t.formats&&n.setFormats(t.formats),n},e.clone=function(t){return t.constructor.name==="RIDInfo"?t.clone():e.expand(t)},xn=e,xn}var Rn,br;function Cn(){if(br)return Rn;br=1;class i{constructor(t,n){this.paused=n,this.id=t}clone(){return new i(this.id,this.paused)}plain(){return{id:this.id,paused:this.paused}}isPaused(){return this.paused}getId(){return this.id}}return i.expand=function(e){return e.constructor.name==="SimulcastStreamInfo"?e:(e=e,new i(e.id,e.paused))},i.clone=function(e){return e.constructor.name==="SimulcastStreamInfo"?e.clone():i.expand(e)},Rn=i,Rn}var En,yr;function Sn(){if(yr)return En;yr=1;const i=Cn(),e=Ht();class t{constructor(){this.send=[],this.recv=[]}clone(){const r=new t;for(const o of this.send)r.addSimulcastAlternativeStreams(e.SEND,o.map(c=>c.clone()));for(const o of this.recv)r.addSimulcastAlternativeStreams(e.RECV,o.map(c=>c.clone()));return r}plain(){const r={send:[],recv:[]};for(const o of this.send)r.send.push(o.map(c=>c.plain()));for(const o of this.recv)r.recv.push(o.map(c=>c.plain()));return r}addSimulcastAlternativeStreams(r,o){return r===e.SEND?this.send.push(o):this.recv.push(o)}addSimulcastStream(r,o){return r===e.SEND?this.send.push([o]):this.recv.push([o])}getSimulcastStreams(r){return r===e.SEND?this.send:this.recv}}return t.expand=function(n){if(n.constructor.name==="SimulcastInfo")return n;n=n;const r=new t;for(const o of n.send||[])r.addSimulcastAlternativeStreams(e.SEND,o.map(i.expand));for(const o of n.recv||[])r.addSimulcastAlternativeStreams(e.RECV,o.map(i.expand));return r},t.clone=function(n){return n.constructor.name==="SimulcastInfo"?n.clone():t.expand(n)},En=t,En}var Zn,Qr;function Gn(){if(Qr)return Zn;Qr=1;const e=Fn()("SENDRECV","SENDONLY","RECVONLY","INACTIVE");return e.byValue=function(t){return e[t.toUpperCase()]},e.toString=function(t){switch(t){case e.SENDRECV:return"sendrecv";case e.SENDONLY:return"sendonly";case e.RECVONLY:return"recvonly";case e.INACTIVE:return"inactive"}},e.reverse=function(t){switch(t){case e.SENDRECV:return e.SENDRECV;case e.SENDONLY:return e.RECVONLY;case e.RECVONLY:return e.SENDONLY;case e.INACTIVE:return e.INACTIVE}},Zn=e,Zn}var vn,xr;function wn(){if(xr)return vn;xr=1;class i{constructor(t,n){this.port=t,this.maxMessageSize=n}clone(){return new i(this.port,this.maxMessageSize)}plain(){return{port:this.port,maxMessageSize:this.maxMessageSize}}getPort(){return this.port}getMaxMessageSize(){return this.maxMessageSize}}return i.expand=function(e){return e.constructor.name==="DataChannelInfo"?e:(e=e,new i(e.port,e.maxMessageSize))},i.clone=function(e){return e.constructor.name==="DataChannelInfo"?e.clone():i.expand(e)},vn=i,vn}var Ln,Vr;function Rr(){if(Vr)return Ln;Vr=1;const i=Wt(),e=Vn(),t=Sn(),n=Gn(),r=Ht();Nt();const o=wn();class c{constructor(d,u){this.id=d,this.type=u,this.direction=n.SENDRECV,this.extensions=new Map,this.codecs=new Map,this.rids=new Map,this.simulcast=null,this.bitrate=0,this.control=null,this.dataChannel=null}clone(){const d=new c(this.id,this.type);d.setDirection(this.direction),d.setBitrate(this.bitrate);for(const u of this.codecs.values())d.addCodec(u.clone());for(const[u,I]of this.extensions.entries())d.addExtension(u,I);for(const u of this.rids.values())d.addRID(u.clone());return this.simulcast&&d.setSimulcast(this.simulcast.clone()),this.control&&d.setControl(this.control),this.dataChannel&&d.setDataChannel(this.dataChannel.clone()),d}plain(){const d={id:this.id,type:this.type,direction:n.toString(this.direction),codecs:[]};this.dataChannel&&(d.dataChannel=this.dataChannel.plain()),this.bitrate&&(d.bitrate=this.bitrate);for(const u of this.codecs.values())d.codecs.push(u.plain());for(const[u,I]of this.extensions.entries())d.extensions||(d.extensions={}),d.extensions[u]=I;for(const u of this.rids.values())d.rids||(d.rids=[]),d.rids.push(u.plain());return this.simulcast&&(d.simulcast=this.simulcast.plain()),this.control&&(d.control=this.control),d}getType(){return this.type}getId(){return this.id}setId(d){this.id=d}addExtension(d,u){this.extensions.set(d,u)}addRID(d){this.rids.set(d.getId(),d)}addCodec(d){this.codecs.set(d.getType(),d)}setCodecs(d){this.codecs=d}getCodecForType(d){return this.codecs.get(d)}getCodec(d){for(const u of this.codecs.values())if(u.getCodec().toLowerCase()===d.toLowerCase())return u;return null}hasCodec(d){return this.getCodec(d)!==null}getCodecs(){return this.codecs}hasRTX(){for(const d of this.codecs.values())if(d.hasRTX())return!0;return!1}getExtensions(){return this.extensions}getRIDs(){return this.rids}getRID(d){return this.rids.get(d)}getBitrate(){return this.bitrate}setBitrate(d){this.bitrate=d}getDirection(){return this.direction}setDirection(d){this.direction=d}hasControl(){return!!this.control}getControl(){return this.control}setControl(d){this.control=d}hasDataChannel(){return!!this.dataChannel}getDataChannel(){return this.dataChannel}setDataChannel(d){this.dataChannel=d}answer(d){const u=new c(this.id,this.type);if(d){u.setDirection(n.reverse(this.direction));const{codecs:I,dataChannel:F}=d;if(I){let f;Array.isArray(I)?f=i.MapFromNames(I,d.rtx,d.rtcpfbs):f=I;for(let y of this.codecs.values())for(let x of f.values()){if(x.getCodec().toLowerCase()!==y.getCodec().toLowerCase()||x.getCodec()==="h264"&&x.hasParam("packetization-mode")&&x.getParam("packetization-mode")!=y.getParam("packetization-mode","0")||x.getCodec()==="h264"&&x.hasParam("profile-level-id")&&y.hasParam("profile-level-id")&&x.getParam("profile-level-id")!=y.getParam("profile-level-id")||x.getCodec()==="multiopus"&&x.hasParam("num_streams")&&y.hasParam("num_streams")&&x.getParam("num_streams")!=y.getParam("num_streams"))continue;const v=x.clone();v.setType(y.getType()),v.hasRTX()&&v.setRTX(y.getRTX()),y.hasChannels()&&v.setChannels(y.getChannels()),v.addParams(y.getParams()),u.addCodec(v);break}}const m=new Set(d.extensions);for(let[f,y]of this.extensions)m.has(y)&&u.addExtension(f,y);if(d.simulcast&&this.simulcast){const f=new t,y=this.simulcast.getSimulcastStreams(r.SEND);if(y)for(const v of y){const L=v.map(A=>A.clone());f.addSimulcastAlternativeStreams(r.RECV,L)}const x=this.simulcast.getSimulcastStreams(r.RECV);if(x)for(const v of x){const L=v.map(A=>A.clone());f.addSimulcastAlternativeStreams(r.SEND,L)}for(const v of this.rids.values()){const L=v.clone();L.setDirection(r.reverse(v.getDirection())),u.addRID(L)}u.setSimulcast(f)}if(F&&this.dataChannel){const f=new o(this.dataChannel.getPort(),F.maxMessageSize?F.maxMessageSize:this.dataChannel.getMaxMessageSize());u.setDataChannel(f)}}else u.setDirection(n.INACTIVE);return u}getSimulcast(){return this.simulcast}setSimulcast(d){this.simulcast=d}}c.create=function(g,d,u){!u&&typeof d!="string"&&(u=d,d=g);const I=new c(g,d);if(u){const{codecs:F}=u;F&&(Array.isArray(F)?I.setCodecs(i.MapFromNames(F,u.rtx,u.rtcpfbs)):I.setCodecs(F))}else I.setDirection(n.INACTIVE);return I},c.expand=function(g){if(g.constructor.name==="MediaInfo")return g;g=g;const d=new c(g.id,g.type);if(g.direction&&d.setDirection(n.byValue(g.direction)),d.setBitrate(g.bitrate),g.dataChannel){const u=o.expand(g.dataChannel);u&&d.setDataChannel(u)}for(const[u,I]of Object.entries(g.extensions))d.addExtension(a(u),I);for(const u of g.codecs){const I=i.expand(u);I&&d.addCodec(I)}for(const u of g.rids||[]){const I=e.expand(u);d.addRID(I)}return g.simulcast&&d.setSimulcast(t.expand(g.simulcast)),g.control&&d.setControl(g.control),d},c.clone=function(g){return g.constructor.name==="MediaInfo"?g.clone():c.expand(g)};function a(g){const d=g.toString();if(!/^\d+$/.test(d))throw new Error(`invalid integer ${d}`);return parseInt(d)}return Ln=c,Ln}var Xn,Cr;function An(){if(Cr)return Xn;Cr=1;class i{constructor(t,n){this.semantics=t,this.ssrcs=[];for(let r=0;r<n.length;++r)this.ssrcs.push(parseInt(n[r]))}clone(){return new i(this.semantics,this.ssrcs)}plain(){const t={semantics:this.semantics,ssrcs:[]};for(let n=0;n<this.ssrcs.length;++n)t.ssrcs.push(this.ssrcs[n]);return t}getSemantics(){return this.semantics}getSSRCs(){return this.ssrcs}}return i.expand=function(e){return e.constructor.name==="SourceGroupInfo"?e:(e=e,new i(e.semantics,e.ssrcs))},i.clone=function(e){return e.constructor.name==="SourceGroupInfo"?e.clone():i.expand(e)},Xn=i,Xn}var Nn,Er;function Sr(){if(Er)return Nn;Er=1;class i{constructor(t){this.ssrc=t}clone(){const t=new i(this.ssrc);return t.setCName(this.cname),t.setStreamId(this.streamId),t.setTrackId(this.trackId),t}plain(){const t={ssrc:this.ssrc};return this.cname&&(t.cname=this.cname),this.streamId&&(t.streamId=this.streamId),this.trackId&&(t.trackId=this.trackId),t}getCName(){return this.cname}setCName(t){this.cname=t}getStreamId(){return this.streamId}setStreamId(t){this.streamId=t}getTrackId(){return this.trackId}setTrackId(t){this.trackId=t}getSSRC(){return this.ssrc}}return i.expand=function(e){if(e.constructor.name==="SourceInfo")return e;e=e;const t=new i(e.ssrc);return t.setCName(e.cname),t.setStreamId(e.streamId),t.setTrackId(e.trackId),t},i.clone=function(e){return e.constructor.name==="SourceInfo"?e.clone():i.expand(e)},Nn=i,Nn}var Wn,Zr;function kn(){if(Zr)return Wn;Zr=1;const i=Wt();class e{constructor(n,r=!1){this.id=n,this.paused=r,this.codecs=new Map,this.params=new Map}clone(){var n=new e(this.id,this.paused);for(let r of this.codecs.values())n.addCodec(r.clone());return n.setParams(this.params),n}plain(){var n={id:this.id,paused:this.paused,codecs:{},params:{}};for(var[r,o]of this.codecs.entries())n.codecs[r]=o.plain();for(var[r,c]of this.params.entries())n.params[r]=c;return n}getId(){return this.id}getCodecs(){return this.codecs}addCodec(n){this.codecs.set(n.getType(),n)}getParams(){return this.params}setParams(n){this.params=new Map(n)}addParam(n,r){this.params.set(n,r)}isPaused(){return this.paused}}return e.expand=function(t){if(t.constructor.name==="TrackEncodingInfo")return t;t=t;const n=new e(t.id,t.paused);for(const r of Object.values(t.codecs||{}))n.addCodec(i.expand(r));for(const[r,o]of Object.entries(t.params||{}))n.addParam(r,o);return n},e.clone=function(t){return t.constructor.name==="TrackEncodingInfo"?t.clone():e.expand(t)},Wn=e,Wn}var Tn,Gr;function Dn(){if(Gr)return Tn;Gr=1;const i=An(),e=kn();class t{constructor(r,o){this.media=r,this.id=o,this.ssrcs=[],this.groups=[],this.encodings=[]}clone(){const r=new t(this.media,this.id);this.mediaId&&r.setMediaId(this.mediaId);for(let o=0;o<this.ssrcs.length;++o)r.addSSRC(this.ssrcs[o]);for(let o=0;o<this.groups.length;++o)r.addSourceGroup(this.groups[o].clone());for(let o=0;o<this.encodings.length;++o){const c=[];for(let a=0;a<this.encodings[o].length;++a)c.push(this.encodings[o][a].clone());r.addAlternativeEncodings(c)}return r}plain(){const r={media:this.media,id:this.id,ssrcs:[]};this.mediaId&&(r.mediaId=this.mediaId);for(let o=0;o<this.ssrcs.length;++o)r.ssrcs.push(this.ssrcs[o]);for(let o=0;o<this.groups.length;++o)r.groups||(r.groups=[]),r.groups.push(this.groups[o].plain());for(let o=0;o<this.encodings.length;++o){const c=[];for(let a=0;a<this.encodings[o].length;++a)c.push(this.encodings[o][a].plain());c.length&&(r.encodings||(r.encodings=[]),r.encodings.push(c))}return r}getMedia(){return this.media}setMediaId(r){this.mediaId=r}getMediaId(){return this.mediaId}getId(){return this.id}addSSRC(r){this.ssrcs.push(r)}getSSRCs(){return this.ssrcs}addSourceGroup(r){this.groups.push(r)}getSourceGroup(r){for(const o of this.groups)if(o.getSemantics().toLowerCase()===r.toLowerCase())return o;return null}getSourceGroups(){return this.groups}getSourceGroupsForMediaSSRC(r){return this.groups.filter(o=>o.getSSRCs()[0]===r)}hasSourceGroup(r){for(const o of this.groups)if(o.getSemantics().toLowerCase()===r.toLowerCase())return!0;return!1}getEncodings(){return this.encodings}addEncoding(r){this.encodings.push([r])}addAlternativeEncodings(r){this.encodings.push(r)}setEncodings(r){this.encodings=r}getEncodingSources(){const r=[];if(this.encodings.length)for(const o of this.encodings)for(const c of o){const a={id:c.getId(),rid:c.getId()},g=c.getParams(),d=g==null?void 0:g.get("ssrc");if(d!==void 0){a.media=parseInt(d);for(const u of this.getSourceGroupsForMediaSSRC(a.media))switch(u.getSemantics()){case"FID":a.rtx=u.getSSRCs()[1];break;case"FEC-FR":a.fec=u.getSSRCs()[1];break}}r.push(a)}else if(this.hasSourceGroup("SIM")){const c=this.getSourceGroup("SIM").getSSRCs();this.getSourceGroups();for(const a of c){const g={id:String(a),media:a};for(const d of this.getSourceGroupsForMediaSSRC(g.media))switch(d.getSemantics()){case"FID":g.rtx=d.getSSRCs()[1];break;case"FEC-FR":g.fec=d.getSSRCs()[1];break}r.push(g)}}else{const o={id:""};if(this.ssrcs.length){o.media=this.ssrcs[0];for(const c of this.getSourceGroupsForMediaSSRC(o.media))switch(c.getSemantics()){case"FID":o.rtx=c.getSSRCs()[1];break;case"FEC-FR":o.fec=c.getSSRCs()[1];break}}r.push(o)}return r}}return t.expand=function(n){var r,o;if(n.constructor.name==="TrackInfo")return n;n=n;const c=new t(n.media,n.id);if(n.mediaId&&c.setMediaId(n.mediaId),Array.isArray(n.ssrcs))for(const a of n.ssrcs)c.addSSRC(a);else if(((r=n.ssrcs)===null||r===void 0?void 0:r.media)!==void 0){const a=n.ssrcs.media;if(c.addSSRC(a),n.ssrcs.rtx!==void 0){const g=n.ssrcs.rtx;c.addSSRC(g),c.addSourceGroup(new i("FID",[a,g]))}if(n.ssrcs.fec!==void 0){const g=n.ssrcs.fec;c.addSSRC(g),c.addSourceGroup(new i("FEC-FR",[a,g]))}}if(n.rid){const a=new e(n.rid);((o=n.ssrcs)===null||o===void 0?void 0:o.media)!==void 0&&a.addParam("ssrc",n.ssrcs.media),c.addAlternativeEncodings([a])}for(const a of n.groups||[])c.addSourceGroup(i.expand(a));for(const a of n.encodings||[]){const g=[];for(const d of a)g.push(e.expand(d));c.addAlternativeEncodings(g)}return c},t.clone=function(n){return n.constructor.name==="TrackInfo"?n.clone():t.expand(n)},Tn=t,Tn}var Hn,vr;function wr(){if(vr)return Hn;vr=1;const i=Dn();class e{constructor(n){this.id=n,this.tracks=new Map}clone(){const n=new e(this.id);for(const r of this.tracks.values())n.addTrack(r.clone());return n}plain(){const n={id:this.id,tracks:[]};for(const r of this.tracks.values())n.tracks.push(r.plain());return n}getId(){return this.id}addTrack(n){this.tracks.set(n.getId(),n)}removeTrack(n){return this.tracks.delete(n.getId())}removeTrackById(n){return this.tracks.delete(n)}getFirstTrack(n){for(let r of this.tracks.values())if(r.getMedia().toLowerCase()===n.toLowerCase())return r;return null}getTracks(){return this.tracks}removeAllTracks(){this.tracks.clear()}getTrack(n){return this.tracks.get(n)}}return e.expand=function(t){if(t.constructor.name==="StreamInfo")return t;t=t;const n=new e(t.id);for(const r of t.tracks||[]){const o=i.expand(r);o&&n.addTrack(o)}return n},e.clone=function(t){return t.constructor.name==="StreamInfo"?t.clone():e.expand(t)},Hn=e,Hn}var Jn,Lr;function $s(){if(Lr)return Jn;Lr=1;const i=Ps(),e=zs()("en-US"),t=ir(),n=Wt(),r=Nt(),o=lr(),c=ur(),a=Ur(),g=Rr(),d=Un(),u=Gn(),I=Ht(),F=An(),m=Sr(),f=wr(),y=Dn(),x=kn(),v=Sn(),L=Cn(),A=Vn(),U=wn();class b{constructor(B){this.version=B||1,this.streams=new Map,this.medias=new Array,this.candidates=new Array,this.ice=null,this.dtls=null,this.crypto=null,this.extmapAllowMixed=!0}clone(){const B=new b(this.version);for(const R of this.medias)B.addMedia(R.clone());for(const R of this.streams.values())B.addStream(R.clone());for(const R of this.candidates)B.addCandidate(R.clone());return B.setICE(this.ice.clone()),this.dtls&&B.setDTLS(this.dtls.clone()),this.crypto&&B.setCrypto(this.crypto.clone()),B.setExtmapAllowMixed(this.extmapAllowMixed),B}plain(){const B={version:this.version,streams:[],medias:[],candidates:[]};for(const R of this.medias)B.medias.push(R.plain());for(const R of this.streams.values())B.streams.push(R.plain());for(const R of this.candidates)B.candidates.push(R.plain());return this.ice&&(B.ice=this.ice.plain()),this.dtls&&(B.dtls=this.dtls.plain()),this.crypto&&(B.crypto=this.crypto.plain()),this.extmapAllowMixed||(B.extmapAllowMixedNotSupported=!this.extmapAllowMixed),B}unify(){const B=new b(this.version);for(const w of this.medias)B.addMedia(w.clone());const R={audio:B.getMediasByType("audio"),video:B.getMediasByType("video")};for(const w of this.streams.values()){const E=w.clone();for(const N of E.getTracks().values()){let K=R[N.getMedia()].pop();K||(K=this.getMedia(N.getMedia()).clone(),K.setId(N.getId()),B.addMedia(K)),N.setMediaId(K.getId())}B.addStream(E)}for(const w of this.candidates)B.addCandidate(w.clone());return this.ice&&B.setICE(this.ice.clone()),this.dtls&&B.setDTLS(this.dtls.clone()),this.crypto&&B.setCrypto(this.crypto.clone()),B}setVersion(B){this.version=B}addMedia(B){this.medias.push(B)}getMedia(B){for(let R in this.medias){let w=this.medias[R];if(e(w.getType(),B))return w}return null}getMediasByType(B){let R=[];for(let w in this.medias){let E=this.medias[w];e(E.getType(),B)&&R.push(E)}return R}getMediaById(B){for(const R of this.medias)if(e(R.getId(),B))return R;return null}replaceMedia(B){for(let R in this.medias)if(this.medias[R].getId()==B.getId())return this.medias[R]=B,!0;return!1}getMedias(){return this.medias}getVersion(){return this.version}getDTLS(){return this.dtls}setDTLS(B){this.dtls=B}hasCrypto(){return!!this.crypto}getCrypto(){return this.crypto}setCrypto(B){this.crypto=B}hasICE(){return!!this.ice}getICE(){return this.ice}setICE(B){this.ice=B}addCandidate(B){for(const R of this.candidates)if(R.equals(B))return;this.candidates.push(B)}addCandidates(B){for(const R of B)this.addCandidate(R)}getCandidates(){return this.candidates}getStream(B){return this.streams.get(B)}getStreams(){return this.streams}getFirstStream(){for(const B of this.streams.values())return B;return null}addStream(B){this.streams.set(B.getId(),B)}removeStream(B){return this.streams.delete(B.getId())}removeAllStreams(){this.streams.clear()}getTracksByMediaType(B){let R=[];for(const w of this.streams.values())for(const[E,N]of w.getTracks())e(N.getMedia(),B)&&R.push(N);return R}getTrackByMediaId(B){for(const R of this.streams.values())for(const[w,E]of R.getTracks())if(E.getMediaId()==B)return E;return null}getStreamByMediaId(B){for(const R of this.streams.values())for(const[w,E]of R.getTracks())if(E.getMediaId()==B)return R;return null}getExtmapAllowMixed(){return this.extmapAllowMixed}setExtmapAllowMixed(B){this.extmapAllowMixed=B}answer(B){const R=new b;B.ice&&(B.ice instanceof a?R.setICE(B.ice.clone()):R.setICE(a.expand(B.ice))),B.dtls&&(B.dtls instanceof o?R.setDTLS(B.dtls):R.setDTLS(o.expand(B.dtls))),B.crypto&&(B.crypto instanceof c?R.setCrypto(B.crypto):R.setCrypto(c.expand(B.crypto)));for(let w=0;B.candidates&&w<B.candidates.length;++w)B.candidates[w]instanceof t?R.addCandidate(B.candidates[w].clone()):R.addCandidate(t.expand(B.candidates[w]));for(const w of this.medias){const E=B&&B.capabilities&&B.capabilities[w.getType()];R.addMedia(w.answer(E))}return R.setExtmapAllowMixed(this.extmapAllowMixed),R}toString(){let B={version:0,media:[]};B.version=0,B.origin={username:"-",sessionId:new Date().getTime(),sessionVersion:this.version,netType:"IN",ipVer:4,address:"127.0.0.1"},B.name="semantic-sdp",B.connection={version:4,ip:"0.0.0.0"},B.timing={start:0,stop:0},this.hasICE()&&this.getICE().isLite()&&(B.icelite="ice-lite"),B.msidSemantic={semantic:"WMS",token:"*"},B.groups=[],this.extmapAllowMixed&&(B.extmapAllowMixed="extmap-allow-mixed");const R=[];for(const E of this.medias){let N={type:E.getType(),port:9,protocol:"",fmtp:[],rtp:[],rtcpFb:[],ext:[],bandwidth:[],candidates:[],ssrcGroups:[],ssrcs:[],rids:[]};N.direction=u.toString(E.getDirection()),this.extmapAllowMixed&&(N.extmapAllowMixed="extmap-allow-mixed"),N.mid=E.getId(),R.push(E.getId()),E.hasControl()&&(N.control=E.getControl()),E.getBitrate()>0&&(N.bandwidth.push({type:"AS",limit:E.getBitrate()}),N.bandwidth.push({type:"TIAS",limit:E.getBitrate()*1e3}));let K=this.getCandidates();for(const Y of K)N.candidates.push({foundation:Y.getFoundation(),component:Y.getComponentId(),transport:Y.getTransport(),priority:Y.getPriority(),ip:Y.getAddress(),port:Y.getPort(),type:Y.getType(),raddr:Y.getRelAddr(),rport:Y.getRelPort()});if(this.getICE()&&(N.iceUfrag=this.getICE().getUfrag(),N.icePwd=this.getICE().getPwd()),e("audio",E.getType())||e("video",E.getType())){N.rtcpMux="rtcp-mux",N.rtcpRsize="rtcp-rsize",this.getDTLS()?(N.protocol="UDP/TLS/RTP/SAVPF",N.fingerprint={type:this.getDTLS().getHash(),hash:this.getDTLS().getFingerprint()},N.setup=d.toString(this.getDTLS().getSetup())):this.getCrypto()?(N.protocol="RTP/SAVPF",N.crypto=[{id:this.getCrypto().getTag(),suite:this.getCrypto().getSuite(),config:this.getCrypto().getKeyParams()}]):N.protocol="RTP/AVP";for(const J of E.getCodecs().values()){e("video",E.getType())?N.rtp.push({payload:J.getType(),codec:J.getCodec().toUpperCase(),rate:9e4}):e("opus",J.getCodec())?N.rtp.push({payload:J.getType(),codec:J.getCodec(),rate:48e3,encoding:J.getChannels()}):e("multiopus",J.getCodec())?N.rtp.push({payload:J.getType(),codec:J.getCodec(),rate:48e3,encoding:J.getChannels()}):N.rtp.push({payload:J.getType(),codec:J.getCodec(),rate:8e3});for(const X of J.getRTCPFeedbacks())N.rtcpFb.push({payload:J.getType(),type:X.getId(),subtype:X.getParams().join(" ")});J.hasRTX()&&(N.rtp.push({payload:J.getRTX(),codec:"rtx",rate:9e4}),N.fmtp.push({payload:J.getRTX(),config:"apt="+J.getType()}));const D=J.getParams();if(Object.keys(D).length){const X={payload:J.getType(),config:""};for(const T in D)X.config.length&&(X.config+=";"),Object.hasOwnProperty.call(D,T)?X.config+=T+"="+D[T]:X.config+=T;N.fmtp.push(X)}}const Y=[];for(const J of N.rtp)Y.push(J.payload);N.payloads=Y.join(" ");for(let[J,D]of E.getExtensions().entries())N.ext.push({value:J,uri:D});for(let J of E.getRIDs().values()){let D={id:J.getId(),direction:I.toString(J.getDirection()),params:""};J.getFormats().length&&(D.params="pt="+J.getFormats().join(","));for(let[X,T]of J.getParams().entries())D.params+=(D.params.length?";":"")+X+"="+T;N.rids.push(D)}const ee=E.getSimulcast();if(ee){let J=1;N.simulcast={};const D=ee.getSimulcastStreams(I.SEND),X=ee.getSimulcastStreams(I.RECV);if(D&&D.length){let T="";for(const j of D){let O="";for(const k of j)O+=(O.length?",":"")+(k.isPaused()?"~":"")+k.getId();T+=(T.length?";":"")+O}N.simulcast["dir"+J]="send",N.simulcast["list"+J]=T,J++}if(X&&X.length){let T="";for(const j of X){let O="";for(const k of j)O+=(O.length?",":"")+(k.isPaused()?"~":"")+k.getId();T+=(T.length?";":"")+O}N.simulcast["dir"+J]="recv",N.simulcast["list"+J]=T,J++}}}else if(E.hasDataChannel()){N.protocol="UDP/DTLS/SCTP",N.payloads="webrtc-datachannel";const Y=E.getDataChannel();N.sctpPort=Y.getPort(),N.maxMessageSize=Y.getMaxMessageSize()}B.media.push(N)}for(let E of this.streams.values())for(let N of E.getTracks().values())for(let K in B.media){let Y=B.media[K];if(N.getMediaId()){if(N.getMediaId()==Y.mid){let ee=N.getSourceGroups();for(let D in ee){let X=ee[D];Y.ssrcGroups.push({semantics:X.getSemantics(),ssrcs:X.getSSRCs().join(" ")})}let J=N.getSSRCs();for(let D in J)Y.ssrcs.push({id:J[D],attribute:"cname",value:E.getId()}),Y.ssrcs.push({id:J[D],attribute:"msid",value:E.getId()+" "+N.getId()});Y.msid=E.getId()+" "+N.getId();break}}else if(e(Y.type,N.getMedia())){let ee=N.getSourceGroups();for(let D in ee){let X=ee[D];Y.ssrcGroups.push({semantics:X.getSemantics(),ssrcs:X.getSSRCs().join(" ")})}let J=N.getSSRCs();for(let D in J)Y.ssrcs.push({id:J[D],attribute:"cname",value:E.getId()}),Y.ssrcs.push({id:J[D],attribute:"msid",value:E.getId()+" "+N.getId()});break}}const w={type:"BUNDLE",mids:R.join(" ")};return B.groups.push(w),i.write(B)}toIceFragmentString(){let B={version:0,media:[],candidates:[]};this.hasICE()&&this.getICE().isLite()&&(B.icelite="ice-lite"),this.getICE()&&(B.iceUfrag=this.getICE().getUfrag(),B.icePwd=this.getICE().getPwd());for(const R of this.getCandidates())B.candidates.push({foundation:R.getFoundation(),component:R.getComponentId(),transport:R.getTransport(),priority:R.getPriority(),ip:R.getAddress(),port:R.getPort(),type:R.getType(),raddr:R.getRelAddr(),rport:R.getRelPort()});return i.write(B).slice(10)}}return b.create=function(Q){var B;const R=new b;if(Q.streams)for(const K of Q.streams)R.addStream(f.expand(K));Q.ice&&(Q.ice instanceof a?R.setICE(Q.ice.clone()):R.setICE(a.expand(Q.ice))),Q.dtls&&(Q.dtls instanceof o?R.setDTLS(Q.dtls):R.setDTLS(o.expand(Q.dtls))),Q.crypto&&(Q.crypto instanceof c?R.setCrypto(Q.crypto):R.setCrypto(c.expand(Q.crypto)));for(const K of Q.candidates||[])K instanceof t?R.addCandidate(K.clone()):R.addCandidate(t.expand(K));let w=96,E=1,N=0;for(const[K,Y]of Object.entries(Q.capabilities||{}))if(Q.unified&&(!((B=Q.streams)===null||B===void 0)&&B.length))for(const ee of R.getTracksByMediaType(K)){const J=g.create(ee.getMediaId(),K,Y);for(const[D,X]of J.getCodecs())X.getType()>=96&&X.setType(w++),X.getRTX()&&X.setRTX(w++);if(Y.extensions)for(let D of Y.extensions)E===15&&E++,J.addExtension(E++,D);R.addMedia(J)}else{const ee=g.create(Q.unified?String(N++):K,K,Y);for(const[J,D]of ee.getCodecs())D.getType()>=96&&D.setType(w++),D.getRTX()&&D.setRTX(w++);if(Y.extensions)for(let J of Y.extensions)E===15&&E++,ee.addExtension(E++,J);R.addMedia(ee)}return R},b.expand=function(Q){if(Q.constructor.name==="SDPInfo")return Q;Q=Q;const B=new b(Q.version);for(const R of Q.medias||[]){const w=g.expand(R);w&&B.addMedia(w)}for(const R of Q.streams||[]){const w=f.expand(R);w&&B.addStream(w)}for(const R of Q.candidates||[]){const w=t.expand(R);w&&B.addCandidate(w)}return Q.ice&&B.setICE(a.expand(Q.ice)),Q.dtls&&B.setDTLS(o.expand(Q.dtls)),Q.crypto&&B.setCrypto(c.expand(Q.crypto)),Q.extmapAllowMixedNotSupported&&(this.extmapAllowMixed=!Q.extmapAllowMixedNotSupported),B},b.clone=function(Q){return Q.constructor.name==="SDPInfo"?Q.clone():b.expand(Q)},b.process=function(Q){return b.parse(Q)},b.parse=function(Q){const B=i.parse(Q),R=new b;if(R.setVersion(B.version),B.iceUfrag&&B.icePwd){const w=String(B.iceUfrag),E=String(B.icePwd),N=new a(w,E);N.setLite(B.icelite=="ice-lite"),N.setEndOfCandidates(B.endOfCandidates=="end-of-candidates"),R.setICE(N)}for(let w in B.media){const E=B.media[w],N=E.type,K=E.mid?E.mid.toString():w,Y=new g(K,N);if(E.iceUfrag&&E.icePwd){const k=String(E.iceUfrag),W=String(E.icePwd),H=new a(k,W);H.setLite(B.icelite=="ice-lite"),H.setEndOfCandidates(E.endOfCandidates=="end-of-candidates"),R.setICE(H)}for(let k=0;E.candidates&&k<E.candidates.length;++k){const W=E.candidates[k],H=new t(W.foundation,W.component,W.transport,W.priority,W.ip,W.port,W.type,W.raddr,W.rport);R.addCandidate(H)}const ee=E.fingerprint||B.fingerprint;if(ee){const k=ee.type,W=ee.hash;let H=d.ACTPASS;E.setup&&(H=d.byValue(E.setup)),R.setDTLS(new o(H,k,W))}if(E.crypto){const k=E.crypto[0];R.setCrypto(new c(k.id,k.suite,k.config,k.sessionConfig))}let J=u.SENDRECV;E.direction&&(J=u.byValue(E.direction),Y.setDirection(J)),E.control&&Y.setControl(E.control),R.setExtmapAllowMixed(E.extmapAllowMixed=="extmap-allow-mixed"||B.extmapAllowMixed=="extmap-allow-mixed");const D=new Map;for(let k in E.rtp){const W=E.rtp[k],H=W.payload,M=W.codec;if(M.toUpperCase()==="RED"||M.toUpperCase()==="ULPFEC")continue;let P={};for(let z in E.fmtp){const ie=E.fmtp[z];if(ie.payload===H){const ge=ie.config.split(";");for(let ye in ge){const Ve=ge[ye].split("="),Se=Ve[0].trim(),dt=Ve.splice(1).join("=").trim();P[Se]=dt}}}if(M.toUpperCase()==="RTX")D.set(parseInt(P.apt),H);else{const z=new n(M,H,P);W.encoding>1&&z.setChannels(W.encoding),Y.addCodec(z)}}for(let k of D.entries()){const W=Y.getCodecForType(k[0]);W&&W.setRTX(k[1])}for(let k=0;E.rtcpFb&&k<E.rtcpFb.length;++k){const W=Y.getCodecForType(E.rtcpFb[k].payload);if(W){const H=E.rtcpFb[k].type,M=E.rtcpFb[k].subtype?E.rtcpFb[k].subtype.split(" "):null;W.addRTCPFeedback(new r(H,M))}}const X=E.ext;for(let k in X){const W=X[k];Y.addExtension(W.value,W.uri)}const T=E.rids;for(let k in T){const W=T[k],H=new A(W.id,I.byValue(W.direction));let M=[];const P=new Map;if(W.params){const z=i.parseParams(W.params);for(let ie in z)ie==="pt"?M=z[ie].split(","):P.set(ie,z[ie]);H.setFormats(M),H.setParams(P)}Y.addRID(H)}const j=[];if(E.simulcast){const k=new v;if(E.simulcast.dir1){const W=I.byValue(E.simulcast.dir1),H=i.parseSimulcastStreamList(E.simulcast.list1);for(let M=0;M<H.length;++M){const P=[];for(let z=0;z<H[M].length;++z)P.push(new L(H[M][z].scid,H[M][z].paused));k.addSimulcastAlternativeStreams(W,P)}}if(E.simulcast.dir2){const W=I.byValue(E.simulcast.dir2),H=i.parseSimulcastStreamList(E.simulcast.list2);for(let M=0;M<H.length;++M){const P=[];for(let z=0;z<H[M].length;++z)P.push(new L(H[M][z].scid,H[M][z].paused));k.addSimulcastAlternativeStreams(W,P)}}for(let W of k.getSimulcastStreams(I.SEND)){const H=[];for(let M=0;M<W.length;M++){const P=new x(W[M].getId(),W[M].isPaused()),z=Y.getRID(P.getId());if(z){const ie=z.getFormats();for(let ge=0;ie&&ge<ie.length;++ge){const ye=Y.getCodecForType(ie[ge]);ye&&P.addCodec(ye)}P.setParams(z.getParams()),H.push(P)}}H.length&&j.push(H)}Y.setSimulcast(k)}const O=new Map;if(E.ssrcs)for(let k in E.ssrcs){let W=E.ssrcs[k],H=W.id,M=W.attribute,P=W.value,z=O.get(H);if(z||(z=new m(H),O.set(z.getSSRC(),z)),e("cname",M))z.setCName(P);else if(e("msid",M)){let ie=P.split(" "),ge=ie[0],ye=ie[1];z.setStreamId(ge),z.setTrackId(ye);let Ve=R.getStream(ge);Ve||(Ve=new f(ge),R.addStream(Ve));let Se=Ve.getTrack(ye);Se||(Se=new y(N,ye),Se.setMediaId(K),Se.setEncodings(j),Ve.addTrack(Se)),Se.addSSRC(H)}}if(E.msid){let k=E.msid.split(" "),W=k[0],H=k[1],M=R.getStream(W);M||(M=new f(W),R.addStream(M));let P=M.getTrack(H);P||(P=new y(N,H),P.setMediaId(K),P.setEncodings(j),M.addTrack(P));for(let[z,ie]of O.entries())ie.getStreamId()||(ie.setStreamId(W),ie.setTrackId(H),P.addSSRC(z))}for(let[k,W]of O.entries())if(!W.getStreamId()){let H=W.getCName(),M=K;W.setStreamId(H),W.setTrackId(M);let P=R.getStream(H);P||(P=new f(H),R.addStream(P));let z=P.getTrack(M);z||(z=new y(N,M),z.setMediaId(K),z.setEncodings(j),P.addTrack(z)),z.addSSRC(k)}if(E.ssrcGroups)for(let k in E.ssrcGroups){let W=E.ssrcGroups[k],H=W.ssrcs.split(" "),M=new F(W.semantics,H),P=O.get(parseInt(H[0]));P&&R.getStream(P.getStreamId()).getTrack(P.getTrackId()).addSourceGroup(M)}if(E.type=="application"&&E.payloads=="webrtc-datachannel"){const k=new U(E.sctpPort,E.maxMessageSize);Y.setDataChannel(k)}R.addMedia(Y)}return R},Jn=b,Jn}var Xr;function eo(){return Xr||(Xr=1,Object.defineProperty(he,"__esModule",{value:!0}),he.SDPInfo=$s(),he.CandidateInfo=ir(),he.CodecInfo=Wt(),he.DTLSInfo=lr(),he.CryptoInfo=ur(),he.ICEInfo=Ur(),he.MediaInfo=Rr(),he.Setup=Un(),he.SourceGroupInfo=An(),he.SourceInfo=Sr(),he.StreamInfo=wr(),he.TrackInfo=Dn(),he.RTCPFeedbackInfo=Nt(),he.TrackEncodingInfo=kn(),he.RIDInfo=Vn(),he.SimulcastInfo=Sn(),he.SimulcastStreamInfo=Cn(),he.DataChannelInfo=wn(),he.Direction=Gn()),he}var $e=eo(),Ut={exports:{}},to=Ut.exports,Ar;function no(){return Ar||(Ar=1,function(i,e){(function(t,n){var r="0.7.39",o="",c="?",a="function",g="undefined",d="object",u="string",I="major",F="model",m="name",f="type",y="vendor",x="version",v="architecture",L="console",A="mobile",U="tablet",b="smarttv",Q="wearable",B="embedded",R=500,w="Amazon",E="Apple",N="ASUS",K="BlackBerry",Y="Browser",ee="Chrome",J="Edge",D="Firefox",X="Google",T="Huawei",j="LG",O="Microsoft",k="Motorola",W="Opera",H="Samsung",M="Sharp",P="Sony",z="Xiaomi",ie="Zebra",ge="Facebook",ye="Chromium OS",Ve="Mac OS",Se=" Browser",dt=function(te,h){var s={};for(var l in te)h[l]&&h[l].length%2===0?s[l]=h[l].concat(te[l]):s[l]=te[l];return s},Ae=function(te){for(var h={},s=0;s<te.length;s++)h[te[s].toUpperCase()]=te[s];return h},je=function(te,h){return typeof te===u?Oe(h).indexOf(Oe(te))!==-1:!1},Oe=function(te){return te.toLowerCase()},ki=function(te){return typeof te===u?te.replace(/[^\d\.]/g,o).split(".")[0]:n},nt=function(te,h){if(typeof te===u)return te=te.replace(/^\s\s*/,o),typeof h===g?te:te.substring(0,R)},it=function(te,h){for(var s=0,l,p,C,S,Z,_;s<h.length&&!Z;){var le=h[s],se=h[s+1];for(l=p=0;l<le.length&&!Z&&le[l];)if(Z=le[l++].exec(te),Z)for(C=0;C<se.length;C++)_=Z[++p],S=se[C],typeof S===d&&S.length>0?S.length===2?typeof S[1]==a?this[S[0]]=S[1].call(this,_):this[S[0]]=S[1]:S.length===3?typeof S[1]===a&&!(S[1].exec&&S[1].test)?this[S[0]]=_?S[1].call(this,_,S[2]):n:this[S[0]]=_?_.replace(S[1],S[2]):n:S.length===4&&(this[S[0]]=_?S[3].call(this,_.replace(S[1],S[2])):n):this[S]=_||n;s+=2}},ut=function(te,h){for(var s in h)if(typeof h[s]===d&&h[s].length>0){for(var l=0;l<h[s].length;l++)if(je(h[s][l],te))return s===c?n:s}else if(je(h[s],te))return s===c?n:s;return h.hasOwnProperty("*")?h["*"]:te},sn={"1.0":"/8","1.2":"/1","1.3":"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"},rt={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2","8.1":"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},Ze={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[x,[m,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[x,[m,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[m,x],[/opios[\/ ]+([\w\.]+)/i],[x,[m,W+" Mini"]],[/\bop(?:rg)?x\/([\w\.]+)/i],[x,[m,W+" GX"]],[/\bopr\/([\w\.]+)/i],[x,[m,W]],[/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],[x,[m,"Baidu"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,/(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio)\/([-\w\.]+)/i,/(heytap|ovi)browser\/([\d\.]+)/i,/(weibo)__([\d\.]+)/i],[m,x],[/quark(?:pc)?\/([-\w\.]+)/i],[x,[m,"Quark"]],[/\bddg\/([\w\.]+)/i],[x,[m,"DuckDuckGo"]],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[x,[m,"UC"+Y]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i,/micromessenger\/([\w\.]+)/i],[x,[m,"WeChat"]],[/konqueror\/([\w\.]+)/i],[x,[m,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[x,[m,"IE"]],[/ya(?:search)?browser\/([\w\.]+)/i],[x,[m,"Yandex"]],[/slbrowser\/([\w\.]+)/i],[x,[m,"Smart Lenovo "+Y]],[/(avast|avg)\/([\w\.]+)/i],[[m,/(.+)/,"$1 Secure "+Y],x],[/\bfocus\/([\w\.]+)/i],[x,[m,D+" Focus"]],[/\bopt\/([\w\.]+)/i],[x,[m,W+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[x,[m,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[x,[m,"Dolphin"]],[/coast\/([\w\.]+)/i],[x,[m,W+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[x,[m,"MIUI "+Y]],[/fxios\/([-\w\.]+)/i],[x,[m,D]],[/\bqihu|(qi?ho?o?|360)browser/i],[[m,"360"+Se]],[/\b(qq)\/([\w\.]+)/i],[[m,/(.+)/,"$1Browser"],x],[/(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i],[[m,/(.+)/,"$1"+Se],x],[/samsungbrowser\/([\w\.]+)/i],[x,[m,H+" Internet"]],[/(comodo_dragon)\/([\w\.]+)/i],[[m,/_/g," "],x],[/metasr[\/ ]?([\d\.]+)/i],[x,[m,"Sogou Explorer"]],[/(sogou)mo\w+\/([\d\.]+)/i],[[m,"Sogou Mobile"],x],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i],[m,x],[/(lbbrowser|rekonq)/i,/\[(linkedin)app\]/i],[m],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[m,ge],x],[/(Klarna)\/([\w\.]+)/i,/(kakao(?:talk|story))[\/ ]([\w\.]+)/i,/(naver)\(.*?(\d+\.[\w\.]+).*\)/i,/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(alipay)client\/([\w\.]+)/i,/(twitter)(?:and| f.+e\/([\w\.]+))/i,/(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i],[m,x],[/\bgsa\/([\w\.]+) .*safari\//i],[x,[m,"GSA"]],[/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],[x,[m,"TikTok"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[x,[m,ee+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[m,ee+" WebView"],x],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[x,[m,"Android "+Y]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[m,x],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[x,[m,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[x,m],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[m,[x,ut,sn]],[/(webkit|khtml)\/([\w\.]+)/i],[m,x],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[m,"Netscape"],x],[/(wolvic)\/([\w\.]+)/i],[m,x],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[x,[m,D+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[m,[x,/_/g,"."]],[/(cobalt)\/([\w\.]+)/i],[m,[x,/master.|lts./,""]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[v,"amd64"]],[/(ia32(?=;))/i],[[v,Oe]],[/((?:i[346]|x)86)[;\)]/i],[[v,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[v,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[v,"armhf"]],[/windows (ce|mobile); ppc;/i],[[v,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[v,/ower/,o,Oe]],[/(sun4\w)[;\)]/i],[[v,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[v,Oe]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[F,[y,H],[f,U]],[/\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,/samsung[- ]((?!sm-[lr])[-\w]+)/i,/sec-(sgh\w+)/i],[F,[y,H],[f,A]],[/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],[F,[y,E],[f,A]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[F,[y,E],[f,U]],[/(macintosh);/i],[F,[y,E]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[F,[y,M],[f,A]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[F,[y,T],[f,U]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[F,[y,T],[f,A]],[/\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i],[[F,/_/g," "],[y,z],[f,A]],[/oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[F,/_/g," "],[y,z],[f,U]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[F,[y,"OPPO"],[f,A]],[/\b(opd2\d{3}a?) bui/i],[F,[y,"OPPO"],[f,U]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[F,[y,"Vivo"],[f,A]],[/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],[F,[y,"Realme"],[f,A]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[F,[y,k],[f,A]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[F,[y,k],[f,U]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[F,[y,j],[f,U]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[F,[y,j],[f,A]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[F,[y,"Lenovo"],[f,U]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[F,/_/g," "],[y,"Nokia"],[f,A]],[/(pixel c)\b/i],[F,[y,X],[f,U]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[F,[y,X],[f,A]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[F,[y,P],[f,A]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[F,"Xperia Tablet"],[y,P],[f,U]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[F,[y,"OnePlus"],[f,A]],[/(alexa)webm/i,/(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[F,[y,w],[f,U]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[F,/(.+)/g,"Fire Phone $1"],[y,w],[f,A]],[/(playbook);[-\w\),; ]+(rim)/i],[F,y,[f,U]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[F,[y,K],[f,A]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[F,[y,N],[f,U]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[F,[y,N],[f,A]],[/(nexus 9)/i],[F,[y,"HTC"],[f,U]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i],[y,[F,/_/g," "],[f,A]],[/droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i],[F,[y,"TCL"],[f,U]],[/(itel) ((\w+))/i],[[y,Oe],F,[f,ut,{tablet:["p10001l","w7001"],"*":"mobile"}]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[F,[y,"Acer"],[f,U]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[F,[y,"Meizu"],[f,A]],[/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],[F,[y,"Ulefone"],[f,A]],[/droid.+; (a(?:015|06[35]|142p?))/i],[F,[y,"Nothing"],[f,A]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[y,F,[f,A]],[/(kobo)\s(ereader|touch)/i,/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[y,F,[f,U]],[/(surface duo)/i],[F,[y,O],[f,U]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[F,[y,"Fairphone"],[f,A]],[/(u304aa)/i],[F,[y,"AT&T"],[f,A]],[/\bsie-(\w*)/i],[F,[y,"Siemens"],[f,A]],[/\b(rct\w+) b/i],[F,[y,"RCA"],[f,U]],[/\b(venue[\d ]{2,7}) b/i],[F,[y,"Dell"],[f,U]],[/\b(q(?:mv|ta)\w+) b/i],[F,[y,"Verizon"],[f,U]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[F,[y,"Barnes & Noble"],[f,U]],[/\b(tm\d{3}\w+) b/i],[F,[y,"NuVision"],[f,U]],[/\b(k88) b/i],[F,[y,"ZTE"],[f,U]],[/\b(nx\d{3}j) b/i],[F,[y,"ZTE"],[f,A]],[/\b(gen\d{3}) b.+49h/i],[F,[y,"Swiss"],[f,A]],[/\b(zur\d{3}) b/i],[F,[y,"Swiss"],[f,U]],[/\b((zeki)?tb.*\b) b/i],[F,[y,"Zeki"],[f,U]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[y,"Dragon Touch"],F,[f,U]],[/\b(ns-?\w{0,9}) b/i],[F,[y,"Insignia"],[f,U]],[/\b((nxa|next)-?\w{0,9}) b/i],[F,[y,"NextBook"],[f,U]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[y,"Voice"],F,[f,A]],[/\b(lvtel\-)?(v1[12]) b/i],[[y,"LvTel"],F,[f,A]],[/\b(ph-1) /i],[F,[y,"Essential"],[f,A]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[F,[y,"Envizen"],[f,U]],[/\b(trio[-\w\. ]+) b/i],[F,[y,"MachSpeed"],[f,U]],[/\btu_(1491) b/i],[F,[y,"Rotor"],[f,U]],[/(shield[\w ]+) b/i],[F,[y,"Nvidia"],[f,U]],[/(sprint) (\w+)/i],[y,F,[f,A]],[/(kin\.[onetw]{3})/i],[[F,/\./g," "],[y,O],[f,A]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[F,[y,ie],[f,U]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[F,[y,ie],[f,A]],[/smart-tv.+(samsung)/i],[y,[f,b]],[/hbbtv.+maple;(\d+)/i],[[F,/^/,"SmartTV"],[y,H],[f,b]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[y,j],[f,b]],[/(apple) ?tv/i],[y,[F,E+" TV"],[f,b]],[/crkey/i],[[F,ee+"cast"],[y,X],[f,b]],[/droid.+aft(\w+)( bui|\))/i],[F,[y,w],[f,b]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[F,[y,M],[f,b]],[/(bravia[\w ]+)( bui|\))/i],[F,[y,P],[f,b]],[/(mitv-\w{5}) bui/i],[F,[y,z],[f,b]],[/Hbbtv.*(technisat) (.*);/i],[y,F,[f,b]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i],[[y,nt],[F,nt],[f,b]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[f,b]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[y,F,[f,L]],[/droid.+; (shield) bui/i],[F,[y,"Nvidia"],[f,L]],[/(playstation [345portablevi]+)/i],[F,[y,P],[f,L]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[F,[y,O],[f,L]],[/\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i],[F,[y,H],[f,Q]],[/((pebble))app/i],[y,F,[f,Q]],[/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],[F,[y,E],[f,Q]],[/droid.+; (glass) \d/i],[F,[y,X],[f,Q]],[/droid.+; (wt63?0{2,3})\)/i],[F,[y,ie],[f,Q]],[/(quest( \d| pro)?)/i],[F,[y,ge],[f,Q]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[y,[f,B]],[/(aeobc)\b/i],[F,[y,w],[f,B]],[/droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i],[F,[f,A]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[F,[f,U]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[f,U]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[f,A]],[/(android[-\w\. ]{0,9});.+buil/i],[F,[y,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[x,[m,J+"HTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[x,[m,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i,/\b(libweb)/i],[m,x],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[x,m]],os:[[/microsoft (windows) (vista|xp)/i],[m,x],[/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],[m,[x,ut,rt]],[/windows nt 6\.2; (arm)/i,/windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,/(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[x,ut,rt],[m,"Windows"]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,/cfnetwork\/.+darwin/i],[[x,/_/g,"."],[m,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[m,Ve],[x,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[x,m],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[m,x],[/\(bb(10);/i],[x,[m,K]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[x,[m,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[x,[m,D+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[x,[m,"webOS"]],[/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],[x,[m,"watchOS"]],[/crkey\/([\d\.]+)/i],[x,[m,ee+"cast"]],[/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],[[m,ye],x],[/panasonic;(viera)/i,/(netrange)mmh/i,/(nettv)\/(\d+\.[\w\.]+)/i,/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[m,x],[/(sunos) ?([\w\.\d]*)/i],[[m,"Solaris"],x],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,/(unix) ?([\w\.]*)/i],[m,x]]},Qe=function(te,h){if(typeof te===d&&(h=te,te=n),!(this instanceof Qe))return new Qe(te,h).getResult();var s=typeof t!==g&&t.navigator?t.navigator:n,l=te||(s&&s.userAgent?s.userAgent:o),p=s&&s.userAgentData?s.userAgentData:n,C=h?dt(Ze,h):Ze,S=s&&s.userAgent==l;return this.getBrowser=function(){var Z={};return Z[m]=n,Z[x]=n,it.call(Z,l,C.browser),Z[I]=ki(Z[x]),S&&s&&s.brave&&typeof s.brave.isBrave==a&&(Z[m]="Brave"),Z},this.getCPU=function(){var Z={};return Z[v]=n,it.call(Z,l,C.cpu),Z},this.getDevice=function(){var Z={};return Z[y]=n,Z[F]=n,Z[f]=n,it.call(Z,l,C.device),S&&!Z[f]&&p&&p.mobile&&(Z[f]=A),S&&Z[F]=="Macintosh"&&s&&typeof s.standalone!==g&&s.maxTouchPoints&&s.maxTouchPoints>2&&(Z[F]="iPad",Z[f]=U),Z},this.getEngine=function(){var Z={};return Z[m]=n,Z[x]=n,it.call(Z,l,C.engine),Z},this.getOS=function(){var Z={};return Z[m]=n,Z[x]=n,it.call(Z,l,C.os),S&&!Z[m]&&p&&p.platform&&p.platform!="Unknown"&&(Z[m]=p.platform.replace(/chrome os/i,ye).replace(/macos/i,Ve)),Z},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return l},this.setUA=function(Z){return l=typeof Z===u&&Z.length>R?nt(Z,R):Z,this},this.setUA(l),this};Qe.VERSION=r,Qe.BROWSER=Ae([m,x,I]),Qe.CPU=Ae([v]),Qe.DEVICE=Ae([F,y,f,L,A,b,U,Q,B]),Qe.ENGINE=Qe.OS=Ae([m,x]),i.exports&&(e=i.exports=Qe),e.UAParser=Qe;var Ke=typeof t!==g&&(t.jQuery||t.Zepto);if(Ke&&!Ke.ua){var Ge=new Qe;Ke.ua=Ge.getResult(),Ke.ua.get=function(){return Ge.getUA()},Ke.ua.set=function(te){Ge.setUA(te);var h=Ge.getResult();for(var s in h)Ke.ua[s]=h[s]}}})(typeof window=="object"?window:to)}(Ut,Ut.exports)),Ut.exports}var io=no();const ro=gt(io),so=["iOS"];class It extends ro{constructor(){super(window.navigator.userAgent)}isChromium(){return this.getUA().match(/Chrome/i)}isChrome(){const e=this.getBrowser();if(!e.name)return!1;const t=this.getOS();let n=!0;return n=!new RegExp(so.join("|"),"i").test(t.name),e.name.match(/Chrome/i)&&n}isFirefox(){const e=this.getBrowser();return e.name?e.name.match(/Firefox/i):!1}isOpera(){const e=this.getBrowser();return e.name?e.name.match(/Opera/i):!1}isSafari(){const e=this.getBrowser();return e.name?e.name.match(/Safari/i):!1}}const de=Ne.get("SdpParser"),Nr=35,oo=65,Wr=96,ao=127,co=Array.from({length:oo-Nr+1},(i,e)=>e+Nr),lo=Array.from({length:ao-Wr+1},(i,e)=>e+Wr),kr=1,uo=14,Tr=16,go=255,ho=Array.from({length:uo-kr+1},(i,e)=>e+kr),fo=Array.from({length:go-Tr+1},(i,e)=>e+Tr),Ue={setSimulcast(i,e){if(de.info("Setting simulcast. Codec: ",e),!new It().isChromium())return de.warn("Your browser does not appear to support Simulcast. For a better experience, use a Chromium based browser."),i;if(e!=="h264"&&e!=="vp8")return de.warn(`Your selected codec ${e} does not appear to support Simulcast.  To broadcast using simulcast, please use H.264 or VP8.`),i;if(!/m=video/.test(i))return de.warn("There is no available video for simulcast to be enabled."),i;try{const n=/m=video.*?a=ssrc:(\d*) cname:(.+?)\r\n/s,r=/m=video.*?a=ssrc:(\d*) msid:(.+?)\r\n/s,o=n.exec(i),c=o[1],a=o[2],g=r.exec(i)[2],d=2,u=[c];for(let I=0;I<d;++I){const F=100+I*2,m=F+1;u.push(F),i+="a=ssrc-group:FID "+F+" "+m+`\r
a=ssrc:`+F+" cname:"+a+`\r
a=ssrc:`+F+" msid:"+g+`\r
a=ssrc:`+m+" cname:"+a+`\r
a=ssrc:`+m+" msid:"+g+`\r
`}return i+="a=ssrc-group:SIM "+u.join(" ")+`\r
`,de.info("Simulcast setted"),de.debug("Simulcast SDP: ",i),i}catch(n){throw de.error("Error setting SDP for simulcast: ",n),n}},setStereo(i){return de.info("Replacing SDP response for support stereo"),i=i.replace(/useinbandfec=1/g,"useinbandfec=1; stereo=1"),de.info("Replaced SDP response for support stereo"),de.debug("New SDP value: ",i),i},setDTX(i){return de.info("Replacing SDP response for support dtx"),i=i.replace("useinbandfec=1","useinbandfec=1; usedtx=1"),de.info("Replaced SDP response for support dtx"),de.debug("New SDP value: ",i),i},setAbsoluteCaptureTime(i){const t="a=extmap:"+Ue.getAvailableHeaderExtensionIdRange(i)[0]+` http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time\r
`,n=/(m=.*\r\n(?:.*\r\n)*?)(a=extmap.*\r\n)/gm;return i=i.replace(n,(r,o,c)=>o+t+c),de.info("Replaced SDP response for setting absolute capture time"),de.debug("New SDP value: ",i),i},setDependencyDescriptor(i){const t="a=extmap:"+Ue.getAvailableHeaderExtensionIdRange(i)[0]+` https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension\r
`,n=/(m=.*\r\n(?:.*\r\n)*?)(a=extmap.*\r\n)/gm;return i=i.replace(n,(r,o,c)=>o+t+c),de.info("Replaced SDP response for setting depency descriptor"),de.debug("New SDP value: ",i),i},setVideoBitrate(i,e){if(e<1)de.info("Remove bitrate restrictions"),i=i.replace(/b=AS:.*\r\n/,"").replace(/b=TIAS:.*\r\n/,"");else{const t=$e.SDPInfo.parse(i),n=t.getMedia("video");de.info("Setting video bitrate"),n.setBitrate(e),i=t.toString()}return i},removeSdpLine(i,e){return de.debug("SDP before trimming: ",i),i=i.split(`
`).filter(t=>t.trim()!==e).join(`
`),de.debug("SDP trimmed result: ",i),i},adaptCodecName(i,e,t){if(!i)return i;const n=new RegExp(`${e}`,"i");return i.replace(n,t)},setMultiopus(i,e){if(!new It().isFirefox()&&(!e||mo(e)))if(i.includes("multiopus/48000/6"))de.info("Multiopus already setted");else{de.info("Setting multiopus");const r=/m=audio 9 UDP\/TLS\/RTP\/SAVPF (.*)\r\n/.exec(i)[0],o=Ue.getAvailablePayloadTypeRange(i)[0],c=r.replace(`\r
`," ")+o+`\r
a=rtpmap:`+o+` multiopus/48000/6\r
a=fmtp:`+o+` channel_mapping=0,4,1,2,3,5;coupled_streams=2;minptime=10;num_streams=4;useinbandfec=1\r
`;i=i.replace(r,c),de.info("Multiopus offer created"),de.debug("SDP parsed for multioups: ",i)}return i},getAvailablePayloadTypeRange(i){const e=/m=(?:.*) (?:.*) UDP\/TLS\/RTP\/SAVPF (.*)\r\n/gm,t=i.matchAll(e);let n=lo.concat(co);for(const r of t){const o=r[1].split(" ").map(c=>parseInt(c));n=n.filter(c=>!o.includes(c))}return n},getAvailableHeaderExtensionIdRange(i){const e=/a=extmap:(\d+)(?:.*)\r\n/gm,t=i.matchAll(e);let n=ho.concat(fo);for(const r of t){const o=r[1].split(" ").map(c=>parseInt(c));n=n.filter(c=>!o.includes(c))}return n},renegotiate(i,e){const t=$e.SDPInfo.parse(i),n=$e.SDPInfo.parse(e);for(const r of t.getMedias()){let o=n.getMediaById(r.getId());if(!o){o=new $e.MediaInfo(r.getId(),r.getType()),o.setDirection($e.Direction.reverse(r.getDirection()));const c=n.getMedia(r.getType());if(c){o.setCodecs(c.getCodecs());for(const[a,g]of c.getExtensions())o.addExtension(a,g)}n.addMedia(o)}}return n.toString()},updateMissingVideoExtensions(i,e){var o;const t=$e.SDPInfo.parse(i),r=(o=$e.SDPInfo.parse(e).getMediasByType("video")[0])==null?void 0:o.getExtensions();if(!(!r&&!r.length)){for(const c of t.getMediasByType("video")){const a=c.getExtensions();r.forEach((g,d)=>{if(!a.get(d)){const u=c.getId(),I="a=extmap:"+d+" "+g+`\r
`,F=new RegExp("(a=mid:"+u+`\r
(?:.*\r
)*?)`,"g");i=i.replace(F,(m,f,y)=>f+I)}})}return i}},getCodecPayloadType(i){const e=/a=rtpmap:(\d+) (\w+)\/\d+/g,t=i.matchAll(e),n={};for(const r of t)n[r[1]]=r[2];return n}},mo=i=>i.getAudioTracks().some(e=>e.getSettings().channelCount>2),Re={VP8:"vp8",VP9:"vp9",H264:"h264",AV1:"av1",H265:"h265"},Fo={OPUS:"opus",MULTIOPUS:"multiopus"},po="d40e38ea-d419-4c62-94ed-20ac37b4e4fa",q=Ne.get("PeerConnection"),Jt={Publisher:"Publisher",Viewer:"Viewer"},Ce={track:"track",connectionStateChange:"connectionStateChange"},Dr={stereo:!1,mediaStream:null,codec:"h264",simulcast:!1,scalabilityMode:null,disableAudio:!1,disableVideo:!1,setSDPToPeer:!0};class Pe extends Lt{constructor(){super(),this.mode=null,this.sessionDescription=null,this.peer=null,this.peerConnectionStats=null,this.transceiverMap=new Map}async createRTCPeer(e={autoInitStats:!0,statsIntervalMs:1e3},t=Jt.Viewer){q.info("Creating new RTCPeerConnection"),q.debug("RTC configuration provided by user: ",e),this.peer=Io(this,e),this.mode=t,e.autoInitStats&&this.initStats(e)}getRTCPeer(){return q.info("Getting RTC Peer"),this.peer}async closeRTCPeer(){var e;q.info("Closing RTCPeerConnection"),(e=this.peer)==null||e.close(),this.peer=null,this.stopStats(),this.emit(Ce.connectionStateChange,"closed")}async setRTCRemoteSDP(e){q.info("Setting RTC Remote SDP");const t={type:"answer",sdp:e};try{await this.peer.setRemoteDescription(t),q.info("RTC Remote SDP was set successfully."),q.debug("RTC Remote SDP new value: ",e)}catch(n){throw q.error("Error while setting RTC Remote SDP: ",n),n}}async getRTCLocalSDP(e=Dr){q.info("Getting RTC Local SDP"),e={...Dr,...e},q.debug("Options: ",e);const t=Uo(e.mediaStream);t?yo(this.peer,t,e):Qo(this.peer,e),q.info("Creating peer offer");const n=await this.peer.createOffer();return q.info("Peer offer created"),q.debug("Peer offer response: ",n.sdp),this.sessionDescription=n,e.disableAudio||(e.stereo&&(this.sessionDescription.sdp=Ue.setStereo(this.sessionDescription.sdp)),e.dtx&&(this.sessionDescription.sdp=Ue.setDTX(this.sessionDescription.sdp)),this.sessionDescription.sdp=Ue.setMultiopus(this.sessionDescription.sdp,t)),!e.disableVideo&&e.simulcast&&(this.sessionDescription.sdp=Ue.setSimulcast(this.sessionDescription.sdp,e.codec)),e.absCaptureTime&&(this.sessionDescription.sdp=Ue.setAbsoluteCaptureTime(this.sessionDescription.sdp)),e.dependencyDescriptor&&(this.sessionDescription.sdp=Ue.setDependencyDescriptor(this.sessionDescription.sdp)),e.setSDPToPeer&&(await this.peer.setLocalDescription(this.sessionDescription),q.info("Peer local description set")),this.sessionDescription.sdp}async addRemoteTrack(e,t){return new Promise((n,r)=>{try{const o=this.peer.addTransceiver(e,{direction:"recvonly",streams:t});this.transceiverMap.set(o,n)}catch(o){r(o)}})}updateBandwidthRestriction(e,t){if(this.mode===Jt.Viewer)throw q.error("Viewer attempting to update bitrate, this is not allowed"),new Error("It is not possible for a viewer to update the bitrate.");return q.info("Updating bandwidth restriction, bitrate value: ",t),q.debug("SDP value: ",e),Ue.setVideoBitrate(e,t)}async updateBitrate(e=0){if(this.mode===Jt.Viewer)throw q.error("Viewer attempting to update bitrate, this is not allowed"),new Error("It is not possible for a viewer to update the bitrate.");if(!this.peer)throw q.error("Cannot update bitrate. No peer found."),new Error("Cannot update bitrate. No peer found.");q.info("Updating bitrate to value: ",e),this.sessionDescription=await this.peer.createOffer(),await this.peer.setLocalDescription(this.sessionDescription);const t=this.updateBandwidthRestriction(this.peer.remoteDescription.sdp,e);await this.setRTCRemoteSDP(t),q.info("Bitrate restrictions updated: ",`${e>0?e:"unlimited"} kbps`)}getRTCPeerStatus(){if(q.info("Getting RTC peer status"),!this.peer)return null;const e=xo(this.peer);return q.info("RTC peer status getted, value: ",e),e}replaceTrack(e){if(!this.peer){q.error("Could not change track if there is not an active connection.");return}const t=this.peer.getSenders().find(n=>n.track.kind===e.kind);t?t.replaceTrack(e):q.error(`There is no ${e.kind} track in active broadcast.`)}static getCapabilities(e){const t=new It,n=RTCRtpSender.getCapabilities(e);if(n){const r={};let o=new RegExp(`^video/(${Object.values(Re).join("|")})x?$`,"i");e==="audio"&&(o=new RegExp(`^audio/(${Object.values(Fo).join("|")})$`,"i"),t.isChrome()&&(r.multiopus={mimeType:"audio/multiopus",channels:6}));for(const c of n.codecs){const a=c.mimeType.match(o);if(a){const g=a[1].toLowerCase();if(r[g]={...r[g],mimeType:c.mimeType},c.scalabilityModes){let d=r[g].scalabilityModes||[];d=[...d,...c.scalabilityModes],r[g].scalabilityModes=[...new Set(d)]}c.channels&&(r[g].channels=c.channels)}}n.codecs=Object.keys(r).map(c=>({codec:c,...r[c]}))}return n}getTracks(){var e,t;return(t=(e=this.peer)==null?void 0:e.getSenders())==null?void 0:t.map(n=>n.track)}initStats(e){this.peerConnectionStats?q.warn("PeerConnection.initStats() has already been called. Automatic initialization occurs via View.connect(), Publish.connect() or this.createRTCPeer(). See options"):this.peer?(this.peerConnectionStats=new Js(this.peer,e),At(this.peerConnectionStats,this,[Oi.stats])):q.warn("Cannot init peer stats: RTCPeerConnection not initialized")}stopStats(){var e;(e=this.peerConnectionStats)==null||e.stop(),this.peerConnectionStats=null}}const Hr=i=>(i==null?void 0:i.getAudioTracks().length)<=1&&(i==null?void 0:i.getVideoTracks().length)<=1,Uo=i=>{if(!i)return null;if(i instanceof MediaStream&&Hr(i))return i;if(!(i instanceof MediaStream)){q.info("Creating MediaStream to add received tracks.");const e=new MediaStream;for(const t of i)e.addTrack(t);if(Hr(e))return e}throw q.error("MediaStream must have 1 audio track and 1 video track, or at least one of them."),new Error("MediaStream must have 1 audio track and 1 video track, or at least one of them.")},Io=(i,e)=>{const t=new RTCPeerConnection(e);return bo(i,t),t};async function Bo(i){return new Promise(e=>setTimeout(e,i))}const bo=(i,e)=>{e.ontrack=async t=>{q.info("New track from peer."),q.debug("Track event value: ",t);const n=i.transceiverMap.get(t.transceiver);if(n){for(;!t.transceiver.mid;)await Bo(100);n(t.transceiver),i.transceiverMap.delete(t.transceiver)}setTimeout(()=>{i.emit(Ce.track,t)},0)},e.connectionState?e.onconnectionstatechange=t=>{q.info("Peer connection state change: ",e.connectionState),i.emit(Ce.connectionStateChange,e.connectionState)}:e.oniceconnectionstatechange=t=>{q.info("Peer ICE connection state change: ",e.iceConnectionState),i.emit(Ce.connectionStateChange,e.iceConnectionState)},e.onnegotiationneeded=async t=>{if(!e.remoteDescription)return;q.info("Peer onnegotiationneeded, updating local description");const n=await e.createOffer();q.info("Peer onnegotiationneeded, got local offer",n.sdp),n.sdp=Ue.updateMissingVideoExtensions(n.sdp,e.remoteDescription.sdp),await e.setLocalDescription(n);const r=Ue.renegotiate(n.sdp,e.remoteDescription.sdp);q.info("Peer onnegotiationneeded, updating remote description",r),await e.setRemoteDescription({type:"answer",sdp:r}),q.info("Peer onnegotiationneeded, renegotiation done")}},yo=(i,e,t)=>{q.info("Adding mediaStream tracks to RTCPeerConnection");for(const n of e.getTracks()){const r={streams:[e]};n.kind==="audio"&&(r.direction=t.disableAudio?"inactive":"sendonly"),n.kind==="video"&&(r.direction=t.disableVideo?"inactive":"sendonly",t.scalabilityMode&&new It().isChrome()?(q.debug(`Video track with scalability mode: ${t.scalabilityMode}.`),r.sendEncodings=[{scalabilityMode:t.scalabilityMode}]):t.scalabilityMode&&q.warn("SVC is only supported in Google Chrome")),i.addTransceiver(n,r),q.info(`Track '${n.label}' added: `,`id: ${n.id}`,`kind: ${n.kind}`)}},Qo=(i,e)=>{const t=new It;if(!e.disableVideo){const n=i.addTransceiver("video",{direction:"recvonly"});t.isOpera()&&n.setCodecPreferences(RTCRtpReceiver.getCapabilities("video").codecs.filter(r=>r.mimeType!=="video/H264"||r.sdpFmtpLine.includes("profile-level-id=4")))}e.disableAudio||i.addTransceiver("audio",{direction:"recvonly"});for(let n=0;n<e.multiplexedAudioTracks;n++)i.addTransceiver("audio",{direction:"recvonly"})},xo=i=>{const e=i.connectionState??i.iceConnectionState;switch(e){case"checking":return"connecting";case"completed":return"connected";default:return e}};var Yt={},Jr;function Vo(){return Jr||(Jr=1,Object.defineProperty(Yt,"__esModule",{value:!0}),Yt.TypedEmitter=on().EventEmitter),Yt}var Yn,Yr;function Ro(){if(Yr)return Yn;Yr=1;const{TypedEmitter:i}=Vo();class e extends i{constructor(r,o){super(),this.namespace=r,this.tm=o}cmd(r,o){return this.tm.cmd(r,o,this.namespace)}event(r,o){return this.tm.event(r,o,this.namespace)}close(){return this.tm.namespaces.delete(this.namespace)}}class t extends i{constructor(r){super(),this.maxId=0,this.namespaces=new Map,this.transactions=new Map,this.transport=r,this.listener=o=>{let c;try{c=JSON.parse(o.utf8Data||o.data||o)}catch{return}switch(c.type){case"cmd":const{transId:g}=c,d={name:c.name,data:c.data,namespace:c.namespace,accept:I=>{this._send({type:"response",transId:g,data:I})},reject:I=>{this._send({type:"error",transId:g,data:I})}};if(d.namespace){const I=this.namespaces.get(d.namespace);I?I.emit("cmd",d):this.emit("cmd",d)}else this.emit("cmd",d);break;case"response":{const I=this.transactions.get(c.transId);if(!I)return;this.transactions.delete(c.transId),I.resolve(c.data);break}case"error":{const I=this.transactions.get(c.transId);if(!I)return;this.transactions.delete(c.transId),I.reject(c.data);break}case"event":const u={name:c.name,data:c.data,namespace:c.namespace};if(u.namespace){var a=this.namespaces.get(u.namespace);a?a.emit("event",u):this.emit("event",u)}else this.emit("event",u);break}},this.transport.addListener?this.transport.addListener("message",this.listener):this.transport.addEventListener("message",this.listener)}_send(r){this.transport.send(JSON.stringify(r))}cmd(r,o,c=void 0){return new Promise((a,g)=>{if(!r||r.length===0)throw new Error("Bad command name");const d={type:"cmd",transId:this.maxId++,name:r,data:o};c&&(d.namespace=c),this.transactions.set(d.transId,{...d,resolve:a,reject:g});try{this._send(d)}catch(u){throw this.transactions.delete(d.transId),u}})}event(r,o,c=void 0){if(!r||r.length===0)throw new Error("Bad event name");const a={type:"event",name:r,data:o};c&&(a.namespace=c),this._send(a)}namespace(r){let o=this.namespaces.get(r);return o||(o=new e(r,this),this.namespaces.set(r,o),o)}close(){for(const r of this.namespaces.values())r.close();this.transport.removeListener?this.transport.removeListener("message",this.listener):this.transport.removeEventListener("message",this.listener)}}return Yn=t,Yn}var Co=Ro();const Eo=gt(Co),ue=Ne.get("Signaling"),ke={connectionSuccess:"wsConnectionSuccess",connectionError:"wsConnectionError",connectionClose:"wsConnectionClose",broadcastEvent:"broadcastEvent"};class Mn extends Lt{constructor(e={streamName:null,url:"ws://localhost:8080/"}){super(),this.streamName=e.streamName,this.wsUrl=e.url,this.webSocket=null,this.transactionManager=null,this.serverId=null,this.clusterId=null,this.streamViewId=null}async connect(){var e;return ue.info("Connecting to Signaling Server"),this.transactionManager&&((e=this.webSocket)==null?void 0:e.readyState)===WebSocket.OPEN?(ue.info("Connected to server: ",this.webSocket.url),ue.debug("WebSocket value: ",{url:this.webSocket.url,protocol:this.webSocket.protocol,readyState:this.webSocket.readyState,binaryType:this.webSocket.binaryType,extensions:this.webSocket.extensions}),this.emit(ke.connectionSuccess,{ws:this.webSocket,tm:this.transactionManager}),this.webSocket):new Promise((t,n)=>{this.webSocket=new WebSocket(this.wsUrl),this.transactionManager=new Eo(this.webSocket),this.webSocket.onopen=()=>{ue.info("WebSocket opened"),this.transactionManager.on("event",r=>{this.emit(ke.broadcastEvent,r)}),ue.info("Connected to server: ",this.webSocket.url),ue.debug("WebSocket value: ",{url:this.webSocket.url,protocol:this.webSocket.protocol,readyState:this.webSocket.readyState,binaryType:this.webSocket.binaryType,extensions:this.webSocket.extensions}),this.emit(ke.connectionSuccess,{ws:this.webSocket,tm:this.transactionManager}),t(this.webSocket)},this.webSocket.onerror=()=>{ue.error("WebSocket not connected: ",this.webSocket.url),this.emit(ke.connectionError,this.webSocket.url),n(this.webSocket.url)},this.webSocket.onclose=()=>{this.webSocket=null,this.transactionManager=null,ue.info("Connection closed with Signaling Server."),this.emit(ke.connectionClose)}})}close(){var e;ue.info("Closing connection with Signaling Server."),(e=this.webSocket)==null||e.close()}async subscribe(e,t,n=null,r=null){var g,d,u,I;ue.info("Starting subscription to streamName: ",this.streamName),ue.debug("Subcription local description: ",e);const o=So(t,n,r);e=Ue.adaptCodecName(e,"AV1X",Re.AV1);const c=["active","inactive","layers","viewercount","vad","updated","migrate","stopped"],a={sdp:e,streamId:this.streamName,pinnedSourceId:o.pinnedSourceId,excludedSourceIds:o.excludedSourceIds,events:c};o.vad&&(a.vad=!0),Array.isArray(o.events)&&(a.events=o.events),o.forcePlayoutDelay&&(a.forcePlayoutDelay=o.forcePlayoutDelay),o.layer&&(a.layer=o.layer),o.abrConfiguration&&(a.abrConfiguration=t.abrConfiguration),o.customKeys&&(a.customKeys=o.customKeys),o.forceSmooth&&(a.abrConfiguration={...a.abrConfiguration||{},forceSmooth:o.forceSmooth});try{if(o.disableVideo&&o.disableAudio)throw new Error("Not attempting to connect as video and audio are disabled");await this.connect(),ue.info("Sending view command",a);const F=await this.transactionManager.cmd("view",a),m=(I=(u=(d=(g=RTCRtpReceiver.getCapabilities)==null?void 0:g.call(RTCRtpReceiver,"video"))==null?void 0:d.codecs)==null?void 0:u.find)==null?void 0:I.call(u,f=>f.mimeType==="video/AV1X");return F.sdp=m?Ue.adaptCodecName(F.sdp,Re.AV1,"AV1X"):F.sdp,ue.info("Command sent, subscriberId: ",F.subscriberId),ue.debug("Command result: ",F),this.serverId=F.subscriberId,this.clusterId=F.clusterId,this.streamViewId=F.streamViewId,xe.initStreamName(this.streamName),xe.initSubscriberId(this.serverId),xe.initStreamViewId(F.streamViewId),xe.setClusterId(this.clusterId),F.sdp}catch(F){throw ue.error("Error sending view command, error: ",F),F}}async publish(e,t,n=null,r=null){var d,u,I,F,m,f,y;const o=Zo(t,n,r);ue.info(`Starting publishing to streamName: ${this.streamName}, codec: ${o.codec}`),ue.debug("Publishing local description: ",e);const c=((I=(u=(d=Pe.getCapabilities)==null?void 0:d.call(Pe,"video"))==null?void 0:u.codecs)==null?void 0:I.map(x=>x.codec))??[],a=Object.values(Re);if(a.indexOf(o.codec)===-1)throw ue.error(`Invalid codec ${o.codec}. Possible values are: `,a),new Error(`Invalid codec ${o.codec}. Possible values are: ${a}`);if(c.length>0&&c.indexOf(o.codec)===-1)throw ue.error(`Unsupported codec ${o.codec}. Possible values are: `,c),new Error(`Unsupported codec ${o.codec}. Possible values are: ${c}`);o.codec===Re.AV1&&(e=Ue.adaptCodecName(e,"AV1X",Re.AV1));const g={name:this.streamName,sdp:e,codec:o.codec,sourceId:o.sourceId};if(o.priority)if(Number.isInteger(o.priority)&&o.priority>=-2147483648&&o.priority<=2147483647)g.priority=o.priority;else throw new Error("Invalid value for priority option. It should be a decimal integer between the range [-2^31, +2^31 - 1]");o.record!==null&&(g.record=o.record),Array.isArray(o.events)&&(g.events=o.events);try{if(o.disableVideo&&o.disableAudio)throw new Error("Not attempting to connect as video and audio are disabled");await this.connect(),ue.info("Sending publish command");const x=await this.transactionManager.cmd("publish",g);if(o.codec===Re.AV1){const v=(y=(f=(m=(F=RTCRtpSender.getCapabilities)==null?void 0:F.call(RTCRtpSender,"video"))==null?void 0:m.codecs)==null?void 0:f.find)==null?void 0:y.call(f,L=>L.mimeType==="video/AV1X");x.sdp=v?Ue.adaptCodecName(x.sdp,Re.AV1,"AV1X"):x.sdp}return ue.info("Command sent, publisherId: ",x.publisherId),ue.debug("Command result: ",x),this.serverId=x.publisherId,this.clusterId=x.clusterId,xe.initStreamName(this.streamName),xe.initSubscriberId(this.serverId),xe.initFeedId(x.feedId),xe.setClusterId(this.clusterId),x.sdp}catch(x){throw ue.error("Error sending publish command, error: ",x),x}}async cmd(e,t){return ue.info(`Sending cmd: ${e}`),this.transactionManager.cmd(e,t)}}const So=(i,e,t)=>{let n=typeof i=="object"?i:{};return Object.keys(n).length===0&&(n={vad:i,pinnedSourceId:e,excludedSourceIds:t}),n},Zo=(i,e,t)=>{let n=typeof i=="object"?i:{};if(Object.keys(n).length===0){const r=Re.H264;n={codec:i??r,record:e,sourceId:t}}return n};class Mt extends Error{constructor(e,t){super(e),this.name="FetchError",this.status=t}}const at=Ne.get("Director"),Go={WEBRTC:"WebRtc"};let Mr="",Pr="https://director.millicast.com";const De={setEndpoint:i=>{Pr=i.replace(/\/$/,"")},getEndpoint:()=>Pr,setLiveDomain:i=>{Mr=i.replace(/\/$/,"")},getLiveDomain:()=>Mr,getPublisher:async(i,e=null,t=Go.WEBRTC)=>{const n=vo(i,e,t);at.info("Getting publisher connection path for stream name: ",n.streamName);const r={streamName:n.streamName,streamType:n.streamType},o={"Content-Type":"application/json",Authorization:`Bearer ${n.token}`},c=`${De.getEndpoint()}/api/director/publish`;try{const a=await fetch(c,{method:"POST",headers:o,body:JSON.stringify(r)});let g=await a.json();if(g.status==="fail")throw new Mt(g.data.message,a.status);return g=zr(g),at.debug("Getting publisher response: ",g),xe.initAccountId(g.data.streamAccountId),g.data}catch(a){throw at.error("Error while getting publisher connection path. ",a),a}},getSubscriber:async(i,e=null,t=null)=>{const n=wo(i,e,t);xe.initAccountId(n.streamAccountId),at.info(`Getting subscriber connection data for stream name: ${n.streamName} and account id: ${n.streamAccountId}`);const r={streamAccountId:n.streamAccountId,streamName:n.streamName};let o={"Content-Type":"application/json"};n.subscriberToken&&(o={...o,Authorization:`Bearer ${n.subscriberToken}`});const c=`${De.getEndpoint()}/api/director/subscribe`;try{const a=await fetch(c,{method:"POST",headers:o,body:JSON.stringify(r)});let g=await a.json();if(g.status==="fail")throw new Mt(g.data.message,a.status);return g=zr(g),at.debug("Getting subscriber response: ",g),n.subscriberToken&&(g.data.subscriberToken=n.subscriberToken),g.data}catch(a){throw at.error("Error while getting subscriber connection path. ",a),a}}},vo=(i,e,t)=>{let n=typeof i=="object"?i:{};return Object.keys(n).length===0&&(n={token:i,streamName:e,streamType:t}),n},wo=(i,e,t)=>{let n=typeof i=="object"?i:{};return Object.keys(n).length===0&&(n={streamName:i,streamAccountId:e,subscriberToken:t}),n},zr=i=>{if(De.getLiveDomain()){const e=/\/\/(.*?)\//,t=i.data.urls.map(n=>{const r=e.exec(n);return n.replace(r[1],De.getLiveDomain())});i.data.urls=t}if(i.data.drmObject){const e=i.data.drmObject.playReadyUrl;e&&(i.data.drmObject.playReadyUrl=`${De.getEndpoint()}${e}`);const t=i.data.drmObject.widevineUrl;t&&(i.data.drmObject.widevineUrl=`${De.getEndpoint()}${t}`);const n=i.data.drmObject.fairPlayUrl;n&&(i.data.drmObject.fairPlayUrl=`${De.getEndpoint()}${n}`);const r=i.data.drmObject.fairPlayCertUrl;r&&(i.data.drmObject.fairPlayCertUrl=`${De.getEndpoint()}${r}`)}return i};function Pn(i){this.message=i}Pn.prototype=new Error,Pn.prototype.name="InvalidCharacterError";var jr=typeof window<"u"&&window.atob&&window.atob.bind(window)||function(i){var e=String(i).replace(/=+$/,"");if(e.length%4==1)throw new Pn("'atob' failed: The string to be decoded is not correctly encoded.");for(var t,n,r=0,o=0,c="";n=e.charAt(o++);~n&&(t=r%4?64*t+n:n,r++%4)?c+=String.fromCharCode(255&t>>(-2*r&6)):0)n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(n);return c};function Lo(i){var e=i.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw"Illegal base64url string!"}try{return function(t){return decodeURIComponent(jr(t).replace(/(.)/g,function(n,r){var o=r.charCodeAt(0).toString(16).toUpperCase();return o.length<2&&(o="0"+o),"%"+o}))}(e)}catch{return jr(e)}}function Pt(i){this.message=i}function Or(i,e){if(typeof i!="string")throw new Pt("Invalid token specified");var t=(e=e||{}).header===!0?0:1;try{return JSON.parse(Lo(i.split(".")[t]))}catch(n){throw new Pt("Invalid token specified: "+n.message)}}Pt.prototype=new Error,Pt.prototype.name="InvalidTokenError";var zt={exports:{}},Kr;function Xo(){return Kr||(Kr=1,function(i,e){(function(t){if(e!=null&&typeof e.nodeType!="number")i.exports=t();else{var n=t(),r=typeof self<"u"?self:$.global;typeof r.btoa!="function"&&(r.btoa=n.btoa),typeof r.atob!="function"&&(r.atob=n.atob)}})(function(){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function n(c){this.message=c}n.prototype=new Error,n.prototype.name="InvalidCharacterError";function r(c){for(var a=String(c),g,d,u,I,F=0,m="";F<a.length;){if(g=a.charCodeAt(F++),d=a.charCodeAt(F++),u=a.charCodeAt(F++),g>255||d>255||u>255)throw new n("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");I=g<<16|d<<8|u,m+=t.charAt(I>>18&63)+t.charAt(I>>12&63)+t.charAt(I>>6&63)+t.charAt(I&63)}switch(a.length%3){case 0:return m;case 1:return m.slice(0,-2)+"==";case 2:return m.slice(0,-1)+"="}}function o(c){var a=String(c).replace(/[=]+$/,"");if(a.length%4===1)throw new n("'atob' failed: The string to be decoded is not correctly encoded.");for(var g=0,d,u,I=0,F="";u=a.charAt(I++);~u&&(d=g%4?d*64+u:u,g++%4)?F+=String.fromCharCode(255&d>>(-2*g&6)):0)u=t.indexOf(u);return F}return{btoa:r,atob:o}})}(zt,zt.exports)),zt.exports}var Ao=Xo(),He;function _r(i){return{lang:(i==null?void 0:i.lang)??(He==null?void 0:He.lang),message:i==null?void 0:i.message,abortEarly:(i==null?void 0:i.abortEarly)??(He==null?void 0:He.abortEarly),abortPipeEarly:(i==null?void 0:i.abortPipeEarly)??(He==null?void 0:He.abortPipeEarly)}}var zn;function No(i){return zn==null?void 0:zn.get(i)}var jn;function Wo(i){return jn==null?void 0:jn.get(i)}var On;function ko(i,e){var t;return(t=On==null?void 0:On.get(i))==null?void 0:t.get(e)}function qr(i){var t,n;const e=typeof i;return e==="string"?`"${i}"`:e==="number"||e==="bigint"||e==="boolean"?`${i}`:e==="object"||e==="function"?(i&&((n=(t=Object.getPrototypeOf(i))==null?void 0:t.constructor)==null?void 0:n.name))??"null":e}function Je(i,e,t,n,r){const o=r&&"input"in r?r.input:t.value,c=(r==null?void 0:r.expected)??i.expects??null,a=(r==null?void 0:r.received)??qr(o),g={kind:i.kind,type:i.type,input:o,expected:c,received:a,message:`Invalid ${e}: ${c?`Expected ${c} but r`:"R"}eceived ${a}`,requirement:i.requirement,path:r==null?void 0:r.path,issues:r==null?void 0:r.issues,lang:n.lang,abortEarly:n.abortEarly,abortPipeEarly:n.abortPipeEarly},d=i.kind==="schema",u=(r==null?void 0:r.message)??i.message??ko(i.reference,g.lang)??(d?Wo(g.lang):null)??n.message??No(g.lang);u!==void 0&&(g.message=typeof u=="function"?u(g):u),d&&(t.typed=!1),t.issues?t.issues.push(g):t.issues=[g]}function Ye(i){return{version:1,vendor:"valibot",validate(e){return i["~run"]({value:e},_r())}}}function To(i,e){return Object.hasOwn(i,e)&&e!=="__proto__"&&e!=="prototype"&&e!=="constructor"}function $r(i,e){const t=[...new Set(i)];return t.length>1?`(${t.join(` ${e} `)})`:t[0]??"never"}var Do=class extends Error{constructor(i){super(i[0].message),this.name="ValiError",this.issues=i}};function Ho(i,e,t){return typeof i.fallback=="function"?i.fallback(e,t):i.fallback}function es(i,e,t){return typeof i.default=="function"?i.default(e,t):i.default}function Kn(i,e){return{kind:"schema",type:"array",reference:Kn,expects:"Array",async:!1,item:i,message:e,get"~standard"(){return Ye(this)},"~run"(t,n){var o;const r=t.value;if(Array.isArray(r)){t.typed=!0,t.value=[];for(let c=0;c<r.length;c++){const a=r[c],g=this.item["~run"]({value:a},n);if(g.issues){const d={type:"array",origin:"value",input:r,key:c,value:a};for(const u of g.issues)u.path?u.path.unshift(d):u.path=[d],(o=t.issues)==null||o.push(u);if(t.issues||(t.issues=g.issues),n.abortEarly){t.typed=!1;break}}g.typed||(t.typed=!1),t.value.push(g.value)}}else Je(this,"type",t,n);return t}}}function Le(i){return{kind:"schema",type:"boolean",reference:Le,expects:"boolean",async:!1,message:i,get"~standard"(){return Ye(this)},"~run"(e,t){return typeof e.value=="boolean"?e.typed=!0:Je(this,"type",e,t),e}}}function _n(i,e){return{kind:"schema",type:"loose_object",reference:_n,expects:"Object",async:!1,entries:i,message:e,get"~standard"(){return Ye(this)},"~run"(t,n){var o;const r=t.value;if(r&&typeof r=="object"){t.typed=!0,t.value={};for(const c in this.entries){const a=this.entries[c];if(c in r||(a.type==="exact_optional"||a.type==="optional"||a.type==="nullish")&&a.default!==void 0){const g=c in r?r[c]:es(a),d=a["~run"]({value:g},n);if(d.issues){const u={type:"object",origin:"value",input:r,key:c,value:g};for(const I of d.issues)I.path?I.path.unshift(u):I.path=[u],(o=t.issues)==null||o.push(I);if(t.issues||(t.issues=d.issues),n.abortEarly){t.typed=!1;break}}d.typed||(t.typed=!1),t.value[c]=d.value}else if(a.fallback!==void 0)t.value[c]=Ho(a);else if(a.type!=="exact_optional"&&a.type!=="optional"&&a.type!=="nullish"&&(Je(this,"key",t,n,{input:void 0,expected:`"${c}"`,path:[{type:"object",origin:"key",input:r,key:c,value:r[c]}]}),n.abortEarly))break}if(!t.issues||!n.abortEarly)for(const c in r)To(r,c)&&!(c in this.entries)&&(t.value[c]=r[c])}else Je(this,"type",t,n);return t}}}function Fe(i,e){return{kind:"schema",type:"nullish",reference:Fe,expects:`(${i.expects} | null | undefined)`,async:!1,wrapped:i,default:e,get"~standard"(){return Ye(this)},"~run"(t,n){return(t.value===null||t.value===void 0)&&(this.default!==void 0&&(t.value=es(this,t,n)),t.value===null||t.value===void 0)?(t.typed=!0,t):this.wrapped["~run"](t,n)}}}function jt(i){return{kind:"schema",type:"number",reference:jt,expects:"number",async:!1,message:i,get"~standard"(){return Ye(this)},"~run"(e,t){return typeof e.value=="number"&&!isNaN(e.value)?e.typed=!0:Je(this,"type",e,t),e}}}function qn(i,e){return{kind:"schema",type:"picklist",reference:qn,expects:$r(i.map(qr),"|"),async:!1,options:i,message:e,get"~standard"(){return Ye(this)},"~run"(t,n){return this.options.includes(t.value)?t.typed=!0:Je(this,"type",t,n),t}}}function $n(i){return{kind:"schema",type:"string",reference:$n,expects:"string",async:!1,message:i,get"~standard"(){return Ye(this)},"~run"(e,t){return typeof e.value=="string"?e.typed=!0:Je(this,"type",e,t),e}}}function ts(i){let e;if(i)for(const t of i)e?e.push(...t.issues):e=t.issues;return e}function ns(i,e){return{kind:"schema",type:"union",reference:ns,expects:$r(i.map(t=>t.expects),"|"),async:!1,options:i,message:e,get"~standard"(){return Ye(this)},"~run"(t,n){let r,o,c;for(const a of this.options){const g=a["~run"]({value:t.value},n);if(g.typed)if(g.issues)o?o.push(g):o=[g];else{r=g;break}else c?c.push(g):c=[g]}if(r)return r;if(o){if(o.length===1)return o[0];Je(this,"type",t,n,{issues:ts(o)}),t.typed=!0}else{if((c==null?void 0:c.length)===1)return c[0];Je(this,"type",t,n,{issues:ts(c)})}return t}}}function ei(){return{kind:"schema",type:"unknown",reference:ei,expects:"unknown",async:!1,get"~standard"(){return Ye(this)},"~run"(i){return i.typed=!0,i}}}function Jo(i,e,t){const n=i["~run"]({value:e},_r(t));return{typed:n.typed,success:!n.issues,output:n.value,issues:n.issues}}let ct;const Yo=32e3,is=1e3;class rs extends Lt{constructor(e,t,n,r){if(super(),ct=n,!t)throw ct.error("Token generator is required to construct this module."),new Error("Token generator is required to construct this module.");this.webRTCPeer=new Pe,this.signaling=null,this.autoReconnect=r,this.reconnectionInterval=is,this.alreadyDisconnected=!1,this.firstReconnection=!0,this.stopReconnection=!1,this.isReconnecting=!1,this.tokenGenerator=t,this.options=null}getRTCPeerConnection(){return this.webRTCPeer?this.webRTCPeer.getRTCPeer():null}stop(){var e;ct.info("Stopping"),this.webRTCPeer.closeRTCPeer(),(e=this.signaling)==null||e.close(),this.signaling=null,this.stopReconnection=!0,this.webRTCPeer=new Pe}isActive(){const e=this.webRTCPeer.getRTCPeerStatus();return ct.info("Broadcast status: ",e||"not_established"),e==="connected"}setReconnect(){this.signaling.on("migrate",()=>this.replaceConnection()),this.autoReconnect&&(this.signaling.on(ke.connectionError,()=>{(this.firstReconnection||!this.alreadyDisconnected)&&(this.firstReconnection=!1,this.reconnect({error:new Error("Signaling error: wsConnectionError")}))}),this.webRTCPeer.on(Ce.connectionStateChange,e=>{xe.setConnectionState(e),e==="connected"&&xe.setConnectionTime(new Date),(e==="failed"||e==="disconnected"&&this.alreadyDisconnected)&&this.firstReconnection?(this.firstReconnection=!1,this.reconnect({error:new Error("Connection state change: RTCPeerConnectionState disconnected")})):e==="disconnected"?(this.alreadyDisconnected=!0,setTimeout(()=>this.reconnect({error:new Error("Connection state change: RTCPeerConnectionState disconnected")}),1500)):this.alreadyDisconnected=!1}))}async reconnect(e){try{ct.info("Attempting to reconnect..."),!this.isActive()&&!this.stopReconnection&&!this.isReconnecting&&(this.stop(),this.emit("reconnect",{timeout:ss(this.reconnectionInterval),error:e!=null&&e.error?e==null?void 0:e.error:new Error("Attempting to reconnect")}),this.isReconnecting=!0,await this.connect(this.options),this.alreadyDisconnected=!1,this.reconnectionInterval=is,this.firstReconnection=!0,this.isReconnecting=!1)}catch(t){this.isReconnecting=!1,this.reconnectionInterval=ss(this.reconnectionInterval),ct.error(`Reconnection failed, retrying in ${this.reconnectionInterval}ms. `,t),setTimeout(()=>this.reconnect({error:t}),this.reconnectionInterval)}}}const ss=i=>i<Yo?i*2:i,ti=window.RTCRtpSender&&!!RTCRtpSender.prototype.createEncodedStreams&&window.RTCRtpReceiver&&!!RTCRtpReceiver.prototype.createEncodedStreams,os="RTCRtpScriptTransform"in window,as=`(function(){"use strict";function W(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var x={exports:{}};/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */var z=x.exports,A;function q(){return A||(A=1,function(t){(function(n){var e={};e.VERSION="1.6.1";var i,r={},o=function(s,c){return function(){return c.apply(s,arguments)}},a=function(){var s=arguments,c=s[0],_,l;for(l=1;l<s.length;l++)for(_ in s[l])!(_ in c)&&s[l].hasOwnProperty(_)&&(c[_]=s[l][_]);return c},f=function(s,c){return{value:s,name:c}};e.TRACE=f(1,"TRACE"),e.DEBUG=f(2,"DEBUG"),e.INFO=f(3,"INFO"),e.TIME=f(4,"TIME"),e.WARN=f(5,"WARN"),e.ERROR=f(8,"ERROR"),e.OFF=f(99,"OFF");var d=function(s){this.context=s,this.setLevel(s.filterLevel),this.log=this.info};d.prototype={setLevel:function(s){s&&"value"in s&&(this.context.filterLevel=s)},getLevel:function(){return this.context.filterLevel},enabledFor:function(s){var c=this.context.filterLevel;return s.value>=c.value},trace:function(){this.invoke(e.TRACE,arguments)},debug:function(){this.invoke(e.DEBUG,arguments)},info:function(){this.invoke(e.INFO,arguments)},warn:function(){this.invoke(e.WARN,arguments)},error:function(){this.invoke(e.ERROR,arguments)},time:function(s){typeof s=="string"&&s.length>0&&this.invoke(e.TIME,[s,"start"])},timeEnd:function(s){typeof s=="string"&&s.length>0&&this.invoke(e.TIME,[s,"end"])},invoke:function(s,c){i&&this.enabledFor(s)&&i(c,a({level:s},this.context))}};var u=new d({filterLevel:e.OFF});(function(){var s=e;s.enabledFor=o(u,u.enabledFor),s.trace=o(u,u.trace),s.debug=o(u,u.debug),s.time=o(u,u.time),s.timeEnd=o(u,u.timeEnd),s.info=o(u,u.info),s.warn=o(u,u.warn),s.error=o(u,u.error),s.log=s.info})(),e.setHandler=function(s){i=s},e.setLevel=function(s){u.setLevel(s);for(var c in r)r.hasOwnProperty(c)&&r[c].setLevel(s)},e.getLevel=function(){return u.getLevel()},e.get=function(s){return r[s]||(r[s]=new d(a({name:s},u.context)))},e.createDefaultHandler=function(s){s=s||{},s.formatter=s.formatter||function(p,g){g.name&&p.unshift("["+g.name+"]")};var c={},_=function(l,p){Function.prototype.apply.call(l,console,p)};return typeof console>"u"?function(){}:function(l,p){l=Array.prototype.slice.call(l);var g=console.log,m;p.level===e.TIME?(m=(p.name?"["+p.name+"] ":"")+l[0],l[1]==="start"?console.time?console.time(m):c[m]=new Date().getTime():console.timeEnd?console.timeEnd(m):_(g,[m+": "+(new Date().getTime()-c[m])+"ms"])):(p.level===e.WARN&&console.warn?g=console.warn:p.level===e.ERROR&&console.error?g=console.error:p.level===e.INFO&&console.info?g=console.info:p.level===e.DEBUG&&console.debug?g=console.debug:p.level===e.TRACE&&console.trace&&(g=console.trace),s.formatter(l,p),_(g,l))}},e.useDefaults=function(s){e.setLevel(s&&s.defaultLevel||e.DEBUG),e.setHandler(e.createDefaultHandler(s))},e.setDefaults=e.useDefaults,t.exports?t.exports=e:(e._prevLogger=n.Logger,e.noConflict=function(){return n.Logger=e._prevLogger,e},n.Logger=e)})(z)}(x)),x.exports}var V=q(),B=W(V);class U{constructor(n){this.data=n,this.bitOffset=0}readBits(n){if(this.bitOffset+n>this.data.length*8)throw new Error("Attempted to read past the end of the bitstream");let e=0;for(let i=0;i<n;i++){const r=Math.floor(this.bitOffset/8),o=7-this.bitOffset%8,a=this.data[r]>>o&1;e|=a<<n-1-i,this.bitOffset++}return e}skip(n){this.bitOffset+=n}readExpGolombUnsigned(){let n=-1;for(let e=0;e===0;n++)e=this.readBits(1);return(1<<n)-1+this.readBits(n)}readExpGolombSigned(){const n=this.readExpGolombUnsigned();return n%2===0?-(n/2):(n+1)/2}}const h={SLICE_NON_IDR:1,SLICE_PARTITION_A:2,SLICE_IDR:5,SEI_H264:6,SEI_H265_PREFIX:39,SEI_H265_SUFFIX:40,SPS_H264:7,SPS_H265:33,PPS_H264:8,PPS_H265:34},D={PIC_TIMING:1,USER_DATA_UNREGISTERED:5},E={LEGACY:1,NEW:2,TIMECODE:3,OTHER:4},j="6e9cfd2a-5907-49ff-b363-8978a6e8340e",Y="9a21f3be-31f0-4b78-b0be-c7f7dbb97250",L="d40e38ea-d419-4c62-94ed-20ac37b4e4fa";class X{constructor(n="H264"){this.sps=new Map,this.pps=new Map,this.activeSPS=null,this.codec=n}collectPPS(n){this.codec==="H264"?this.collectH264PPS(n):this.collectH265PPS(n)}collectSPS(n){this.codec==="H264"?this.collectH264SPS(n):this.collectH265SPS(n)}collectH264SPS(n){const e=new U(n),i=e.readBits(8),r=[100,110,122,244,44,83,86,118,128,138,139,134,135];e.skip(8),e.skip(8);const o=e.readExpGolombUnsigned();if(o>31||o<0)throw new Error("Invalid seq_parameter_set_id");if(r.includes(i)){const d=e.readExpGolombUnsigned();if(d===3&&e.skip(1),e.readExpGolombUnsigned(),e.readExpGolombUnsigned(),e.skip(1),e.readBits(1)){const s=d!==3?8:12;for(let c=0;c<s;c++)if(e.readBits(1)){const _=c<6?16:64;let l=8,p=8;for(let g=0;g<_;g++){if(p!==0){const m=e.readExpGolombSigned();p=(l+m+256)%256}l=p===0?l:p}}}}e.readExpGolombUnsigned();const a=e.readExpGolombUnsigned();if(a===0)e.readExpGolombUnsigned();else if(a===1){e.skip(1),e.readExpGolombSigned(),e.readExpGolombSigned();const d=e.readExpGolombUnsigned();for(let u=0;u<d;u++)e.readExpGolombSigned()}e.readExpGolombUnsigned(),e.skip(1),e.readExpGolombUnsigned(),e.readExpGolombUnsigned(),e.readBits(1)===0&&e.skip(1),e.skip(1),e.readBits(1)&&(e.readExpGolombUnsigned(),e.readExpGolombUnsigned(),e.readExpGolombUnsigned(),e.readExpGolombUnsigned());let f;if(e.readBits(1)){let u=function(l){const p=l.readExpGolombUnsigned();l.skip(4),l.skip(4);for(let F=0;F<=p;F++)l.readExpGolombUnsigned(),l.readExpGolombUnsigned(),l.skip(1);l.skip(5);const g=l.readBits(5),m=l.readBits(5),de=l.readBits(5);return{cpb_removal_delay_length_minus1:g,dpb_output_delay_length_minus1:m,time_offset_length:de}};e.readBits(1)&&e.readBits(8)===255&&(e.skip(16),e.skip(16)),e.readBits(1)&&e.skip(1),e.readBits(1)&&(e.skip(3),e.skip(1),e.readBits(1)&&e.skip(24)),e.readBits(1)&&(e.readExpGolombUnsigned(),e.readExpGolombUnsigned());const d=e.readBits(1)?{num_units_in_tick:e.readBits(32),time_scale:e.readBits(32),fixed_frame_rate_flag:e.readBits(1)}:void 0,s=e.readBits(1)?u(e):void 0,c=e.readBits(1)?u(e):void 0;(s||c)&&e.skip(1);const _=e.readBits(1);f={timing_info:d,nal_hrd_parameters:s,vcl_hrd_parameters:c,pic_struct_present_flag:_}}this.sps.set(o,{vui_parameters:f})}collectH265SPS(n){}collectH264PPS(n){const e=new U(n),i=e.readExpGolombUnsigned();if(i>255||i<0)throw new Error("Invalid pic_parameter_set_id");const r=e.readExpGolombUnsigned();this.pps.set(i,{seq_parameter_set_id:r})}collectH265PPS(n){}findActiveSPS(n){const e=new U(n);e.readExpGolombUnsigned(),e.readExpGolombUnsigned();const i=e.readExpGolombUnsigned(),r=this.pps.get(i);if(r){const o=this.sps.get(r.seq_parameter_set_id);if(o){this.activeSPS=o;return}}throw new Error("Cannot find the active SPS")}}const S=new X;function R(t,n){for(;n<t.byteLength-4;){if(t[n]===0&&t[n+1]===0&&(t[n+2]===1||t[n+2]===0&&t[n+3]===1))return n;n+=1}return-1}function w(t){const n=new Uint8Array(t.byteLength);let e=0,i=0;for(let r=2;r<t.byteLength;r++)t[r]===3&&t[r-1]===0&&t[r-2]===0&&(n.set(t.subarray(i,r),e),e+=r-i,i=r+1);return i<t.byteLength&&n.set(t.subarray(i),e),n}function $(t,n){let e=0;const i=n==="H264"?1:2,r=[];for(;e<t.byteLength-4;){const o=R(t,e);if(o>=e){const a=t[o+2]===1?3:4,f=R(t,o+a+i);if(f>o)r.push(t.subarray(o,f)),e=f;else{r.push(t.subarray(o));break}}else break}return r}function J(t,n){let e=!0;return $(t,n).filter(i=>{const r=i[2]===1?3:4,o=n==="H264"?1:2,a=i[r],f=n==="H264"?a&31:a>>1&63;if(e)switch(f){case h.PPS_H264:case h.PPS_H265:S.collectPPS(w(i.subarray(r+o)));break;case h.SPS_H264:case h.SPS_H265:S.collectSPS(w(i.subarray(r+o)));break;case h.SLICE_IDR:case h.SLICE_NON_IDR:case h.SLICE_PARTITION_A:try{S.findActiveSPS(w(i.subarray(r+o))),e=!1}catch{console.info("Failed to find active SPS. Will not be able to extract PIC timing metadata")}break}return[h.SEI_H264,h.SEI_H265_PREFIX,h.SEI_H265_SUFFIX].includes(f)})}function K(t){let n=0,e=0;for(;t[e]===255;)n+=255,e++;n+=t[e],e++;let i=0;for(;t[e]===255;)i+=255,e++;return i+=t[e],e++,{type:n,content:t.subarray(e,e+i)}}function Z(t){const n=new Uint8Array(T(Y)),e=new Uint8Array(T(j)),i=new Uint8Array(T(L));return n.every((r,o)=>r===t[o])?E.TIMECODE:e.every((r,o)=>r===t[o])?E.LEGACY:i.every((r,o)=>r===t[o])?E.NEW:E.OTHER}function Q(t,n){let e=0;t.uuid=n.subarray(e,e+16),e+=16;const i=Z(t.uuid),r=n.subarray(e);switch(i){case E.LEGACY:case E.OTHER:t.unregistered=r;break;case E.TIMECODE:t.timecode=G(r);break;case E.NEW:{let o=0;const a=O(Date.now()).length,f=r.subarray(o,a);o+=a;const d=r.subarray(o);t.timecode=G(f),t.unregistered=d;break}}}function G(t){const n=t.reduce((o,a)=>(o<<BigInt(8))+BigInt(a),BigInt(0)),e=Number(n),i=new Date(e);return new TextEncoder().encode(i.toISOString())}function ee(t,n){if(!S.activeSPS){console.warn("Cannot find the active SPS");return}const e=S.activeSPS.vui_parameters.nal_hrd_parameters??S.activeSPS.vui_parameters.vcl_hrd_parameters,i={cpb_dpb_delays_present_flag:e?1:0,cpb_removal_delay_length_minus1:(e==null?void 0:e.cpb_removal_delay_length_minus1)??23,dpb_output_delay_length_minus1:(e==null?void 0:e.dpb_output_delay_length_minus1)??23,time_offset_length:e?e.time_offset_length??24:void 0,pic_struct_present_flag:S.activeSPS.vui_parameters.pic_struct_present_flag??0};if(!i.pic_struct_present_flag){console.warn("pic_struct_present_flag is not present");return}const r=new U(n);i.cpb_dpb_delays_present_flag&&(r.skip(i.cpb_removal_delay_length_minus1+1),r.skip(i.dpb_output_delay_length_minus1+1));const o=[1,1,1,2,2,3,3,2,3],a=r.readBits(4);if(a>=o.length)throw new Error("Invalid pic_struct");const f=o[a],d=[];for(let u=0;u<f;u++)if(r.readBits(1)){const c={};r.skip(2),r.skip(1),r.skip(5);const _=r.readBits(1);if(r.skip(2),c.n_frames=r.readBits(8),_?(c.seconds_value=r.readBits(6),c.minutes_value=r.readBits(6),c.hours_value=r.readBits(5)):r.readBits(1)&&(c.seconds_value=r.readBits(6),r.readBits(1)&&(c.minutes_value=r.readBits(6),r.readBits(1)&&(c.hours_value=r.readBits(5)))),i.time_offset_length)try{c.time_offset=r.readBits(i.time_offset_length)}catch(l){console.error("Failed to read time_offset",l),c.time_offset=0}else c.time_offset=0;d.push(c)}t.seiPicTimingTimeCodeArray=d}function te(t,n){if(n!=="H264"&&n!=="H265")throw new Error(\`Unsupported codec \${n}\`);const e={};return S.codec=n,J(new Uint8Array(t.data),n).forEach(i=>{const r=i[2]===1?3:4,o=n==="H264"?1:2,a=w(i.subarray(r+o)),f=K(a);switch(f.type){case D.PIC_TIMING:ee(e,f.content);break;case D.USER_DATA_UNREGISTERED:Q(e,f.content);break}}),e}function ne(t){return/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(t)}function T(t){return t.replace(/-/g,"").match(/.{1,2}/g).map(n=>parseInt(n,16))}function re(t,n,e){const i=new Uint8Array(T(t)),r=O(e),o=new TextEncoder().encode(JSON.stringify(n)),a=new Uint8Array(i.length+r.length+o.length);return a.set(i),a.set(r,i.length),a.set(o,r.length+i.length),a}function ie(t){const n=[],e=Math.floor(t.byteLength/255),i=t.byteLength%255;for(let r=0;r<e;r++)n.push(255);return n.push(i),new Uint8Array([5,...n])}function se(t){const n=[];for(let e=0;e<t.byteLength;e++)e+2<t.byteLength&&[0,1,2,3].includes(t[e+2])&&t[e]===0&&t[e+1]===0?(n.push(t[e]),n.push(t[e+1]),e+=2,n.push(3)):n.push(t[e]);return n.push(128),new Uint8Array(n)}function O(t){const n=[];if(!isNaN(t)){const e=BigInt(t);for(let i=0;i<Math.ceil(Math.floor(Math.log2(new Number(t))+1)/8);i++)n.unshift(new Number(e>>BigInt(8*i)&BigInt(255)))}return new Uint8Array(n)}function oe({uuid:t,payload:n,timecode:e}){const i=[0,0,0,1],r=[102],o=re(t,n,e),a=ie(o),f=se(o),d=new Uint8Array(i.length+r.length+a.length+f.length);return d.set(i),d.set(r,i.length),d.set(a,i.length+r.length),d.set(f,i.length+r.length+a.length),d}function ae({uuid:t,payload:n,timecode:e},i){if(t===""||n==="")throw new Error("uuid and payload cannot be empty");ne(t)||(console.warn("Invalid UUID. Using default UUID."),t=L,e=Date.now());const r=oe({uuid:t,payload:n,timecode:e}),o=new DataView(i.data),a=new ArrayBuffer(i.data.byteLength+r.byteLength),f=new DataView(a);for(let d=0;d<i.data.byteLength;d++)f.setUint8(d,o.getUint8(d));for(let d=0;d<r.byteLength;d++)f.setUint8(i.data.byteLength+d,r[d]);i.data=a}B.get("TransformWorker").setLevel(B.DEBUG);const ce=2e3,b=[];let y="",P={};const v={};let I=[];function C(t){return new TransformStream({start(){},flush(){},async transform(n,e){var i,r;if(H(n)){const o=((i=P[n.getMetadata().payloadType])==null?void 0:i.toUpperCase())||(y==null?void 0:y.toUpperCase());if(o==="H264"){const a=te(n,o);(a.timecode||a.unregistered||((r=a.seiPicTimingTimeCodeArray)==null?void 0:r.length)>0)&&self.postMessage({event:"metadata",mid:t,metadata:a})}self.postMessage({event:"complete",frame:{type:n.type,timestamp:n.timestamp,data:n.data}})}e.enqueue(n)}})}function H(t){if(typeof RTCEncodedVideoFrame<"u")try{if(t instanceof RTCEncodedVideoFrame)return!0}catch{}return!!(t.constructor&&t.constructor.name==="RTCEncodedVideoFrame"||typeof t.width=="number"&&typeof t.height=="number"||t.type==="video")}function M(){Object.keys(v).sort().join()===I.sort().join()&&(b.shift(),I=[])}function le(t){const n=new Date().getTime();v[t]=n,Object.keys(v).filter(i=>n-v[i]>ce).forEach(i=>{delete v[i],delete I[i]}),M()}function N(){return new TransformStream({start(){},flush(){},async transform(t,n){if(H(t)){const i=t.getMetadata().synchronizationSource;if(le(i),!I.includes(i)&&b.length)try{if(!/(h26[4])/.test(y))throw new Error("Sending metadata is not supported with any other codec other than H.264");b[0].uuid===L&&(b[0].timecode=Date.now()),ae(b[0],t),I.push(i)}catch(r){console.error(r)}finally{M()}}n.enqueue(t)}})}function k({readable:t,writable:n},e){t.pipeThrough(e).pipeTo(n)}addEventListener("rtctransform",t=>{let n;if(t.transformer.options.name==="senderTransform")y=t.transformer.options.codec,n=N();else if(t.transformer.options.name==="receiverTransform")P=t.transformer.options.payloadTypeCodec||{},y=t.transformer.options.codec||"",n=C(t.transformer.options.mid);else return;k(t.transformer,n)}),addEventListener("message",t=>{const{action:n}=t.data;switch(n){case"insertable-streams-sender":y=t.data.codec,k(t.data,N());break;case"insertable-streams-receiver":P=t.data.payloadTypeCodec||{},y=t.data.codec||"",k(t.data,C(t.data.mid));break;case"metadata-sei-user-data-unregistered":b.push({uuid:t.data.uuid,payload:t.data.payload});break}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
`,cs=typeof self<"u"&&self.Blob&&new Blob([as],{type:"text/javascript;charset=utf-8"});function ni(i){let e;try{if(e=cs&&(self.URL||self.webkitURL).createObjectURL(cs),!e)throw"";const t=new Worker(e,{name:i==null?void 0:i.name});return t.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(e)}),t}catch{return new Worker("data:text/javascript;charset=utf-8,"+encodeURIComponent(as),{name:i==null?void 0:i.name})}finally{e&&(self.URL||self.webkitURL).revokeObjectURL(e)}}const Be=Ne.get("Publish"),ii={mediaStream:null,bandwidth:0,metadata:!1,disableVideo:!1,disableAudio:!1,codec:Re.H264,simulcast:!1,scalabilityMode:null,peerConfig:{autoInitStats:!0,statsIntervalMs:1e3}};class Mo extends rs{constructor(e,t,n=!0){e&&Be.warn("The streamName property has been deprecated. In a future release, this will be removed. Please do not rely on this value. Instead, set via token generator"),super(null,t,Be,n)}async connect(e=ii){Po(e),this.options={...ii,...e,peerConfig:{...ii.peerConfig,...e.peerConfig},setSDPToPeer:!1},this.options.metadata=this.options.metadata&&this.options.codec===Re.H264&&!this.options.disableVideo,await this.initConnection({migrate:!1})}async reconnect(e){var t;this.options.mediaStream=((t=this.webRTCPeer)==null?void 0:t.getTracks())??this.options.mediaStream,super.reconnect(e)}async replaceConnection(){var e;Be.info("Migrating current connection"),this.options.mediaStream=((e=this.webRTCPeer)==null?void 0:e.getTracks())??this.options.mediaStream,await this.initConnection({migrate:!0})}async record(){var e;this.recordingAvailable?(this.options.record=!0,await((e=this.signaling)==null?void 0:e.cmd("record")),Be.info("Broadcaster start recording")):Be.error("Record not available")}async unrecord(){var e;this.recordingAvailable?(this.options.record=!1,await((e=this.signaling)==null?void 0:e.cmd("unrecord")),Be.info("Broadcaster stop recording")):Be.error("Unrecord not available")}stop(){var e;super.stop(),(e=this.worker)==null||e.terminate(),this.worker=null}async initConnection(e){var y,x;Be.debug("Broadcast option values: ",this.options),this.stopReconnection=!1;let t;if(!this.options.mediaStream)throw Be.error("Error while broadcasting. MediaStream required"),new Error("MediaStream required");if(!e.migrate&&this.isActive())throw Be.warn("Broadcast currently working"),new Error("Broadcast currently working");let n;try{n=await this.tokenGenerator(),this.options.peerConfig.iceServers=n==null?void 0:n.iceServers,this.options.peerConfig.encodedInsertableStreams=this.options.metadata}catch(v){throw Be.error("Error generating token."),v instanceof Mt&&(v.status===401||!this.autoReconnect?this.stopReconnection=!0:this.reconnect()),v}if(!n)throw Be.error("Error while broadcasting. Publisher data required"),new Error("Publisher data required");const r=Or(n.jwt);if(this.streamName=r.millicast.streamName,this.recordingAvailable=r[Ao.atob("bWlsbGljYXN0")].record,this.options.record&&!this.recordingAvailable)throw Be.error("Error while broadcasting. Record option detected but recording is not available"),new Error("Record option detected but recording is not available");const o=new Mn({streamName:this.streamName,url:`${n.urls[0]}?token=${n.jwt}`}),c=e.migrate?new Pe:this.webRTCPeer;await c.createRTCPeer(this.options.peerConfig,Jt.Publisher),(y=this.stopReemitingWebRTCPeerInstanceEvents)==null||y.call(this),(x=this.stopReemitingSignalingInstanceEvents)==null||x.call(this),this.stopReemitingWebRTCPeerInstanceEvents=At(c,this,[Ce.connectionStateChange]),this.stopReemitingSignalingInstanceEvents=At(o,this,[ke.broadcastEvent]);const a=c.getRTCLocalSDP(this.options),g=o.connect();t=await Promise.all([a,g]);const d=t[0];this.options.metadata&&(this.worker||(this.worker=new ni),this.getRTCPeerConnection().getSenders().forEach(L=>{if(os)L.transform=new RTCRtpScriptTransform(this.worker,{name:"senderTransform",codec:this.options.codec});else if(ti){const{readable:A,writable:U}=L.createEncodedStreams();this.worker.postMessage({action:"insertable-streams-sender",codec:this.options.codec,readable:A,writable:U},[A,U])}}));let u=this.signaling;this.signaling=o;const I=this.signaling.publish(d,this.options),F=c.peer.setLocalDescription(c.sessionDescription);t=await Promise.all([I,F]);let m=t[0];!this.options.disableVideo&&this.options.bandwidth>0&&(m=c.updateBandwidthRestriction(m,this.options.bandwidth)),await c.setRTCRemoteSDP(m),Be.info("Broadcasting to streamName: ",this.streamName);let f=this.webRTCPeer;this.webRTCPeer=c,this.setReconnect(),e.migrate&&this.webRTCPeer.on(Ce.connectionStateChange,v=>{var L,A;["connected","disconnected","failed","closed"].includes(v)&&((L=u==null?void 0:u.close)==null||L.call(u),(A=f==null?void 0:f.closeRTCPeer)==null||A.call(f),u=f=null)})}sendMetadata(e,t=po){var n;if((n=this.options)!=null&&n.metadata&&this.worker)this.worker.postMessage({action:"metadata-sei-user-data-unregistered",uuid:t,payload:e});else{let r="Could not send metadata due to:";this.options?this.options.metadata?this.worker||(r+=`
- Stream not being published.`):(r+=`
- Metadata option is not enabled.`,this.options.codec!==Re.H264&&(r+=`
- Incompatible codec. Only H264 available.`),this.options.disableVideo&&(r+=`
- Video disabled.`)):r+=`
- Stream not being published.`,Be.warn(r)}}}let ri;const Po=i=>{ri=ri||_n({sourceId:Fe($n()),stereo:Fe(Le()),dtx:Fe(Le()),absCaptureTime:Fe(Le()),dependencyDescriptor:Fe(Le()),mediaStream:Fe(ns([Kn(ei()),ei()])),bandwidth:Fe(jt()),metadata:Fe(Le()),disableVideo:Fe(Le()),disableAudio:Fe(Le()),codec:Fe(qn(Object.values(Re))),simulcast:Fe(Le()),scalabilityMode:Fe($n()),peerConfig:Fe(_n({autoInitStats:Fe(Le()),statsIntervalMs:Fe(jt())})),record:Fe(Le()),events:Fe(Kn(qn(["active","inactive","viewercount"]))),priority:Fe(jt())});const{success:e,issues:t}=Jo(ri,i);e||Be.warn(new Do(t),i)};function ls(i){if(!i)return new Uint8Array;const e=i.length,t=new Uint8Array(e/2);for(let n=0;n<e;n+=2)t[n/2]=parseInt(i.substr(n,2),16);return t}function ds(i,e,t){if(Object.prototype.hasOwnProperty.call(i,t)&&Object.prototype.hasOwnProperty.call(e,t)){const n=i[t];i[t]=e[t],e[t]=n}else console.error(`One or both objects do not have the property "${t}"`)}function si(i,e,t,n){return new(t||(t=Promise))(function(r,o){function c(d){try{g(n.next(d))}catch(u){o(u)}}function a(d){try{g(n.throw(d))}catch(u){o(u)}}function g(d){var u;d.done?r(d.value):(u=d.value,u instanceof t?u:new t(function(I){I(u)})).then(c,a)}g((n=n.apply(i,e||[])).next())})}const Te=ai;var oi;function ai(i,e){const t=ui();return(ai=function(n,r){return t[n-=440]})(i,e)}(function(){const i=ai,e=ui();for(;;)try{if(-parseInt(i(447))/1+parseInt(i(445))/2+parseInt(i(449))/3*(parseInt(i(454))/4)+parseInt(i(453))/5+-parseInt(i(456))/6+parseInt(i(450))/7+-parseInt(i(441))/8*(-parseInt(i(455))/9)===847340)break;e.push(e.shift())}catch{e.push(e.shift())}})();const ci=navigator&&navigator[Te(448)]||"",zo=navigator&&navigator[Te(443)]||"",jo=!!(window!=null&&window.RTCRtpScriptTransform),Ot=ci.includes("Firefox"),li=!Ot&&zo.includes("Apple"),us=!Ot&&!li&&ci[Te(440)](Te(451)),Oo=!Ot&&!li&&!us&&ci[Te(440)](Te(446)),di=((oi=navigator==null?void 0:navigator[Te(442)])===null||oi===void 0?void 0:oi[Te(452)])||(navigator==null?void 0:navigator[Te(452)])||"";function ui(){const i=["1583117AOxBcs","userAgent","153Sdjzsk","5371359GvUFPp","Edg","platform","7141470dfeDnP","10068LWEgOs","243621EPkoPw","8310150fEFCnA","includes","328VMcnkw","userAgentData","vendor","Win32","763310RGZQro","Chrome"];return(ui=function(){return i})()}const Me={supportsRtpScriptTransform:jo,isFirefox:Ot,isSafari:li,isEdge:us,isChrome:Oo,platform:di,isWindows:di==="Windows"||di===Te(444)},Ee=Kt;function Kt(i,e){const t=gi();return(Kt=function(n,r){return t[n-=300]})(i,e)}(function(){const i=Kt,e=gi();for(;;)try{if(-parseInt(i(327))/1+parseInt(i(304))/2*(parseInt(i(300))/3)+-parseInt(i(332))/4*(parseInt(i(316))/5)+-parseInt(i(322))/6*(parseInt(i(311))/7)+parseInt(i(308))/8*(-parseInt(i(307))/9)+parseInt(i(314))/10*(parseInt(i(302))/11)+parseInt(i(329))/12===997665)break;e.push(e.shift())}catch{e.push(e.shift())}})();class Ko{constructor(e){this[Kt(310)]=e}[Ee(323)](...e){const t=Ee;ve[t(319)]>=4&&console[t(323)](this[t(310)],...e)}[Ee(331)](...e){const t=Ee;ve[t(319)]>=3&&console[t(331)](this[t(310)],...e)}[Ee(320)](...e){const t=Ee;ve[t(319)]>=2&&console[t(320)](this[t(310)],...e)}error(...e){ve[Ee(319)]>=1&&console.error(this.tag,...e)}}function _t(i){return new Ko(i)}const ve={logLevel:3,mediaDumps:{video:{in:{durationMs:0,delimited:!0},out:{durationMs:0}},audio:{in:{durationMs:0},out:{durationMs:0}}}};function qt(){return new Date()[Ee(317)]().slice(11,-1)}function gi(){const i=["mediaBuffer","click","529321KfbOwo","endTimestampMs","28972188cmcnxe","containerFileExt","info","4ZlZeJQ","9kyfNFe","mediaType","172953TzXwsI","byteLength","1327806tybvjI","href","createObjectURL","1089qysnCz","112088WLFXHK","substring","tag","692993ZcAeLj","set","download","810qiScYX","startTimestampMs","8821555KArxhe","toISOString","application/octet-stream","logLevel","warn","revokeObjectURL","42PDuKrJ","debug","targetDurationMs"];return(gi=function(){return i})()}class hi{constructor(e,t,n){const r=Ee;this[r(325)]=null,this[r(315)]=-1,this.endTimestampMs=-1,this[r(301)]=e,this[r(330)]=t,this[r(324)]=n,n>0&&(this[r(325)]=new Uint8Array)}append(e,t){const n=Ee;if(!this[n(325)])return!1;if(this[n(325)]=function(r,o){const c=Ee,a=new Uint8Array((0|r[c(303)])+(0|o.byteLength));return a[c(312)](r,0),a[c(312)](o,0|r.byteLength),a}(this[n(325)],e),t!==void 0){if(this[n(315)]===-1)this.startTimestampMs=t,this[n(328)]=t+this[n(324)];else if(t>=this[n(328)]){const r=new Date()[n(317)]()[n(309)](0,19).replace(/:/g,"-"),o=this.mediaType+"-"+r+"."+this.containerFileExt;return function(c,a,g=Ee(318)){const d=Ee,u=document.createElement("a"),I=new Blob([c],{type:g});u.href=URL[d(306)](I),u[d(313)]=a,u[d(326)](),URL[d(321)](u[d(305)])}(this[n(325)],o),this.mediaBuffer=null,!1}}return!0}}const V=fi;(function(){const i=fi,e=pi();for(;;)try{if(parseInt(i(160))/1+-parseInt(i(363))/2+-parseInt(i(321))/3*(-parseInt(i(401))/4)+parseInt(i(229))/5+-parseInt(i(276))/6+parseInt(i(400))/7*(-parseInt(i(153))/8)+-parseInt(i(223))/9===858456)break;e.push(e.shift())}catch{e.push(e.shift())}})();const pe=_t("[MUX]"),_o=Me[V(387)];function gs(i,e){const t=V;let n=new Uint8Array((0|i[t(413)])+(0|e[t(413)]));return n.set(i,0),n[t(251)](e,0|i[t(413)]),n}const qo=(i,e,t,n)=>{const r=V,o=n[r(425)]||1;e*=o,t*=o;const c=(d=i)instanceof ArrayBuffer?d:d[V(366)],a=(i[r(188)]||0)+i[r(413)],g=(i[r(188)]||0)+e;var d;let u=Math[r(177)](0,Math[r(291)](g,a)),I=Math[r(291)](u+Math[r(177)](t,0),a);return u/=o,I/=o,new n(c,u,I-u)};function fi(i,e){const t=pi();return(fi=function(n,r){return t[n-=147]})(i,e)}function mi(i,e=0,t=1/0){return qo(i,e,t,Uint8Array)}function hs(i){const e=V,t=Array.from(i)[e(238)](n=>n[e(384)](0));return new Uint8Array(t)}function $o(i){const e=function(t){const n=V;let r="";for(let o=0;o<t[n(268)];o+=16e3){const c=t.subarray(o,o+16e3);r+=String[n(358)].apply(null,c)}return r}(mi(i));return btoa(e)}class ae{static get[V(449)](){return 1}static get[V(427)](){return 5}static get SEI(){return 6}static get[V(324)](){return 7}static get[V(379)](){return 8}static get[V(272)](){return 9}static get[V(159)](){const e=V;return{[ae[e(427)]]:e(427),[ae[e(273)]]:e(273),[ae[e(324)]]:e(324),[ae.PPS]:"PPS",[ae[e(449)]]:"NDR",[ae.AUD]:e(272)}}static[V(234)](e){const t=V;return e[t(186)]in ae[t(159)]?ae[t(159)][e.ntype]:t(344)}constructor(e){const t=V;this[t(452)]=e,this[t(402)]=(96&this[t(452)][0])>>5,this[t(186)]=31&this[t(452)][0],this.isvcl=this[t(186)]==1||this[t(186)]==5,this[t(309)]="",this.isfmb=!1}[V(365)](){const e=V;return ae[e(234)](this)+": NRI: "+this[e(209)]()}[V(209)](){return this[V(402)]}[V(234)](){return this[V(186)]}[V(306)](){return this[V(186)]===ae.IDR}[V(203)](){return this[V(452)]}[V(327)](){return this[V(452)].byteLength}[V(194)](){return 4+this[V(327)]()}[V(341)](){const e=V,t=new Uint8Array(this[e(194)]());return new DataView(t[e(366)]).setUint32(0,this[e(194)]()-4),t[e(251)](this.getPayload(),4),t}}class fs{constructor(e){const t=V;this[t(316)]=e,this[t(368)]=0,this[t(157)]=8*e.byteLength}[V(433)](e){const t=V;this.data=e,this[t(368)]=0,this.bitLength=8*e[t(413)]}get[V(451)](){return this[V(157)]-this.index}skipBits(e){const t=V;if(this[t(451)]<e)return!1;this[t(368)]+=e}[V(338)](e,t=!0){const n=V;return this[n(259)](e,this[n(368)],t)}getBits(e,t,n=!0){const r=V;if(this[r(451)]<e)return 0;const o=t%8,c=this.data[t/8|0]&255>>>o,a=8-o;if(a>=e)return n&&(this[r(368)]+=e),c>>a-e;{n&&(this[r(368)]+=a);const g=e-a;return c<<g|this[r(259)](g,t+a,n)}}[V(444)](){const e=V;let t;for(t=0;t<this[e(157)]-this[e(368)];++t)if(this[e(259)](1,this[e(368)]+t,!1)!==0)return this[e(368)]+=t,t;return t}[V(334)](){const e=V;this[e(155)](1+this[e(444)]())}skipEG(){const e=V;this[e(155)](1+this[e(444)]())}[V(179)](){const e=V,t=this.skipLZ();return this[e(338)](t+1)-1}[V(248)](){const e=this[V(179)]();return 1&e?1+e>>>1:-1*(e>>>1)}[V(239)](){return this[V(338)](1)===1}[V(419)](e=1){return this.readBits(8*e)}[V(232)](){return this.readBits(16)}readUInt(){return this[V(338)](32)}}class et{static[V(267)](e,t){const n=V;let r=[],o=!1,c=!1,a=!1,g=!1,d=0,u=0,I=0,F=[];for(;d<=e.byteLength;){if(d<e.byteLength){const y=e[d++];y!==0?(y===1&&u>1&&(I=u>2?4:3,F.push(d)),u=0):++u}else I=0,F.push(d++);if(F.length>1){const y=F.shift(),x=F[0]-I;if(y<x){let v=!1;const L=31&e[y];if(L===ae.NDR?c=!0:L===ae.IDR?o=!0:L===ae.SPS?(v=a,a=!0):L===ae.PPS&&(v=g,g=!0),!v)if(!t||L!==ae.NDR&&L!==ae.IDR)r.push(e.subarray(y,x));else{const A=new Uint8Array(x-y);let U=0;for(d=y,u=0;d<x;){let b=e[d++];u>1&&b===3&&(u=0,b=e[d++]),b!==0?u=0:++u,A[U++]=b}r.push(A.subarray(0,U))}}}}let m=!0,f=!1;return c||o?c&&o&&(pe[n(265)](n(331)),m=!1):(pe[n(265)]("[H264Parser] No VCL NALUs found"),m=!1),o&&(a&&g?f=!0:pe.warn(n(158))),{valid:m,idr:f,nalus:r}}static[V(333)](e,t){let n,r=8,o=8;for(let c=0;c<t;c++)o!==0&&(n=e.readEG(),o=(r+n+256)%256),r=o===0?r:o}static[V(432)](e){const t=V;let n,r,o,c,a,g,d=new fs(e),u=0,I=0,F=0,m=0,f=1;if(d.readUByte(),n=d[t(419)](),d.readBits(5),d[t(155)](3),d[t(419)](),d[t(334)](),n===100||n===110||n===122||n===244||n===44||n===83||n===86||n===118||n===128){var y=d.readUEG();if(y===3&&d[t(155)](1),d[t(334)](),d[t(334)](),d[t(155)](1),d[t(239)]()){g=y!==3?8:12;for(let v=0;v<g;++v)d[t(239)]()&&(v<6?et[t(333)](d,16):et[t(333)](d,64))}}d[t(334)]();var x=d[t(179)]();if(x===0)d.readUEG();else if(x===1){d.skipBits(1),d[t(221)](),d[t(221)](),r=d[t(179)]();for(let v=0;v<r;++v)d[t(221)]()}if(d[t(334)](),d.skipBits(1),o=d[t(179)](),c=d.readUEG(),a=d[t(338)](1),a===0&&d[t(155)](1),d[t(155)](1),d.readBoolean()&&(u=d[t(179)](),I=d[t(179)](),F=d[t(179)](),m=d[t(179)]()),d[t(239)]()){if(d.readBoolean()){let v;switch(d.readUByte()){case 1:v=[1,1];break;case 2:v=[12,11];break;case 3:v=[10,11];break;case 4:v=[16,11];break;case 5:v=[40,33];break;case 6:v=[24,11];break;case 7:v=[20,11];break;case 8:v=[32,11];break;case 9:v=[80,33];break;case 10:v=[18,11];break;case 11:v=[15,11];break;case 12:v=[64,33];break;case 13:v=[160,99];break;case 14:v=[4,3];break;case 15:v=[3,2];break;case 16:v=[2,1];break;case 255:v=[d[t(419)]()<<8|d[t(419)](),d[t(419)]()<<8|d[t(419)]()]}v&&v[0]>0&&v[1]>0&&(f=v[0]/v[1])}d.readBoolean()&&d[t(155)](1),d[t(239)]()&&(d[t(155)](4),d[t(239)]()&&d[t(155)](24)),d[t(239)]()&&(d[t(334)](),d[t(334)]()),d.readBoolean()&&(d.readUInt(),d[t(187)](),d.readBoolean())}return{width:Math[t(440)]((16*(o+1)-2*u-2*I)*f),height:(2-a)*(c+1)*16-(a?2:4)*(F+m)}}static[V(386)](e){const t=V;let n=new fs(e[t(203)]());n[t(419)](),e[t(196)]=n[t(179)]()===0,e[t(309)]=n[t(179)]()}constructor(e){const t=V;this.remuxer=e,this[t(233)]=e.mp4track}[V(256)](e){const t=V;var n=et[t(432)](new Uint8Array(e));this.track[t(237)]=n.width,this[t(233)].height=n.height,this.track[t(382)]=[new Uint8Array(e)],this.track[t(210)]=t(292);let r=new DataView(e.buffer,e[t(188)]+1,4);for(let c=0;c<3;++c){var o=r[t(313)](c)[t(365)](16);o[t(268)]<2&&(o="0"+o),this.track[t(210)]+=o}}[V(345)](e){const t=V;this[t(233)][t(434)]=[new Uint8Array(e)]}[V(378)](e){const t=V;if(!e)return!1;let n=!1;switch(e[t(234)]()){case ae[t(427)]:case ae.NDR:n=!0;break;case ae[t(379)]:!this[t(233)][t(434)]&&(this[t(345)](e.getPayload()),!this[t(175)][t(296)]&&this[t(233)][t(434)]&&this.track[t(382)]&&(this.remuxer[t(296)]=!0)),n=!0;break;case ae[t(324)]:!this.track.sps&&(this[t(256)](e[t(203)]()),!this[t(175)][t(296)]&&this[t(233)].pps&&this[t(233)][t(382)]&&(this.remuxer[t(296)]=!0)),n=!0;break;case ae[t(272)]:break;case ae.SEI:n=!0}return n}}class Fi{constructor(e){const t=V;this.listener={},this[t(234)]=""|e}on(e,t){const n=V;return!this[n(270)][e]&&(this.listener[e]=[]),this[n(270)][e].push(t),!0}off(e,t){const n=V;if(this[n(270)][e]){var r=this[n(270)][e].indexOf(t);return r>-1&&this[n(270)][e][n(369)](r,1),!0}return!1}[V(219)](){this.listener={}}[V(225)](e,t){const n=V;return!!this[n(270)][e]&&(this[n(270)][e].map(r=>{r[n(200)](null,[t])}),!0)}}class G{constructor(e){var u,I;const t=V;this[t(285)]=e,this.saiIvSize={video:((u=e.config[t(415)])==null?void 0:u[t(201)])==="cenc"?16:0,audio:((I=e[t(154)][t(407)])==null?void 0:I[t(201)])==="cenc"?16:0},G[t(212)]={avc1:[],encv:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],Opus:[],dOps:[],enca:[],mvex:[],mvhd:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[],pssh:[],sinf:[],frma:[],schm:[],schi:[],tenc:[],saiz:[],saio:[],senc:[]};for(let F in G[t(212)])G.types[F]=[F[t(384)](0),F[t(384)](1),F[t(384)](2),F.charCodeAt(3)];const n=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),r=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]);G.HDLR_TYPES={video:n,audio:r};const o=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),c=new Uint8Array([0,0,0,0,0,0,0,0]);G.STTS=G[t(377)]=G[t(213)]=c,G.STSZ=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),G[t(438)]=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),G[t(307)]=new Uint8Array([0,0,0,0,0,0,0,0]),G[t(168)]=new Uint8Array([0,0,0,0,0,0,0,1]);const a=new Uint8Array([105,115,111,109]),g=new Uint8Array([97,118,99,49]),d=new Uint8Array([0,0,0,1]);G[t(183)]=G[t(347)](G[t(212)].ftyp,a,d,a,g),G[t(147)]=G[t(347)](G.types.dinf,G[t(347)](G[t(212)][t(280)],o))}static box(e,...t){const n=V;let r,o=8,c=t.length,a=c;for(;c--;)t[c]&&(o+=t[c].byteLength);for(r=new Uint8Array(o),r[0]=o>>>24,r[1]=o>>>16&255,r[2]=o>>>8&255,r[3]=255&o,r[n(251)](e,4),c=0,o=8;c<a;++c)t[c]&&(r[n(251)](t[c],o),o+=t[c][n(413)]);return r}[V(190)](e){const t=V;return G[t(347)](G[t(212)][t(190)],G[t(418)][e])}[V(244)](e){const t=V;return G[t(347)](G[t(212)][t(244)],e)}[V(380)](e,t){const n=V;return G[n(347)](G[n(212)][n(380)],new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,e>>>24,e>>>16&255,e>>>8&255,255&e,0,0,0,0,85,196,0,0]))}[V(215)](e){const t=V;return G[t(347)](G[t(212)].mdia,this[t(380)](e[t(274)],e[t(290)]),this[t(190)](e[t(234)]),this[t(230)](e))}[V(443)](e){const t=V;return G.box(G[t(212)][t(443)],new Uint8Array([0,0,0,0,e>>>24,e>>>16&255,e>>>8&255,255&e]))}[V(230)](e){const t=V;return e[t(234)]===t(407)?G[t(347)](G[t(212)][t(230)],G.box(G.types[t(255)],G.SMHD),G[t(147)],this[t(362)](e)):G[t(347)](G.types[t(230)],G[t(147)],this[t(362)](e),G[t(347)](G[t(212)].vmhd,G[t(438)]))}[V(370)](e,t,n){const r=V;return G[r(347)](G.types.moof,this[r(443)](e),this[r(293)](n,t))}[V(295)](e,t,n){const r=V;let o=e[r(268)],c=[];for(;o--;)c[o]=this.trak(e[o]);return G.box[r(200)](null,[G[r(212)][r(295)],this[r(240)](n,t),this[r(447)](e)][r(389)](c)[r(389)](this[r(322)](e)))}[V(322)](e){const t=V;let n=e[t(268)],r=[];for(;n--;)r[n]=this[t(305)](e[n]);return G[t(347)][t(200)](null,[G[t(212)][t(322)]][t(389)](r))}[V(240)](e,t){const n=V;let r=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return G[n(347)](G.types.mvhd,r)}[V(420)](e){const t=V;let n=e[t(428)]||[],r=new Uint8Array(4+n.length);for(let o=0;o<n[t(268)];o++){const c=n[o][t(375)];r[o+4]=c.dependsOn<<4|c[t(149)]<<2|c[t(422)]}return G[t(347)](G[t(212)][t(420)],r)}[V(362)](e){const t=V;return G[t(347)](G.types[t(362)],this[t(165)](e),G.box(G[t(212)][t(329)],G[t(421)]),G[t(347)](G.types[t(227)],G[t(377)]),G[t(347)](G.types[t(235)],G[t(218)]),G[t(347)](G[t(212)].stco,G[t(213)]))}[V(303)](e){const t=V;let n,r,o,c=[],a=[];for(n=0;n<e[t(382)].length;n++)r=e.sps[n],o=r[t(413)],c.push(o>>>8&255),c.push(255&o),c=c[t(389)](Array.prototype[t(314)][t(395)](r));for(n=0;n<e[t(434)][t(268)];n++)r=e[t(434)][n],o=r[t(413)],a[t(406)](o>>>8&255),a[t(406)](255&o),a=a.concat(Array.prototype[t(314)].call(r));const g=G[t(347)](G[t(212)][t(408)],new Uint8Array([1,c[3],c[4],c[5],255,224|e.sps[t(268)]].concat(c)[t(389)]([e[t(434)][t(268)]]).concat(a))),d=e[t(237)],u=e[t(374)],I=G[t(347)](G.types[t(441)],G.box(G[t(212)][t(318)],new Uint8Array([97,118,99,49])),G[t(347)](G[t(212)][t(349)],new Uint8Array([0,0,0,0,...hs(this[t(285)][t(154)][t(415)][t(201)]),0,1,0,0])),G.box(G.types[t(217)],this[t(298)](t(415))));return G[t(347)](G[t(212)].encv,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d>>>8&255,255&d,u>>>8&255,255&u,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,65,86,67,32,67,111,100,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,255,255]),g,I)}[V(372)](e){const t=V;let n=e[t(154)][t(413)],r=new Uint8Array(26+n+3);return r[t(251)]([0,0,0,0,3,23+n,0,1,0,4,15+n,64,21,0,0,0,0,0,0,0,0,0,0,0,5,n]),r[t(251)](e[t(154)],26),r.set([6,1,2],26+n),r}[V(403)](e){const t=V,n=e[t(354)];return G[t(347)](G[t(212)][t(403)],new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e[t(390)],0,16,0,0,0,0,n>>>8&255,255&n,0,0]),G[t(347)](G[t(212)][t(372)],this[t(372)](e)))}[V(266)](e){const t=V,n=e[t(354)];return new Uint8Array([0,e[t(390)],1,56,0,0,n>>>8&255,255&n,0,0,0])}[V(416)](e){const t=V,n=e.audiosamplerate;return G[t(347)](G.types[t(416)],new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e[t(390)],0,16,0,0,0,0,n>>>8&255,255&n,0,0]),G[t(347)](G[t(212)][t(266)],this[t(266)](e)))}[V(394)](e){const t=V,n=G[t(347)](G.types[t(266)],this.dOps(e)),r=G[t(347)](G.types[t(441)],G.box(G.types.frma,new Uint8Array([79,112,117,115])),G[t(347)](G.types.schm,new Uint8Array([0,0,0,0,...hs(this[t(285)][t(154)].audio[t(201)]),0,1,0,0])),G.box(G.types[t(217)],this[t(298)](t(407)))),o=e[t(354)];return G[t(347)](G[t(212)].enca,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e[t(390)],0,16,0,0,0,0,o>>>8&255,255&o,0,0]),n,r)}[V(165)](e){const t=V;return e[t(234)]===t(407)?G[t(347)](G[t(212)][t(165)],G[t(168)],e[t(199)]?this[t(394)](e):this[t(416)](e)):G[t(347)](G.types[t(165)],G[t(168)],this[t(303)](e))}[V(278)](e){const t=V,n=e.id,r=e[t(290)],o=e[t(237)],c=e[t(374)],a=e[t(388)];return G[t(347)](G[t(212)].tkhd,new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,n>>>24,n>>>16&255,n>>>8&255,255&n,0,0,0,0,r>>>24,r>>>16&255,r>>>8&255,255&r,0,0,0,0,0,0,0,0,0,0,0,0,255&a,a%1*10&255,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,o>>>8&255,255&o,0,0,c>>>8&255,255&c,0,0]))}[V(293)](e,t){var u;const n=V,r=e.id,o=e[n(428)][0][n(171)],c=e.samples[0][n(290)],a=e[n(428)][0].flags,g=G[n(347)](G[n(212)].tfhd,new Uint8Array([0,2,0,58,r>>>24,r>>>16&255,r>>>8&255,255&r,0,0,0,1,c>>>24,r>>>16&255,c>>>8&255,255&c,o>>>24,o>>>16&255,o>>>8&255,255&o,0,a[n(264)],0,0])),d=G[n(347)](G[n(212)].tfdt,new Uint8Array([0,0,0,0,t>>>24,t>>>16&255,t>>>8&255,255&t]));if(e.encrypted){let I,F;if(e[n(234)]===n(415)?(I=!0,F=this[n(350)][n(415)]+((u=e.samples[0][n(191)])==null?void 0:u.byteLength)):(I=!1,F=this[n(350)].audio),F>0){const m=this[n(242)](F),f=this[n(340)](e[n(428)],I),y=m[n(268)]+20+f[n(268)]+g[n(268)]+d[n(268)]+8+16+8+8,x=this[n(271)](e,y);return G[n(347)](G[n(212)][n(293)],g,d,x,m,this.saio(y-f[n(268)]+x.length+8),f)}{const m=this[n(340)](null,!1),f=m.length+g[n(268)]+d[n(268)]+8+16+8+8,y=this[n(271)](e,f);return G[n(347)](G.types[n(293)],g,d,y,m)}}return G.box(G[n(212)].traf,g,d,this.trun(e,g[n(268)]+d.length+8+16+8+8))}trak(e){const t=V;return e.duration=e[t(290)]||4294967295,G.box(G[t(212)].trak,this[t(278)](e),this[t(215)](e))}[V(305)](e){const t=V,n=e.id;return G[t(347)](G.types[t(305)],new Uint8Array([0,0,0,0,n>>>24,n>>>16&255,n>>>8&255,255&n,0,0,0,1,0,0,0,16,0,0,0,0,0,0,0,0]))}trun(e,t){const n=V;let r=(e[n(428)]||[])[n(268)],o=new Uint8Array(12);return t+=20,o.set([0,0,0,1,r>>>24,r>>>16&255,r>>>8&255,255&r,t>>>24,t>>>16&255,t>>>8&255,255&t],0),G[n(347)](G.types[n(271)],o)}[V(224)](e,t){const n=V,r=n(445),o=$o(function(c){const a=V,g=[];return g[a(406)](c[3]),g[a(406)](c[2]),g.push(c[1]),g.push(c[0]),g[a(406)](c[5]),g[a(406)](c[4]),g.push(c[7]),g.push(c[6]),(c=mi(c))[a(251)](g,0),c}(e));return mi(function(c,a){const g=V,d=new Uint8Array(2*c[g(268)]),u=new DataView(d[g(366)]);for(let I=0;I<c[g(268)];++I){const F=c.charCodeAt(I);u[g(253)](2*I,F,a)}return d[g(366)]}([n(328)+r+'" version="4.3.0.0">',n(308),"<PROTECTINFO>",n(398),n(353),n(216)+o+'"',">",n(412),n(249),n(391),t?"<LA_URL>"+t+n(423):"",n(351),n(269)].join(""),!0))}pssh(e){const t=V;if(this[t(285)][t(383)][t(202)](t(178)))return G[t(347)](G.types[t(447)],new Uint8Array([0,0,0,0,237,239,139,169,121,214,74,206,163,200,39,220,213,29,33,237,0,0,0,18,18,16,...this[t(285)][t(154)][e[0][t(234)]].keyId]));if(this[t(285)][t(383)]===t(356)){const n=this[t(224)](this[t(285)][t(154)][e[0][t(234)]][t(429)],this.drm[t(371)]),r=n[t(413)];return G[t(347)](G[t(212)][t(447)],new Uint8Array([0,0,0,0,154,4,240,121,152,64,66,134,171,146,230,91,224,136,95,149,r>>>24,r>>>16&255,r>>>8&255,255&r,...n]))}return this.drm[t(383)]===t(323)?G[t(347)](G[t(212)][t(447)],new Uint8Array([1,0,0,0,16,119,239,236,192,178,77,2,172,227,60,30,82,226,251,75,0,0,0,1,...this.drm[t(154)][e[0].type].keyId,0,0,0,0])):this.drm[t(383)]===t(397)?null:void pe[t(189)](t(393)+this[t(285)][t(383)])}[V(298)](e){const t=V;let n,r,o=this[t(285)][t(154)][e];return o[t(201)]===t(226)?(n=new Uint8Array([16,...o.iv]),r=25):(n=new Uint8Array([]),r=0),G[t(347)](G[t(212)][t(298)],new Uint8Array([1,0,0,0,0,r,1,this[t(350)][e],...o[t(429)],...n]))}[V(242)](e){const t=V;return G[t(347)](G[t(212)][t(242)],new Uint8Array([0,0,0,0,e,0,0,0,1]))}[V(204)](e){const t=V;return G[t(347)](G[t(212)][t(204)],new Uint8Array([0,0,0,0,0,0,0,1,e>>>24,e>>>16&255,e>>>8&255,255&e]))}[V(340)](e,t){const n=V;let r=null;return e&&(e[n(268)]!==1&&pe[n(189)](n(182)+e[n(268)]+" samples - expected 1"),r=e[0][n(191)]),r&&r[n(413)]?G[n(347)](G[n(212)].senc,new Uint8Array([0,0,0,t?2:0,0,0,0,1,...r])):G.box(G[n(212)][n(340)],new Uint8Array([0,0,0,0,0,0,0,1]))}[V(439)](e,t,n){const r=V,o=this[r(295)](e,t,n);let c=new Uint8Array(G[r(183)].byteLength+o[r(413)]);return c[r(251)](G[r(183)]),c[r(251)](o,G[r(183)][r(413)]),c}}let ea=1;class $t{constructor(){this.seq=1}static[V(411)](){return ea++}[V(246)](){const e=V;this.mp4track[e(263)]=0,this[e(207)][e(428)]=[]}[V(211)](){const e=V;return!(!this[e(296)]||!this[e(428)][e(268)])}}class ta extends $t{constructor(e){const t=V;super(),this[t(296)]=!0,this[t(222)]=0,this.dts=0,this.mp4track={id:$t[t(411)](),type:t(407),channelCount:2,audiosamplerate:48e3,len:0,fragmented:!0,timescale:e,duration:e,samples:[],codec:t(364),encrypted:!0},this[t(428)]=[]}resetTrack(){const e=V;this[e(437)]=1,this[e(222)]=0,this[e(336)]=0}[V(181)](e,t,n){const r=V;if(e[r(268)]>0)for(let o=0;o<e.length;o++){let c=e[o],a=c[r(392)],g=a[r(413)];this.samples[r(406)]({units:a,size:g,duration:c.duration,sampleAuxInfo:t,timestamp:n}),this[r(207)][r(263)]+=g}}[V(161)](){const e=V;if(!this.samples)return null;let t,n=this[e(207)][e(428)];for(;this[e(428)][e(268)];){let r=this.samples[e(342)](),o=(1e3*r.timestamp|0)-this[e(222)]|0;o<5&&(o=5),this[e(336)]=this[e(222)],this.nextDts+=o,t={size:r[e(171)],duration:o,cts:0,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1},sampleAuxInfo:r[e(191)]};let c=new Uint8Array(r[e(171)]);return c[e(251)](r.units,0),n[e(406)](t),new Uint8Array(c[e(366)],0,r[e(171)])}return null}}class na extends $t{constructor(e,t){const n=V;super(),this[n(296)]=!1,this[n(222)]=0,this[n(336)]=0,this[n(361)]=t,this[n(207)]={id:$t[n(411)](),type:n(415),len:0,fragmented:!0,sps:"",pps:"",width:0,height:0,timescale:e,duration:e,samples:[],encrypted:!0},this[n(428)]=[],this[n(302)]=new et(this)}[V(297)](){const e=V;this[e(437)]=1,this[e(296)]=!1,this[e(207)][e(382)]="",this.mp4track[e(434)]="",this.nextDts=0,this.dts=0}remux(e,t,n){const r=V;for(let o of e){let c=[],a=0;for(let g of o[r(392)])this[r(302)].parseNAL(g)&&(c[r(406)](g),a+=g[r(194)]());c[r(268)]>0&&this.readyToDecode&&(this[r(207)][r(263)]+=a,this[r(428)].push({units:c,size:a,keyFrame:o.keyFrame,duration:o[r(290)],sampleAuxInfo:t,timestamp:n}))}}[V(161)](){const e=V;if(!this[e(211)]()||!this[e(428)])return null;let t,n=this.mp4track[e(428)],r=this.samples[e(342)](),o=r.units,c=(1e3*r[e(332)]|0)-this[e(222)]|0;c<5&&(c=5),c>5e3&&pe[e(381)](e(430)+(c/1e3|0)+" s"),this.dts=this[e(222)],this[e(222)]+=c,t={size:r.size,duration:c,cts:0,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,isNonSync:r[e(148)]?0:1,dependsOn:r[e(148)]?2:1},sampleAuxInfo:r[e(191)]};let a=0;for(const u of o)a+=u[e(194)]();let g=0,d=new Uint8Array(a);for(const u of o)d[e(251)](u[e(341)](),g),g+=u[e(194)]();return n.push(t),new Uint8Array(d[e(366)],0,a)}}class ia extends Fi{constructor(e,t){const n=V;super(n(175)),this[n(260)]=!1,this.trackTypes=[],this[n(357)]={},this[n(274)]=1e3,this[n(163)]=0,this[n(361)]=e,this.mp4=t}[V(281)](e){const t=V;(e==="video"||e==="both")&&(this[t(357)][t(415)]=new na(this.timescale,this[t(361)]),this[t(335)][t(406)](t(415))),(e===t(407)||e===t(417))&&(this[t(357)][t(407)]=new ta(this.timescale),this.trackTypes[t(406)](t(407)))}[V(250)](){const e=V;for(let t of this[e(335)])this.tracks[t].resetTrack();this[e(260)]=!1}[V(262)](){const e=V;this.tracks={},this[e(219)]()}[V(246)](){const e=V;if(this[e(260)])for(let t of this[e(335)]){let n=this[e(357)][t];for(;;){let r=n[e(161)]();if(!r||!r.byteLength)break;let o={type:t,payload:gs(this[e(164)][e(370)](n[e(437)]++,n[e(336)],n[e(207)]),this.mp4[e(244)](r)),dts:n[e(336)]};this[e(225)](e(366),o),n[e(246)]()}}else this[e(211)]()&&(this[e(225)]("ready"),this.initSegment(),this[e(260)]=!0,this[e(246)]())}[V(439)](){const e=V;for(let t of this[e(335)]){let n=this[e(357)][t],r={type:t,payload:this[e(164)][e(439)]([n[e(207)]],this[e(163)],this.timescale)};this[e(225)]("buffer",r)}}isReady(){const e=V;for(let t of this[e(335)])if(!this.tracks[t][e(296)]||!this[e(357)][t][e(428)][e(268)])return!1;return!0}[V(181)](e){const t=V;for(let n of this[t(335)]){let r=e[n];r.length>0&&this[t(357)][n][t(181)](r,n==="audio"?e.audioSampleAuxInfo:e[t(310)],e[t(332)])}this[t(246)]()}}function pi(){const i=["stsd","isSupported","src","STSD","endMSE","abort","size","appendBufferError","addSourceBuffer","setupMSE","remuxer","addEventListener","max","com.widevine","readUEG"," - ","remux","Received ","FTYP","readyState","valid","ntype","readUInt","byteOffset","error","hdlr","sampleAuxInfo","webkitsourceopen","Checking codec","getSize","irrecoverableError","isfmb","[MSE] buffer error:","url","encrypted","apply","encryption","startsWith","getPayload","saio","open","[MSE] source buffer error","mp4track","append","getNri","codec","isReady","types","STCO","feed","mdia",'VALUE="',"schi","STSZ","offAll","jmuxer","skipEG","nextDts","1036611gAoRea","generatePlayReadyHeader","dispatch","cbcs","stsc","endOfStream","6576815frVeWy","minf","releaseBuffer","readUShort","track","type","stsz","isvcl","width","map","readBoolean","mvhd","onReady","saiz","reportDiscontinuity","mdat","bufferControllers","flush","patchSampleAuxinfo","readEG","</KIDS>","reset","set","onMSEClose","setUint16","idr","smhd","parseSPS","bind","message","getBits","initialized","sourceBuffer","destroy","len","isNonSync","warn","dOps","extractNALUs","length","</WRMHEADER>","listener","trun","AUD","SEI","timescale","Num frames in chunk: ","7620738FWzrwf","mode","tkhd","dbgMediaDump","dref","addTrack","doAppend","options","[MSE] sourceclose","drm","mediaSource","Failure: Browser doesn't support MSE/MMS",'/mp4; codecs="',"function","duration","min","avc1.","traf","[MSE] sourceopen","moov","readyToDecode","resetTrack","tenc","onMSEOpen","MediaSource","removeSourceBuffer","h264","encv","sourceopen","trex","isKeyframe","SMHD","<DATA>","stype","videoSampleAuxInfo","ended","getElementById","getUint8","slice","audioSampleAuxInfo","data","ready","frma","mseReady","string","4760043VatbTq","mvex","org.w3.clearkey","SPS","buffered","no video element were found to render, provide a valid video element","getPayloadSize",'<WRMHEADER xmlns="',"stts","start","[H264Parser] Both IDR and non-IDR VCL NALUs found in the same frame","timestamp","skipScalingList","skipUEG","trackTypes","dts","queue","readBits","mseEnded","senc","getData","shift","[MSE] error: ","UNKNOWN","parsePPS","appendBuffer","box","initBrowser","schm","saiIvSize","</DATA>","out",'<KID ALGID="AESCTR" ',"audiosamplerate","reduce","com.microsoft.playready.recommendation","tracks","fromCharCode","updating","calculateExpectedSizeFromSai","videoElement","stbl","1159252OkMfWN","opus","toString","buffer","nalus","index","splice","moof","licenseUrl","esds","disableRemotePlayback","height","flags","createBuffer","STSC","parseNAL","PPS","mdhd","debug","sps","keySystem","charCodeAt","mse","parseHeader","isSafari","volume","concat","channelCount","</PROTECTINFO>","units","Unsupported DRM type ","enca","call","POSITIVE_INFINITY","com.apple.fps","<KIDS>","getVideoFrames","646233hEZDuD","4LuRDMh","nri","mp4a","ManagedMediaSource","buffer error","push","audio","avcC","onError","Buffered range ","getTrackID","</KID>","byteLength","No A/V data","video","Opus","both","HDLR_TYPES","readUByte","sdtp","STTS","hasRedundancy","</LA_URL>","revokeObjectURL","BYTES_PER_ELEMENT","webkitsourceclose","IDR","samples","keyId","timestamp gap: ","node","readSPS","setData","pps","onBuffer","remuxController","seq","VMHD","initSegment","ceil","sinf","sourceclose","mfhd","skipLZ","http://schemas.microsoft.com/DRM/2007/03/PlayReadyHeader","Browser does not support codec","pssh","mediasource is not available to end: ","NDR","isReset","bitsAvailable","payload","DINF","keyFrame","isDependedOn","isTypeSupported","assign","waitingForIdr","8hmeyto","config","skipBits","remove","bitLength","[H264Parser] IDR without SPS/PPS, not suitable for recovery","TYPES","13659xNePtU","getFramePayload","onBufferError","mediaDuration","mp4"];return(pi=function(){return i})()}class ra extends Fi{constructor(e,t,n){var c;const r=V;super(r(366)),this[r(234)]=t,this[r(337)]=new Uint8Array;const o=(c=ve.mediaDumps[t])==null?void 0:c[r(352)].durationMs;o>0&&(this[r(279)]=new hi(t,r(164),o)),this.sourceBuffer=e,this[r(385)]=n,this[r(195)]=!1,this[r(261)].addEventListener(r(189),a=>{const g=r;pe.warn(g(206),a,this.type),this[g(195)]=!0,this.dispatch("error",{type:this[g(234)],name:g(366),error:g(405)})})}[V(262)](){const e=V;this[e(337)]=null,this[e(279)]=null;try{this[e(261)]&&(this.sourceBuffer[e(170)](),this.mse[e(301)](this[e(261)]),this.sourceBuffer=null)}catch{}this.offAll()}[V(282)](){const e=V;if(this[e(337)][e(268)]&&this[e(261)]&&!this.sourceBuffer.updating){if(this[e(261)].buffered.length>1){for(let t=0;t<this[e(261)][e(325)][e(268)];++t){const n=t<this[e(261)].buffered.length-1;pe[e(381)](e(410)+t+(n?" (remove)":"")+": "+this[e(261)][e(325)][e(330)](t)+e(180)+this[e(261)][e(325)].end(t)),n&&this[e(261)][e(156)](this[e(261)].buffered[e(330)](t),this[e(261)][e(325)].end(t))}if(this[e(261)][e(359)])return}try{this[e(261)][e(346)](this[e(337)]),this[e(337)]=new Uint8Array}catch(t){this[e(225)](e(189),{type:this.type,name:e(172),error:t})}}}[V(214)](e,t){const n=V;this.dbgMediaDump&&(this[n(279)][n(208)](e,t)||(this[n(279)]=null)),this[n(195)]||(this.queue=gs(this.queue,e)),this[n(282)]()}}class Ui extends Fi{static isSupported(e){const t=V;return window[t(404)]?window.ManagedMediaSource[t(150)](e):!!window[t(300)]&&window[t(300)][t(150)](e)}constructor(e){const t=V;super(t(220)),this[t(195)]=!1,this[t(152)]=!0,this[t(450)]=!1,this[t(319)]=!1,this.mseEnded=!1;let n={node:"",mode:t(415),debug:!1,onReady:function(){},onError:function(r){}};this.options=Object[t(151)]({},n,e),this[t(431)]=typeof this.options[t(431)]===t(320)?document[t(312)](this[t(283)][t(431)]):this[t(283)][t(431)],this[t(285)]=e.drm,this[t(164)]=new G(this[t(285)]),this[t(436)]=new ia(this.node,this[t(164)]),this[t(436)][t(281)](this[t(283)][t(277)]),this[t(436)].on(t(366),this.onBuffer[t(257)](this)),this[t(436)].on(t(317),this[t(376)][t(257)](this)),this[t(348)]()}[V(348)](){const e=V;typeof this[e(283)][e(431)]===e(320)&&this.options[e(431)]==""&&pe[e(189)](e(326)),this[e(319)]=!1,this[e(174)]()}[V(174)](){const e=V;if(!window.ManagedMediaSource&&!window[e(300)])throw e(287);window.ManagedMediaSource?(this.node[e(373)]=!0,this[e(286)]=new ManagedMediaSource):this[e(286)]=new MediaSource,this[e(198)]=URL.createObjectURL(this[e(286)]),this.node[e(167)]=this[e(198)],this[e(339)]=!1,this[e(286)][e(176)](e(304),this[e(299)][e(257)](this)),this.mediaSource.addEventListener(e(442),this[e(252)][e(257)](this)),this.mediaSource.addEventListener(e(192),this[e(299)][e(257)](this)),this[e(286)][e(176)](e(426),this[e(252)][e(257)](this)),this[e(286)][e(176)](e(189),function(t){const n=e;pe[n(189)](n(343),t[n(258)])})}[V(169)](){const e=V;if(!this.mseEnded)try{this[e(339)]=!0,this[e(286)][e(184)]===e(205)&&this[e(286)][e(228)]()}catch(t){pe[e(189)](e(448),t)}}[V(243)](){const e=V;pe[e(381)]("Discontinuity!"),this[e(152)]=!0}feed(e){const t=V;let n={video:[],audio:[]};if(this[t(195)]||this[t(339)]||!e||!this.remuxController)return-1;if(e[t(415)]){n[t(332)]=e.timestamp;const r=this[t(360)](e[t(310)],this[t(164)][t(350)][t(415)]),o=r!=e.video[t(413)];let c=et[t(267)](e[t(415)],o);if(!c[t(185)]||c[t(367)].length<1)return 0;if(this.waitingForIdr){if(!c[t(254)])return 0;this[t(152)]=!1}if(!_o&&e[t(310)]){const a=c[t(367)][t(355)]((g,d)=>g+4+d[t(413)],0);a!==r&&this.patchSampleAuxinfo(e[t(310)],this[t(164)][t(350)][t(415)],a-r)}n[t(415)]=this[t(399)](c[t(367)]),n[t(310)]=e[t(310)]}return e[t(407)]&&(n[t(332)]=e.timestamp,n[t(407)]=[{units:e[t(407)]}],n[t(315)]=e[t(315)]),e[t(415)]||e[t(407)]?(this[t(436)][t(181)](n),0):(pe[t(189)](t(414)),0)}[V(399)](e){const t=V;let n=[],r=[],o=!1,c=!1;for(let a of e){let g=new ae(a);g[t(234)]()!==ae[t(427)]&&g[t(234)]()!==ae[t(449)]||et[t(386)](g),n.length&&c&&(g[t(196)]||!g[t(236)])&&(r[t(406)]({units:n,keyFrame:o}),n=[],o=!1,c=!1),n.push(g),o=o||g.isKeyframe(),c=c||g[t(236)]}if(n[t(268)])if(c)r.push({units:n,keyFrame:o});else{let a=r[t(268)]-1;a>=0&&(r[a][t(392)]=r[a][t(392)].concat(n))}return r[t(268)]!==1&&pe.warn(t(275)+r[t(268)]),r}[V(360)](e,t){if(!e)return 0;const n=(e[0]<<8)+e[1],r=t+2+4;let o=0,c=2;for(;0<n&&c+r<=e.byteLength;){c+=t;const a=(e[c]<<8)+e[c+1],g=(e[c+2]<<24)+(e[c+3]<<16)+(e[c+4]<<8)+e[c+5];c+=6,o+=a+g}return o}[V(247)](e,t,n){let r=2;if(0<(e[0]<<8)+e[1]&&r+(t+2+4)<=e.byteLength){r+=t;let o=(e[r]<<8)+e[r+1];o+=n,o>=0&&(e[r]=o>>>8&255,e[r+1]=255&o)}return 0}[V(376)](){const e=V;if(this[e(319)]&&this[e(436)]&&this[e(436)][e(211)]()&&!this[e(245)]){this[e(245)]={};for(let t in this[e(436)][e(357)]){let n=this.remuxController[e(357)][t];const r=""[e(389)](t,e(288)).concat(n.mp4track[e(210)],'"');if(pe[e(381)](e(193),r),!Ui[e(166)](r))return pe.error(e(446)),!1;let o=this.mediaSource[e(173)](r);this[e(245)][t]=new ra(o,t,this[e(286)]),this[e(245)][t].on(e(189),this[e(162)][e(257)](this))}}}[V(231)](){const e=V;for(let t in this.bufferControllers)this[e(245)][t][e(282)]()}[V(435)](e){const t=V;this[t(319)]&&this[t(245)]&&this[t(245)][e[t(234)]]&&this[t(245)][e[t(234)]].feed(e[t(452)],e[t(336)])}onMSEOpen(){const e=V;pe[e(381)](e(294)),this[e(286)].readyState!==e(311)&&(this[e(286)][e(290)]=Number[e(396)],this[e(319)]=!0,typeof this[e(283)].onReady===e(289)&&this[e(283)][e(241)][e(395)](null,this.isReset),URL[e(424)](this[e(198)]),this[e(376)]())}[V(252)](){const e=V;pe[e(381)](e(284)),this.mseReady=!1,this[e(169)]()}onBufferError(e){const t=V;pe.warn(t(197),e),this[t(195)]=!0,this.endMSE(),typeof this.options[t(409)]===t(289)&&this[t(283)][t(409)][t(395)](null,e)}}function ms(i,e){const t=Ii();return(ms=function(n,r){return t[n-=182]})(i,e)}(function(){const i=ms,e=Ii();for(;;)try{if(parseInt(i(182))/1+parseInt(i(192))/2*(parseInt(i(184))/3)+-parseInt(i(185))/4+-parseInt(i(187))/5+parseInt(i(193))/6+-parseInt(i(183))/7*(parseInt(i(190))/8)+-parseInt(i(186))/9===553943)break;e.push(e.shift())}catch{e.push(e.shift())}})();function Ii(){const i=["1247170HwkwNv","__dev_time__","gitVersion","352GaBvIm","toISOString","14XlATBT","2568948xDjIMf","1027225mjPCDe","19691yiLZrh","195999uPnZlk","3038288UlnUQm","2033937CLMUfn"];return(Ii=function(){return i})()}const fe=bi;function Bi(){const i=["1236858jPUtaw","certificate","11225xsjioT","275391VrsSlK","5816evMpkd","CrsCCAMSEKDc0WAwLAQT1SB2ogyBJEwYv4Tx7gUijgIwggEKAoIBAQC8Xc/GTRwZDtlnBThq8","7299lkgbxa","1470Lkqtku","production","Development","charCodeAt","xUuwokpsqVIHZrJfu62ar+BF8UVUKdK5oYQoiTZd9OzK3kr29kqGGk3lSgM0/p499p/FUL8oH","baseUrl","375060LzZhzk","230861ZKueQt","12pvGCSu","https://lic.drmtoday.com","35fxICRY","pQnNI61gzHO42XZOMuxytMm0F6puNHTTqhyY3Z290YqvSDdOB+UY5QJuXJgjhvOUD9+oaLlvT","Production","development","https://lic.test.drmtoday.com","UrTEfQxfPR4dJTquE+IDLAi5yeVVxzbAgMBAAE6DGNhc3RsYWJzLmNvbUABEoADMmGXpXg/0q","from","RL9KsD0v7ysBQVdUXEbJotcFz71tI5qc3jwr6GjYIPA3VzusD17PN6AGQniMwxJV12z/EgnUo","baigovcoURAZcr1d/G0rpREjLdVLG0Gjqk63Gx688W5gh3TKemsK3R1jV0dOfj3e6uV/kTpsN","pcFB13osydpD2AaDsgWo5RWJcNf+fzCgtUQx/0Au9+xVm5LQBdv8Ja4f2oiHN3dw","V382D1oJAM0F/YgCQtNDLz7vTWJ+QskNGi5Dd2qzO4s48Cnx5BLvL4H0xCRSw2Ed6ekHSdrRU","27eI5MATX39gYtCnn7dDXVxo4/rCYK0A4VemC3HRai2X3pSGcsKY7+6we7h4IycjqtuGtYg8A","HzgsJ7Hajdsyzn0Vs3+VysAgaJAkXZ+k+N6Ka0WBiZlCtcunVJDiHQbz1sF9GvcePUUi2fM/h","Staging","staging","name"];return(Bi=function(){return i})()}(function(){const i=bi,e=Bi();for(;;)try{if(parseInt(i(326))/1+parseInt(i(325))/2+parseInt(i(315))/3+parseInt(i(327))/4*(-parseInt(i(314))/5)+-parseInt(i(312))/6+parseInt(i(329))/7*(parseInt(i(316))/8)+-parseInt(i(318))/9*(parseInt(i(319))/10)===181728)break;e.push(e.shift())}catch{e.push(e.shift())}})();const sa=fe(317)+fe(306)+"wyoYOE+M/t1oIbccwlTQ7o+BpV1X6TB7fxFyx1jsBtRsBWphU65w121zqmSiwzZzJ4xsXVQCJ"+fe(330)+"+vwmV2/NJWxKqHBKdL9JqvOnNiQUF0hDI7Wf8Wb63RYSXKE27Ky31hKgx1wuq7TTWkA+kHnJT"+fe(334)+fe(323)+fe(308)+"7hyskG5ZLAyJMzTvgnV3D8/I5Y6mCFBPb/+/Ri+9bEvquPF3Ff9ip3yEHu9mcQeEYCeGe9zR/"+fe(307)+fe(304)+fe(336)+fe(305),oa=Uint8Array[fe(335)](window.atob(sa),i=>i[fe(322)](0));class Xe{constructor(e){this[fe(311)]=e}toString(){return this.name}[fe(324)](){const e=fe;switch(this[e(311)]){case"staging":return"https://lic.staging.drmtoday.com";case"development":return e(333);default:return e(328)}}[fe(313)](){return oa}}function bi(i,e){const t=Bi();return(bi=function(n,r){return t[n-=304]})(i,e)}Xe[fe(309)]=new Xe(fe(310)),Xe[fe(331)]=new Xe(fe(320)),Xe[fe(321)]=new Xe(fe(332));const yi=Qi;function Qi(i,e){const t=xi();return(Qi=function(n,r){return t[n-=252]})(i,e)}function xi(){const i=["SampleAuxInfo corrupted","error","50012RXzLep","3301necisu","[RTC-DRM]","subarray","buffer","64zGPhLV","162pDdDkb","659466dfDPqj","SampleAuxInfo corrupted (postfix not found)","data","4199670WddvRf","95WaGAXy","getUint8","137436hbCkvG","1351035XuhSnW","getUint16","byteLength","184863QcuifQ"];return(xi=function(){return i})()}(function(){const i=Qi,e=xi();for(;;)try{if(-parseInt(i(253))/1*(parseInt(i(258))/2)+parseInt(i(259))/3+parseInt(i(252))/4*(-parseInt(i(263))/5)+-parseInt(i(265))/6+-parseInt(i(269))/7*(-parseInt(i(257))/8)+-parseInt(i(266))/9+parseInt(i(262))/10===173102)break;e.push(e.shift())}catch{e.push(e.shift())}})();const Bt=_t(yi(254));(function(){const i=Vi,e=Ci();for(;;)try{if(parseInt(i(369))/1+parseInt(i(374))/2+parseInt(i(366))/3+-parseInt(i(373))/4+-parseInt(i(365))/5+-parseInt(i(368))/6*(parseInt(i(370))/7)+parseInt(i(367))/8===110661)break;e.push(e.shift())}catch{e.push(e.shift())}})();const bt=[];function Vi(i,e){const t=Ci();return(Vi=function(n,r){return t[n-=365]})(i,e)}let Ri=null,Fs=0;function Ci(){const i=["799144UpkRWz","356926NfeJZx","set","slice","237700RBIjTO","627444ELwjUL","76968OxbdcX","6xPMWky","172231EpHRtx","1480332fEizHX","push","buffer"];return(Ci=function(){return i})()}function aa(i){return!Ri&&function(){const e=Vi;Ri=new Uint8Array([0,0,0,1,65,154,255,255])[e(372)],bt[e(371)](new Uint8Array([0,0,0,1,39,100,0,13,172,87,5,6,100,0,0,0,1,40,238,60,176,0,0,0,1,37,184,32,0,203,255,38,29,217,24,192,161,96,0,0,12,229,174,166,6,7,20,3,84,0,247,96,193,181,229,128,0,32,32])[e(372)]),bt[e(371)](bt[0][e(376)](0)),new Uint8Array(bt[1])[e(375)]([16,0,50],27)}(),i?Ri:(Fs^=1,bt[Fs])}const be=en;(function(){const i=en,e=Ei();for(;;)try{if(-parseInt(i(452))/1+-parseInt(i(412))/2+-parseInt(i(478))/3*(parseInt(i(441))/4)+-parseInt(i(485))/5*(-parseInt(i(415))/6)+-parseInt(i(400))/7+parseInt(i(460))/8*(-parseInt(i(486))/9)+-parseInt(i(437))/10*(-parseInt(i(470))/11)===412983)break;e.push(e.shift())}catch{e.push(e.shift())}})();const Ie=_t(be(424));let lt={licenseUrl:"",onFetch:void 0};const ps={},ca=(i,e,t)=>{const n=be,r=Uint8Array.BYTES_PER_ELEMENT;e*=r,t*=r;const o=(g=i)instanceof ArrayBuffer?g:g[be(484)],c=i[n(483)],a=e;var g;let d=Math[n(432)](0,Math.min(a,c)),u=Math.min(d+Math[n(432)](t,0),c);return d/=r,u/=r,new Uint8Array(o,d,u-d)},Us=(i,e=0,t=1/0)=>ca(i,e,t);function la(i,e,t=!1){const n=be;if(!i)return"";let r=i;if(!t&&r[n(483)]%2!=0)throw Ie[n(393)](n(448)),new Error("Data does not seem to be UTF-16 encoded!");const o=Us(r);let c;if((o[0]===255&&o[1]===254||o[0]===254&&o[1]===255)&&(r=o[n(407)](2)),r instanceof ArrayBuffer)c=r;else{const u=new Uint8Array(r[n(483)]);u[n(396)](Us(r)),c=u[n(484)]}const a=Math[n(447)](r[n(483)]/2),g=new Uint16Array(a),d=new DataView(c);for(let u=0;u<a;u++)g[u]=d[n(398)](2*u,e);return function(u){const I=be;let F="";for(let m=0;m<u[I(433)];m+=16e3){const f=u.subarray(m,m+16e3);F+=String[I(408)][I(467)](null,f)}return F}(g)}const Is=i=>{const e=be;let t="";for(const n of i){let r=n.toString(16);r[e(433)]==1&&(r="0"+r),t+=r}return t};function Ei(){const i=["360308tFqTFd","usable for decryption (status: ","oct","decode","parse","license","parseFromString","message","8pQccIM","No clear key test key provided!","generateRequest","text/xml","Failed to update the session: ","output-downscaled","target","apply","bind","Failed to update the session","24280927IKsRHd","No PR challenge data!","kids","status","getElementsByTagName","rtcdrmerror","CK license request:","A128KW","3KcCnPp","createSession","License acquisition failed with error ","No media keys for media element!","stringify","byteLength","buffer","82765KyOCry","7206525fRtYVA","error","btoa","9a04f07998404286ab92e65be0885f95","set","[PR] License fetched:","getUint16","onFetch","4630892EspqDe","addEventListener","debug","has","json","Previous lic will be reused","internal-error","subarray","fromCharCode","expired","text","temporary","665922eWbQGg","then","[FPS] License fetched:","174puebov","Content-Type","update","POST","<Challenge","nodeValue","replace","sessionId","initData","[CDM]","[WV] License fetched:","No media element available!","CDM error generating license request: ","Failed to load previous EME session","initDataType","keyStatuses","forEach","max","length","indexOf","New lic will be requested","edef8ba979d64acea3c827dcd51d21ed","10DoxNsv","atob","catch","arrayBuffer","475444JqsldJ","No init data available!","append","warn","licenseUrl","dispatchEvent","floor","Data has an incorrect length, must be even.","EME createSession() failed - no DRM available","keystatuseschange","Failed to reuse previous EME session: "];return(Ei=function(){return i})()}let Si=null;const da=i=>{const e=be;return window[e(394)](String[e(408)][e(467)](null,i))[e(421)](/\+/g,"-")[e(421)](/\//g,"_")[e(421)](/=*$/,"")},ua=(i,e)=>{const t=be,n=(r=>{const o=be,c=JSON[o(456)](new TextDecoder()[o(455)](r));if(Ie[o(402)](o(476),c),Si===null)throw new Error(o(461));const a=[];for(const g of c[o(472)]){const d={kty:o(454),alg:o(477),kid:g,k:da(Si)};a.push(d)}return new TextEncoder().encode(JSON[o(482)]({keys:a}))})(e.message);e.target.update(n)[t(439)](function(r){const o=t;Ie[o(393)](o(469),r)})},Zi=i=>{const e=be,t=window[e(438)](i.replace(/-/g,"+")[e(421)](/_/g,"/")),n=new Uint8Array(t[e(433)]);for(let r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n},Gi=(i,e,...t)=>si(void 0,[i,e,...t],void 0,function*(n,r,o=!1){const c=be,a=new Headers(ps);o&&a[c(443)](c(416),c(463));const g={method:c(418),headers:a,body:r},d=yield lt[c(399)]?lt.onFetch(n,g):fetch(n,g);if(!d.ok)throw new Error(c(480)+d[c(473)]);return d}),ga=(i,e)=>{const t=be;Gi(lt[t(445)],e[t(459)])[t(413)](n=>n[t(404)]()).then(n=>{const r=t;Ie[r(402)](r(425),n[r(457)]);const o=Zi(n[r(457)])[r(484)];e[r(466)][r(417)](o)[r(439)](c=>{const a=r;Ie[a(393)](a(469),c)})})[t(439)](n=>{const r=t;i[r(446)](new CustomEvent(r(475),{detail:{message:""+n}})),Ie[r(393)](n)})},ha=(i,e)=>{const t=be,n=((r,o)=>{const c=be,a=new DOMParser;try{const g=la(o,!0);if(g[c(434)](c(419))>-1){const d=a[c(458)](g,c(463))[c(474)]("Challenge")[0].childNodes[0][c(420)];if(d===null)throw new Error(c(471));return Zi(d)}Ie[c(444)]("[PR] Challenge node not found")}catch(g){r[c(446)](new CustomEvent(c(475),{detail:{message:""+g}})),Ie[c(393)](g)}return null})(i,e.message);if(n===null)return i[t(446)](new CustomEvent("rtcdrmerror",{detail:{message:t(471)}})),void Ie[t(393)](t(471));Gi(lt[t(445)],n[t(484)],!0)[t(413)](r=>r[t(440)]())[t(413)](r=>{const o=t;Ie[o(402)](o(397),r),e[o(466)][o(417)](r)[o(439)](function(c){const a=o;i[a(446)](new CustomEvent(a(475),{detail:{message:a(464)+c}})),Ie[a(393)]("Failed to update the session",c)})}).catch(r=>{const o=t;i.dispatchEvent(new CustomEvent(o(475),{detail:{message:""+r}})),Ie[o(393)](r)})},fa=(i,e)=>{const t=be;Gi(lt.licenseUrl,e[t(459)])[t(413)](n=>{const r=t,o=n[r(410)]();return Ie[r(402)](r(414),n,o),o})[t(413)](n=>{const r=t;e.target[r(417)](Zi(n))})[t(439)](n=>{const r=t;i[r(446)](new CustomEvent(r(475),{detail:{message:""+n}})),Ie.error(n)})},Bs=(i,e)=>{ps[i]=e},bs=Me.isSafari;function en(i,e){const t=Ei();return(en=function(n,r){return t[n-=393]})(i,e)}let tn=!bs;const yt=new Map;function ma(i){return si(this,void 0,void 0,function*(){const e=en;if(i.initData===null)throw new Error(e(442));const t=i[e(466)];if(t===null)throw new Error(e(426));const n=t.mediaKeys;if(n===null)throw new Error(e(481));const r=Is(new Uint8Array(i[e(423)])),o=r+t.id;let c=null;yt[e(403)](o)&&(c=yt.get(o),c!=null&&c.close(),yt.delete(o)),Ie[e(402)](e(c?405:435));let a=null;try{a=n.createSession(tn?"persistent-license":"temporary")}catch(g){Ie[e(402)]("EME createSession(persistent) failed:",g)}if(!a&&tn){tn=!1;try{a=n[e(479)](e(411))}catch(g){Ie.error("EME createSession(temporary) failed:",g)}}if(a)if(a.addEventListener(e(450),g=>{const d=e;g[d(466)][d(430)][d(431)]((u,I)=>{const F=d;(u===F(409)||u==="output-restricted"||u===F(465)||u===F(406))&&t[F(446)](new CustomEvent(F(475),{detail:{message:"Key "+Is(new Uint8Array(I))+" is not "+(F(453)+u)+")",keyId:I}}))})}),bs?a[e(401)](e(459),fa.bind(null,t),!1):r.indexOf(e(436))!==-1?a[e(401)](e(459),ga[e(468)](null,t),!1):r[e(434)](e(395))!==-1?a.addEventListener(e(459),ha[e(468)](null,t),!1):a.addEventListener(e(459),ua[e(468)](null,t),!1),c)try{(yield a.load(c[e(422)]))?yt[e(396)](o,a):t[e(446)](new CustomEvent(e(475),{detail:{message:e(428)}}))}catch(g){t[e(446)](new CustomEvent(e(475),{detail:{message:e(451)+g}}))}else a[e(462)](i[e(429)],i[e(423)])[e(413)](()=>{tn&&yt[e(396)](o,a)})[e(439)](g=>{const d=e;t.dispatchEvent(new CustomEvent(d(475),{detail:{message:d(427)+g}}))});else t[e(446)](new CustomEvent(e(475),{detail:{message:e(449)}}))})}const ne=rn;(function(){const i=rn,e=Li();for(;;)try{if(-parseInt(i(462))/1*(-parseInt(i(532))/2)+-parseInt(i(543))/3+parseInt(i(682))/4+-parseInt(i(692))/5*(parseInt(i(588))/6)+-parseInt(i(539))/7+parseInt(i(496))/8+-parseInt(i(549))/9===672532)break;e.push(e.shift())}catch{e.push(e.shift())}})();const ce=_t(ne(673)),ys=Me[ne(607)],nn=Me[ne(540)],ze=Me[ne(647)],Qs=Me[ne(489)],xs=Me[ne(478)],Fa=Me.platform,Vs=Me[ne(620)],pa=Qs||xs&&Fa===ne(578),Ua=1e6*(nn?82:ze?220:120),vi=nn?5e3:2e3,Ia=nn?1.5:.5;function wi(i){const e=ne;return typeof i!==e(672)||i===null||i instanceof Element||i instanceof Xe?i:((t=i)==null?void 0:t[ne(584)])instanceof ArrayBuffer&&(t!=null&&t.BYTES_PER_ELEMENT)?i[e(550)]():Array[e(636)](i)?i.reduce((n,r,o)=>(n[o]=wi(r),n),[]):i instanceof Object?Object.keys(i).reduce((n,r)=>(n[r]=wi(i[r]),n),{}):i;var t}class Ba{constructor(e){const t=ne;this[t(547)]="",this[t(471)]="",this.keySystem="",this[t(603)]=[],this[t(479)]=wi(e),this.jmuxer=null,this.keyFrameLogCntr=0,this[t(561)]=Date[t(658)](),this[t(585)]=0,this[t(602)]=0,this[t(490)]=-1,this[t(680)]=0,this[t(596)]=0,this[t(491)]=!0,this.keyFrameNeededPosted=!1,this[t(617)]=vi,this[t(500)]=null,this.dbgMediaDump={video:null,audio:null}}}const tt=new Map,ba=new Uint8Array([60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60]),ya=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]),Qa=new Uint8Array([213,251,214,184,46,217,62,78,249,138,228,9,49,238,51,183]);function xa(i,e){const t=ne;e!==void 0&&(i[t(479)].mediaBufferMs=e),(i[t(479)][t(571)]===void 0||i.config[t(571)]<0)&&(i[t(479)].mediaBufferMs=100,nn?i[t(479)][t(571)]=350:!ze&&Vs&&(i.config[t(601)]==="PlayReady"||i[t(482)])&&(i.config[t(571)]=1400))}function Li(){const i=["isSafari","ansform=$=>{let e=$.transformer;handleTransform(e.options.operation,e.readable,e.writable)}),onmessage=$=>{keyFra","status","DRM config:","key","Development"," will be used","Staging","const DUMMY_IDR_FRAME_SLICE_HDR0=new Uint8Array([32,0,203]),DUMMY_IDR_FRAME_SLICE_HDR1=new Uint8Array([16,0,50]);","enabled","playback at ","now",".experiment","seq","videoElement","data","btoa","PlayReady might not support '","logLevel","cbcs-1-9","encryption"," to ","offset","x-dt-custom-data","let brokenFrame=null,idrFrames=[];function initializeDummyFrames(){brokenFrame=new Uint8Array([0,0,0,1,65,154,255","object","[RTC-DRM]","not-allowed","durationMs","Default transform mode enabled, ","keySystem","timestamp","DRM config keyId must be an instance of 16-byte long Uint8Array.","lastKeyFrameTime","H264 is the only supported video codec.","2533916KeNZJm","out","Applying pre-configured certificate (","buffered","Widevine","x-dt-auth-token"," ms)","com.microsoft.playready.recommendation","error","currentTime","225RwtgWL","end","requestMediaKeySystemAccess","50705YjLCIv","onmessage","environment","wvLicenseUrl","a1d1f1"," requesting a new key frame (latency ","userId","ClearKey","createEncodedStreams","licenseUrl","PlayReady license acquisition might fail without output protection enabled (sessionId is ","feed","dbgMediaDump","jmuxer","MSE (re)init",",255]).buffer,idrFrames.push(new Uint8Array([0,0,0,1,39,100,0,13,172,87,5,6,100,0,0,0,1,40,238,60,176,0,0,0,1,37,","isChrome","config","forEach","Invalid config argument type, DRM config must be an object.","hwSecurity","audioEncrypted","setMediaKeys","fpsCertificate","Unable to create Worker!","GET","customTransform","isEdge","prevSeqNum","keyFrameNeeded","encrypted","targetLatency not set!","opus","FairPlay","7963992IJNztq","streamType","SampleAuxInfo extraction failed (video)"," seeking from ","worker","]: ","video","kind","audio","jitterBufferDelayHint","size","No target media element!","fpsCertificateUrl","wvCertificate","delimited","3000","pipeThrough","/license-server-fairplay/cert/","string",") not found in [","indexOf","warn","ignoreAudio","append","jitterBufferTarget","prLicenseUrl","sessionTypes","authToken","get","RTCRtpScriptTransform","audioElement","catch","trim","join","waitingForIdr","info","52hXHKkY","enqueue","). It has to be a string containing a JWT.","playbackRate","sai","persistent-license","Blob","2699340CvuQCI","isFirefox","transform",'rame:{type:$.type,timestamp:$.timestamp,data:$.data}}),"key"===$.type&&(keyFrameNeeded=!1),$.data=generateDummyFr',"554109usxuWq"," will not be created, use rtcDrmFeedFrame to push frames manually","bind","streams","serverCertificateUrl","includes","3473577nNrBJc","slice","URL","serverCertificate","length","Invalid authToken type (","addEventListener","', it's safer to use 'cbcs' instead.","srcObject","ClearKey is not supported by Safari.","meNeeded=$.data};","value","nextKeyFrameAllowedTime","Error recovery attempted","rtcdrmerror","184,32,0,203,255,38,29,217,24,192,161,96,0,0,12,229,174,166,6,7,20,3,84,0,247,96,193,181,229,128,0,32,32]).buffer"," bytes","both","debug","No valid DRM config found, call rtcDrmConfigure first.","dispatchEvent","certificate","mediaBufferMs","clear","merchant","src","sessionId","reportDiscontinuity","mediaBufferMs should be an integer.","Android","rtcDrmConfigure did not specify audioElement, audio will be dropped","/license-proxy-widevine/cenc/","arrayBuffer","). Edge only supports PlayReady, Widevine and ClearKey.","). Chrome only supports Widevine and ClearKey.","buffer","videoStartTimestamp",'audio/mp4; codecs="opus"',"set","175800AyhMKK","PlayReady","SampleAuxInfo extraction failed (audio)","cenc","codec","videoCapabilities",".. ","Duplicate/reordered frame, prev seq: ","bytesSinceKey","wvCertificateUrl","/license-proxy-headerauth/drmtoday/RightsManager.asmx","robustness","baseUrl","type","audioStartTimestamp","emeConfig","com.widevine.alpha","SW_SECURE_CRYPTO","fpsLicenseUrl","supportsRtpScriptTransform","Target video element (","?audioTransformFunction:videoTransformFunction});e.pipeThrough(a).pipeTo(x)}self.RTCTransformEvent&&(self.onrtctr","createObjectURL","playoutDelayHint","POSITIVE_INFINITY",'ame(keyFrameNeeded),e.enqueue($)}function handleTransform($,e,x){let a=new TransformStream({transform:"audio"===$',"track",'video/mp4; codecs="avc1.640032"',"cbcs","keyFrameRequestInterval","Frame gap: ","keyFrameNeededPosted","isWindows","HW_SECURE_ALL"," bytes, ","GOP is getting too long, requesting a new key frame","temporary","Safari does not support Opus, audio will not be rendered.","stringify","byteLength","message"," frame","H264","mediaDumps","h264","keyFrameLogCntr","requestMediaKeySystemAccess(","Safari doesn't support 'cenc'/AES-CTR, use 'cbcs' instead if possible.","isArray","Invalid DRM type (","DRM config iv must be an instance of 16-byte long Uint8Array.","keyId","pipeTo"," - ","receiver","isInteger","toString","onFetch","next"];return(Li=function(){return i})()}function Va(i){const e=ne;let t=!1;if((i[e(479)][e(502)]&&i[e(479)].video[e(667)]!==e(572)&&i[e(479)][e(502)][e(599)]==="HW"||i[e(479)][e(504)]&&i[e(479)][e(504)][e(667)]!==e(572)&&i.config[e(504)][e(599)]==="HW")&&(t=!0),i.hwSecurity=t,xa(i,i[e(479)][e(571)]),i.config[e(523)]===void 0){i[e(479)][e(468)]===void 0&&(i[e(479)][e(468)]="purchase"),i[e(479)][e(575)]===void 0&&(i.config[e(575)]=e(466));const o=window[e(663)](JSON[e(626)]({userId:i[e(479)].userId,sessionId:i.config.sessionId,merchant:i[e(479)].merchant}));Bs(e(670),o)}else Bs(e(687),i[e(479)][e(523)]);for(const o of[i[e(479)][e(504)],i[e(479)][e(502)]])o&&o.encryption!==e(572)&&(o.keyId||(o[e(639)]=ya),o.iv||(o.iv=Qa));i[e(552)]=void 0,i[e(547)]="",i[e(471)]="";const n=i[e(479)][e(464)][e(600)]();var r;if(i[e(479)].type===e(469)?(i[e(677)]="org.w3.clearkey",Si=ba):i[e(479)][e(601)]===e(686)?(i[e(677)]=e(604),Vs&&t&&(i[e(677)]+=e(659)),i[e(479)][e(509)]?i[e(552)]=i[e(479)][e(509)]:i[e(479)][e(597)]?i[e(547)]=i.config[e(597)]:i[e(552)]=i.config[e(464)][e(570)](),i[e(479)].wvLicenseUrl?i[e(471)]=i.config[e(465)]:i[e(471)]=n+e(580)):i[e(479)][e(601)]===e(589)?(i.keySystem=e(689),i[e(479)][e(521)]?i[e(471)]=i[e(479)][e(521)]:i[e(471)]=n+e(598)):i.config[e(601)]===e(495)&&(i.keySystem="com.apple.fps",i[e(479)][e(485)]?i[e(552)]=i[e(479)][e(485)]:i[e(479)][e(508)]?i[e(547)]=i.config.fpsCertificateUrl:i[e(547)]=n+e(513)+i[e(479)][e(573)],i[e(479)].fpsLicenseUrl?i[e(471)]=i.config[e(606)]:i[e(471)]=n+"/license-server-fairplay/"),r={licenseUrl:i[e(471)],onFetch:i[e(479)][e(645)]},lt=r,i[e(603)]=[],i[e(479)][e(601)]!==e(495)){i[e(603)].push({initDataTypes:[e(591)],sessionTypes:[e(537),e(624)]});for(const o of[i[e(479)][e(502)],i.config[e(504)]])if(o&&o[e(667)]!==e(572)){const c=o==i.config[e(502)]?e(502):e(504);let a;i.config[e(601)]==="Widevine"?a=o[e(599)]==="HW"?e(621):e(605):i.config[e(601)]==="PlayReady"&&(a=o[e(599)]==="HW"?e(511):"2000"),c==="video"?i[e(603)][0][e(593)]=[{contentType:e(615),encryptionScheme:o[e(667)]===e(591)?e(591):"cbcs-1-9",robustness:a||void 0}]:i[e(603)][0].audioCapabilities=[{contentType:e(586),encryptionScheme:o[e(667)]===e(591)?e(591):e(666),robustness:a||void 0}]}}else i.emeConfig=[{initDataTypes:["sinf"],videoCapabilities:[{contentType:"video/mp4",robustness:""}],distinctiveIdentifier:e(674),persistentState:"not-allowed",sessionTypes:[e(624)]}];ce[e(567)](e(650),i)}function Rs(i){const e=ne;ce[e(567)](e(476));let t=i[e(479)][e(661)];(!i[e(479)][e(502)]||i[e(479)][e(502)][e(667)]===e(572))&&(t=i.config.audioElement),i[e(475)]=null;const n=!i[e(518)]&&i[e(479)].audio&&i[e(479)][e(504)][e(667)]!==e(572),r=i[e(479)][e(502)]&&i[e(479)].video.encryption!==e(572);i[e(596)]=0,i.keyFrameNeeded=!0,i[e(619)]=!1,i[e(617)]=vi,i[e(585)]=0,i[e(602)]=0,i[e(490)]=-1,i[e(680)]=0,i[e(475)]=new Ui({node:t,mode:e(n?r?566:504:502),fps:60,drm:i}),ze&&i[e(479)][e(661)]&&i.config.videoElement.play().then(()=>{})[e(527)](()=>{})}function rn(i,e){const t=Li();return(rn=function(n,r){return t[n-=461]})(i,e)}function Ra(i,e){const t=ne;i.videoStartTimestamp===0&&(i.videoStartTimestamp=e.timestamp,i[t(617)]=vi,i[t(561)]=Date.now()+2e3);let n=null,r=!1;if(e[t(662)][t(627)]<=4)ce[t(517)]("Discarding corrupted video frame (too small)"),r=!0;else{const a=new Uint8Array(e[t(662)],0,4);a[0]!=0||a[1]!=0||a[2]!=0||a[3]!=1?(ce.warn("Discarding corrupted video frame (no Annex B startcode)"),r=!0):(n=function(g,d){const u=yi,I=new DataView(g.data),F=g.data[u(268)]-2,m=I[u(267)](F);if(m<F){let f=F-m;if(I[u(264)](F-1)!==69)return Bt[u(271)](u(260)),null;if(I[u(264)](f++)>>>4!==1)return Bt[u(271)]("Unsupported SampleAuxInfo version"),null;const x=new Uint8Array(m-2);let v=0,L=0;for(;f<F-1;){let Q=I[u(264)](f++);L>1&&Q===3&&(L=0,Q=I.getUint8(f++)),Q!==0?L=0:++L,x[v++]=Q}const A=new DataView(x[u(256)]),U=d==="cenc"?16:0,b=U+2+6*A[u(267)](U);return b+2>v?(Bt[u(271)](u(270)),null):{sai:x[u(255)](0,b),offset:F-m,seq:A[u(267)](b)}}return null}(e,i.config[t(502)][t(667)]),!n&&(ce.warn(t(498)),r=!0))}if(n)if(e[t(601)]===t(651))i[t(490)]=n.seq;else{if(i[t(490)]===-1)return 0;{let g=n[t(660)]-i[t(490)];if(g<-32767&&(g+=65536),g<=0)return ce.debug(t(595)+i.prevSeqNum+", curr: "+n.seq),0;g>1&&(r=e[t(601)]!==t(651),ce[t(517)](t(618)+i[t(490)]+t(641)+n[t(660)]+", restart required: "+r)),i.prevSeqNum=n[t(660)]}}let o=0;r&&!i[t(475)][t(530)]&&(o=-1,i[t(475)][t(576)]());const c=(e[t(678)]-i[t(585)])/9e4;return n&&i[t(475)][t(473)]({video:new Uint8Array(e[t(662)],0,n.offset),videoSampleAuxInfo:n[t(536)],timestamp:c})<0&&(o=-1,ce[t(517)](t(562)),Rs(i)),o>=0&&e[t(601)]===t(651)&&(i[t(680)]=c),o}function Ca(i){const e=ne,t=i[e(479)][e(661)];if(!t||t[e(685)][e(553)]<1||t.paused||t[e(691)]<Ia)return;const n=i[e(479)][e(571)];if(n===void 0||n<0)throw new Error(e(493));const r=t[e(685)].end(t.buffered[e(553)]-1),o=1e3*(r-t[e(691)])|0;if(!i[e(483)]&&function(c,a,g){const d=ne;let u;u=a<3*g>>>2?.875:a<=g?1:a<7*g>>>2?1.125:a<9*g>>>2?1.25:a<11*g>>>2?1.375:1.5,u!==c.playbackRate&&(c[d(535)]=u)}(t,o,n),!(o<n+50||o<5*n>>>2))if(i[e(680)]>t[e(691)]+.1){const c=1e3*(r-i.lastKeyFrameTime)|0;c>40&&c>n-100?(ce.debug(qt()+e(499)+(t[e(691)]+e(668)+i.lastKeyFrameTime+" (")+(i[e(680)]-t[e(691)])+")"),t[e(691)]=i[e(680)]):ce[e(567)](qt()+" too close to seek, "+c)}else!i.keyFrameNeeded&&Date[e(658)]()>i[e(561)]&&o>n+100&&o>3*n>>>1&&(ce[e(567)](qt()+e(467)+o+e(688)),i[e(491)]=!0,i[e(617)]<16e3&&(i[e(617)]<<=1))}function Ea(i,e){const t=ne;var n;if(!i[t(475)]||i[t(518)])return 0;i[t(602)]===0&&(i.audioStartTimestamp=e[t(678)]);const r=(e[t(678)]-i[t(602)])/48e3;if(((n=i[t(479)][t(504)])===null||n===void 0?void 0:n[t(667)])===t(616))return i.jmuxer[t(473)]({audio:new Uint8Array(e[t(662)]),timestamp:r});const o=function(c){const a=yi,g=new DataView(c[a(261)]),d=c.data[a(268)]-2,u=g[a(267)](d);if(u<d){let I=d-u;if(g[a(264)](d-1)!==69)return Bt.error("SampleAuxInfo corrupted (postfix not found)"),null;if(g[a(264)](I++)>>>4!==1)return Bt[a(271)]("Unsupported SampleAuxInfo version"),null;const m=new Uint8Array(u-2);let f=0;for(;I<d-1;){const y=g[a(264)](I++);if(m[f++]=y,f>=16)break}return{sai:m,offset:d-u}}return null}(e);return o?i.jmuxer[t(473)]({audio:new Uint8Array(e[t(662)],0,o[t(669)]),audioSampleAuxInfo:o[t(536)],timestamp:r}):(ce[t(690)](t(590)),-1)}function Sa(i,e,t){const n=ne,r=Cs(t);return i[n(601)]?Xi(r,i,e):Ai(r,i,e)}function Xi(i,e,t){const n=ne;if(i[n(474)][n(502)]){ve.mediaDumps[n(502)].in[n(510)]&&i[n(474)][n(502)][n(519)](new Uint8Array([0,0,0,1,9,80]));const o=e[n(678)]/90;i[n(474)][n(502)][n(519)](new Uint8Array(e[n(662)]),o)||(i[n(474)][n(502)]=null)}if(i[n(479)][n(502)]&&i[n(479)][n(502)][n(667)]==="clear")return t==null||t[n(533)](e),!1;const r=Date[n(658)]();if(e[n(601)]===n(651)){const o=ve.logLevel>=4;++i[n(633)]<(o?Number[n(612)]:5)&&(ce.debug(qt()+" "+e[n(601)]+", "+e.data.byteLength+n(622)+(n(657)+i.config[n(661)].currentTime)),o&&i.keyFrameLogCntr===1&&function(c,a=64,g=64){const d=ne,u=new Uint8Array(c[d(662)]);let I="",F=0;for(let m=0;m<a&&m<u[d(553)];++m)I+=(u[m]<16?"0":"")+u[m][d(644)](16)+" ";if(F<u[d(553)])for(F<u[d(553)]-g&&(I+=d(594),F=u[d(553)]-g);F<u[d(553)];F++)I+=(u[F]<16?"0":"")+u[F][d(644)](16)+" ";ce[d(531)]("["+((c[d(601)]||d(504))+d(629))+d(501)+I[d(528)]())}(e,128,8)),i.keyFrameNeeded=!1,i[n(596)]=0,i[n(561)]=r+i[n(617)]}return i[n(596)]+=e[n(662)][n(627)],!i[n(491)]&&i[n(596)]>Ua&&(ce.info(n(623)),i[n(491)]=!0),i[n(475)]&&(Ra(i,e)<0?i[n(491)]=!0:Ca(i)),t?(!i[n(491)]||!pa)&&(e[n(662)]=aa(i[n(491)]),t[n(533)](e)):i[n(491)]!=i.keyFrameNeededPosted&&(i[n(500)]&&i.worker.postMessage(i[n(491)]),i.keyFrameNeededPosted=i[n(491)]),i.keyFrameNeeded}function Ai(i,e,t){const n=ne;if(i.dbgMediaDump.audio){const r=e[n(678)]/48;i[n(474)][n(504)][n(519)](new Uint8Array(e.data),r)||(i.dbgMediaDump[n(504)]=null)}return i[n(479)].audio&&i[n(479)].audio[n(667)]!==n(572)?e[n(662)][n(627)]>0&&Ea(i,e):t&&t[n(533)](e),!1}function Ni(i){const e=ne;var t,n,r,o,c;if(!i||typeof i!==e(672))throw new TypeError(e(481));if(!(i.videoElement instanceof HTMLVideoElement))throw new TypeError("Invalid videoElement, it must be an instance of HTMLVideoElement.");if(i[e(526)]&&!(i[e(526)]instanceof HTMLMediaElement))throw new TypeError("Invalid audioElement, it must be an instance of HTMLMediaElement.");if(i[e(571)]!==void 0&&!Number[e(643)](i[e(571)]))throw new TypeError("DRM config mediaBufferMs should be an integer.");let a=!1,g=!1,d=!1;const u=[e(616),"cenc",e(572)],I=["SW","HW"];for(const m of[i.video,i[e(504)]])if(m){if(!u[e(548)](m[e(667)]))throw new RangeError("DRM config encryption value must be one of: "+u[e(529)](", "));if(ze&&m.encryption===e(591))throw new RangeError(e(635));if(m[e(667)]!=="clear"){if(g=!0,m.keyId){if(!(m[e(639)]instanceof Uint8Array)||m[e(639)][e(553)]!==16)throw new TypeError(e(679));d=!0}else if(ze)throw new ReferenceError(e(558));if(m.iv&&(!(m.iv instanceof Uint8Array)||m.iv[e(553)]!==16))throw new TypeError(e(638));if(m[e(599)]&&!I[e(548)](m[e(599)]))throw new RangeError("DRM config robustness can only be one of: "+I[e(529)](", "));if(m===i.video&&m.codec!==e(630))throw new RangeError(e(681));ze&&m===i.audio&&m[e(592)]===e(494)&&(a=!0,ce.warn(e(625))),i[e(601)]===e(589)&&(m[e(667)]!=="cenc"&&ce[e(517)](e(664)+m[e(667)]+e(556)),i.sessionId===void 0||i[e(575)][e(548)]("f1")||ce[e(517)](e(472)+i[e(575)]+", a1d1f1 is recommended)."))}}if(g){const m=[Xe[e(652)],Xe[e(654)],Xe.Production];if(!m[e(548)](i[e(464)]))throw new RangeError("DRM config env value must be one of: "+m.join(", "));if(i[e(523)]&&typeof i.authToken!==e(514))throw new TypeError(e(554)+typeof i[e(523)]+e(534));if(i[e(601)]){if(ze){if(i.type!=="FairPlay")throw new RangeError(e(637)+i[e(601)]+"). Safari only supports FairPlay.")}else if(xs){if(i[e(601)]!==e(686)&&i.type!=="ClearKey")throw new RangeError(e(637)+i[e(601)]+e(583))}else if(Qs&&i[e(601)]!==e(589)&&i[e(601)]!=="Widevine"&&i[e(601)]!==e(469))throw new RangeError(e(637)+i.type+e(582))}}if(i[e(665)]!==void 0&&(ve[e(665)]=i[e(665)]),i.mediaDumps!==void 0){if(i.mediaDumps[e(502)]){const m=i[e(631)].video,f=ve[e(631)][e(502)];!((t=m.in)===null||t===void 0)&&t.durationMs&&(f.in[e(675)]=m.in.durationMs),!((n=m.in)===null||n===void 0)&&n.delimited&&(f.in.delimited=m.in[e(510)]),!((r=m[e(683)])===null||r===void 0)&&r.durationMs&&(f[e(683)][e(675)]=m[e(683)].durationMs)}if(i[e(631)][e(504)]){const m=i[e(631)][e(504)],f=ve[e(631)][e(504)];!((o=m.in)===null||o===void 0)&&o.durationMs&&(f.in.durationMs=m.in.durationMs),!((c=m.out)===null||c===void 0)&&c[e(675)]&&(f[e(683)][e(675)]=m[e(683)].durationMs)}}let F=tt[e(524)](i[e(661)]);!F&&(F=new Ba(i),tt[e(587)](i.videoElement,F)),F[e(656)]=g,F.ignoreAudio=a,F[e(483)]=!a&&F[e(479)][e(504)]&&F[e(479)][e(504)][e(667)]!==e(572),g&&(F[e(479)][e(601)]||(F[e(479)][e(601)]=ze?"FairPlay":e(686)),d||F.config.type===e(469)||(F[e(479)][e(601)]=e(469)),Va(F),function(m){si(this,void 0,void 0,function*(){const f=rn;var y,x;let v=m.config[f(661)];if((!m.config[f(502)]||m[f(479)].video[f(667)]===f(572))&&(v=m[f(479)][f(526)]),!v)throw new Error(f(507));v[f(574)]="",v[f(557)]=null,yield v[f(484)](null);let L=null;try{L=yield navigator[f(461)](m[f(677)],m[f(603)])}catch{}if(!L&&m.emeConfig[0]){const U=(y=m.emeConfig[0][f(522)])===null||y===void 0?void 0:y[f(516)](f(537));if(U!==void 0&&U>=0){(x=m[f(603)][0][f(522)])===null||x===void 0||x.splice(U,1);try{L=yield navigator[f(461)](m[f(677)],m[f(603)])}catch{}}}if(!L){const U=f(634)+m[f(677)]+") failed";return v[f(569)](new CustomEvent(f(563),{detail:{message:U}})),void ce[f(690)](U)}let A=null;try{A=yield L.createMediaKeys()}catch{}if(!A){const U="createMediaKeys("+m.keySystem+") failed";return v.dispatchEvent(new CustomEvent(f(563),{detail:{message:U}})),void ce[f(690)](U)}if(m.serverCertificate)ce[f(567)](f(684)+m[f(552)][f(627)]+" bytes)"),yield A.setServerCertificate(m[f(552)]);else if(m[f(547)]){const U={method:f(487)},b=m.serverCertificateUrl;try{const Q=yield m.config[f(645)]?m[f(479)][f(645)](b,U):fetch(b,U);if(!Q.ok){const R="Server certificate fetch failed with error "+Q[f(649)];return void v[f(569)](new CustomEvent(f(563),{detail:{message:R}}))}const B=yield Q[f(581)]();ce[f(567)]("Fetched certificate from "+b+", "+B.byteLength+f(565)),yield A.setServerCertificate(B)}catch(Q){const B=Q.name+": "+Q[f(628)];return ce[f(690)](B),void v[f(569)](new CustomEvent("rtcdrmerror",{detail:{message:B}}))}}yield v[f(484)](A),v[f(555)](f(492),ma),Rs(m)})}(F)),F[e(479)][e(661)][e(555)]("play",function(){const m=e;F[m(479)][m(661)][m(691)]>.5&&(F[m(561)]=Date[m(658)]())})}const Za=ne(655)+ne(671)+ne(477)+ne(564)+'),idrFrames.push(idrFrames[0].slice());let $=new Uint8Array(idrFrames[1]);$.set([16,0,50],27)}let idrPicIdToggle=0;function generateDummyFrame($){return(brokenFrame||initializeDummyFrames(),$)?brokenFrame:idrFrames[idrPicIdToggle^=1]}function audioTransformFunction($,e){postMessage({streamType:"audio",frame:{timestamp:$.timestamp,data:$.data}}),e.enqueue($)}let keyFrameNeeded=!1;function videoTransformFunction($,e){postMessage({streamType:"video",f'+ne(542)+ne(613)+ne(609)+ne(648)+ne(559);function Cs(i){const e=ne;if(tt[e(506)]===0)throw new TypeError(e(568));let t;if(i&&i[e(661)])t=i.videoElement;else{if(tt[e(506)]!==1)throw new TypeError("Several DRM configs detected, rtcDrmOnTrack have to be called with target DRM config.");t=tt.keys()[e(646)]()[e(560)]}const n=tt[e(524)](t);if(!n){let r="";throw tt[e(480)]((o,c)=>{r+=c.id+", "}),r=r[e(550)](0,-2),new TypeError(e(608)+t.id+e(515)+r+"]")}return n}function Es(i,e){const t=ne;if(i&&i.config[t(661)]){const n=i.config[t(661)];if(n.buffered[t(553)]>0){const r=n.buffered[t(693)](n.buffered[t(553)]-1)-n.currentTime;e[t(611)]=e.jitterBufferDelayHint=e[t(520)]=r}setTimeout(Es,1e3,i,e)}}function Ga(i,e){const t=ne;var n,r;const o=i[t(614)][t(503)];o===t(502)&&(i[t(642)][t(611)]=i.receiver[t(505)]=i[t(642)][t(520)]=0);const c=Cs(e),a=c[t(479)][t(661)],g=c.config.audioElement;if(c.enabled){const d=""+t(ys?525:470);if(c[t(479)][t(488)])ce[t(567)](d+t(544));else{if(ce[t(567)](t(676)+d+t(653)),o===t(502)){const u=ve[t(631)][t(502)].in[t(675)];u>0&&(c.dbgMediaDump[t(502)]=new hi(t(502),t(632),u))}else if(o===t(504)){const u=ve[t(631)][t(504)].in[t(675)];u>0&&(c[t(474)][t(504)]=new hi(t(504),t(494),u))}if(ys){if(c[t(500)]=function(u){const I=ne,F=window[I(551)]||window.webkitURL,m=window[I(538)],f=window.Worker;if(!(F&&m&&f&&u))return null;const y=new m([u]);return new f(F[I(610)](y))}(Za),c[t(500)]==null)throw new Error(t(486));c[t(500)][t(463)]=u=>{const I=t;u[I(662)][I(497)]===I(502)?Xi(c,u.data.frame,null):Ai(c,u.data.frame,null)},i[t(642)][t(541)]=new RTCRtpScriptTransform(c.worker,{operation:o})}else{const u=o===t(502)?Xi:Ai,I={drm:c,transform:(x,v)=>{u(c,x,v)}},F=i[t(642)][t(470)](),m=new TransformStream({transform:I[t(541)][t(545)](I)}),{readable:f,writable:y}=F;f[t(512)](m)[t(640)](y)}}if(o==="audio"&&((n=c.config[t(504)])===null||n===void 0?void 0:n.encryption)===t(572)){if(!g)return void ce[t(517)](t(579));g[t(557)]!==i[t(546)][0]&&(g[t(557)]=i.streams[0]),c[t(479)][t(661)]&&(i[t(642)].playoutDelayHint=i.receiver.jitterBufferDelayHint=i[t(642)][t(520)]=c[t(479)][t(571)],Es(c,i[t(642)]))}else o===t(502)&&((r=c[t(479)][t(502)])===null||r===void 0?void 0:r.encryption)===t(572)&&a[t(557)]!==i[t(546)][0]&&(a.srcObject=i[t(546)][0])}else a[t(557)]!==i[t(546)][0]&&(a.srcObject=i[t(546)][0])}const re=Ne.get("View");re.setLevel(Ne.DEBUG);const Wi={metadata:!1,enableDRM:!1,disableVideo:!1,disableAudio:!1,peerConfig:{autoInitStats:!0,statsIntervalMs:1e3}};class va extends rs{constructor(e,t,n=null,r=!0){e&&re.warn("The streamName property has been deprecated. In a future release, this will be removed. Please do not rely on this value. Instead, set via token generator"),super(null,t,re,r),this.payloadTypeCodec={},this.tracksMidValues={},this.drmOptionsMap=null,this.eventQueue=[],this.isMainStreamActive=!1,n&&(this.on(Ce.track,o=>{n.srcObject=o.streams[0]}),re.warn("The mediaElement property has been deprecated. In a future release, this will be removed. Please do not rely on this value. Instead, do this in either the `track` or the `active` broadcast event."))}async connect(e=Wi){this.options={...Wi,...e,peerConfig:{...Wi.peerConfig,...e.peerConfig},setSDPToPeer:!1},this.eventQueue.length=0,await this.initConnection({migrate:!1})}async select(e={}){re.debug("Viewer select layer values: ",e),await this.signaling.cmd("select",{layer:e}),re.info("Connected to streamName: ",this.streamName)}async addRemoteTrack(e,t){re.info("Viewer adding remote track",e);const n=await this.webRTCPeer.addRemoteTrack(e,t);for(const r of t)r.addTrack(n.receiver.track);return n}async project(e,t){for(const n of t){if(!n.trackId&&!n.media)throw re.error("Error in projection mapping, trackId or mediaId must be set"),new Error("Error in projection mapping, trackId or mediaId must be set");const r=this.webRTCPeer.getRTCPeer();if(n.mediaId&&!r.getTransceivers().find(o=>o.mid===n.mediaId.toString()))throw re.error(`Error in projection mapping, ${n.mediaId} mid not found in local transceivers`),new Error(`Error in projection mapping, ${n.mediaId} mid not found in local transceivers`)}re.debug("Viewer project source: layer mappings: ",e,t),await this.signaling.cmd("project",{sourceId:e,mapping:t}),re.info("Projection done")}async unproject(e){re.debug("Viewer unproject mediaIds: ",e),await this.signaling.cmd("unproject",{mediaIds:e}),re.info("Unprojection done")}async replaceConnection(){re.info("Migrating current connection"),await this.initConnection({migrate:!0})}stop(){var e,t;super.stop(),(e=this.drmOptionsMap)==null||e.clear(),this.DRMProfile=null,(t=this.worker)==null||t.terminate(),this.worker=null,this.payloadTypeCodec={},this.tracksMidValues={},this.eventQueue.length=0}async initConnection(e){var y;re.debug("Viewer connect options values: ",this.options),this.stopReconnection=!1;let t;if(e.abrConfiguration&&(e.abrConfiguration.abrStrategy||(e.abrConfiguration.abrStrategy="quality"),e.abrConfiguration.metadata)){const x=e.abrConfiguration.metadata.bitrate;if(x&&x<0)throw new Error(`Invalid bitrate ${x} supplied for ABR. The value must be... TBD`)}if(!e.migrate&&this.isActive())throw re.warn("Viewer currently subscribed"),new Error("Viewer currently subscribed");let n;try{n=await this.tokenGenerator(),this.options.peerConfig.iceServers=n==null?void 0:n.iceServers,this.options.peerConfig.encodedInsertableStreams=ti&&(this.options.enableDRM||this.options.metadata)}catch(x){throw re.error("Error generating token."),x instanceof Mt&&(x.status===401||!this.autoReconnect?this.stopReconnection=!0:this.reconnect()),x}if(!n)throw re.error("Error while subscribing. Subscriber data required"),new Error("Subscriber data required");const r=Or(n.jwt);this.streamName=r.millicast.streamName;const o=new Mn({streamName:this.streamName,url:`${n.urls[0]}?token=${n.jwt}`});n.subscriberToken&&(this.subscriberToken=n.subscriberToken);const c=e.migrate?new Pe:this.webRTCPeer;await c.createRTCPeer(this.options.peerConfig),(y=this.stopReemitingWebRTCPeerInstanceEvents)==null||y.call(this),this.stopReemitingWebRTCPeerInstanceEvents=At(c,this,Object.values(Ce).filter(x=>x!==Ce.track)),this.options.metadata&&(this.worker||(this.worker=new ni),this.worker.onmessage=x=>{if(x.data.event==="metadata"){const v=new TextDecoder,L=x.data.metadata;if(L.mid=x.data.mid,L.track=this.tracksMidValues[x.data.mid],L.uuid){const A=L.uuid;L.uuid=A.reduce((U,b)=>U+b.toString(16).padStart(2,"0"),""),L.uuid=L.uuid.replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/,"$1-$2-$3-$4-$5")}if(L.timecode&&(L.timecode=new Date(v.decode(L.timecode))),L.unregistered){const A=v.decode(L.unregistered);try{const U=JSON.parse(A);L.unregistered=U}catch{re.info("The content could not be converted to JSON, returning raw bytes instead")}}this.emit("metadata",L)}}),c.on(Ce.track,x=>{if(!this.isMainStreamActive){this.eventQueue.push(x);return}this.onTrackEvent(x)}),o.on(ke.broadcastEvent,async x=>{if(!this.isMainStreamActive&&x.name==="active"){if(this.mainSourceId=x.data.sourceId,!this.DRMProfile&&x.data.encryption){const v=await this.tokenGenerator();v.drmObject&&(this.DRMProfile=v.drmObject)}for(this.emit(ke.broadcastEvent,x),this.isMainStreamActive=!0;this.eventQueue.length>0;)this.onTrackEvent(this.eventQueue.shift());return}x.name==="inactive"&&this.isMainStreamActive&&this.mainSourceId===x.data.sourceId&&(this.isMainStreamActive=!1),this.emit(ke.broadcastEvent,x)});const a=c.getRTCLocalSDP({...this.options,stereo:!0}),g=o.connect();t=await Promise.all([a,g]);const d=t[0];let u=this.signaling;this.signaling=o;const I=this.signaling.subscribe(d,{...this.options,vad:this.options.multiplexedAudioTracks>0}),F=c.peer.setLocalDescription(c.sessionDescription);t=await Promise.all([I,F]);const m=t[0];this.payloadTypeCodec=Ue.getCodecPayloadType(m),await c.setRTCRemoteSDP(m),re.info("Connected to streamName: ",this.streamName);let f=this.webRTCPeer;this.webRTCPeer=c,this.setReconnect(),e.migrate&&this.webRTCPeer.on(Ce.connectionStateChange,x=>{var v,L;x==="connected"?setTimeout(()=>{var A,U;(A=u==null?void 0:u.close)==null||A.call(u),(U=f==null?void 0:f.closeRTCPeer)==null||U.call(f),u=f=null,re.info("Current connection migrated")},1e3):["disconnected","failed","closed"].includes(x)&&((v=u==null?void 0:u.close)==null||v.call(u),(L=f==null?void 0:f.closeRTCPeer)==null||L.call(f),u=f=null)})}onTrackEvent(e){var t,n,r;if(this.tracksMidValues[(t=e.transceiver)==null?void 0:t.mid]=e.track,this.isDRMOn){const o=e.transceiver.mid,c=this.getDRMConfiguration(o);try{Ga(e,c)}catch(a){re.error("Failed to apply DRM on media Id:",o,"error is: ",a),this.emit("error",new Error("Failed to apply DRM on media Id: "+o+" error is: "+a))}this.worker||(this.worker=new ni),this.worker.addEventListener("message",a=>{a.data.event==="complete"&&Sa(a.data.frame,null,c)})}if(this.options.metadata){if(os)e.receiver.transform=new RTCRtpScriptTransform(this.worker,{name:"receiverTransform",payloadTypeCodec:{...this.payloadTypeCodec},codec:this.options.metadata&&"h264",mid:(n=e.transceiver)==null?void 0:n.mid});else if(ti){const{readable:o,writable:c}=e.receiver.createEncodedStreams();this.worker.postMessage({action:"insertable-streams-receiver",payloadTypeCodec:{...this.payloadTypeCodec},codec:this.options.metadata&&"h264",mid:(r=e.transceiver)==null?void 0:r.mid,readable:o,writable:c},[o,c])}}this.emit(Ce.track,e)}getDRMConfiguration(e){return this.drmOptionsMap?this.drmOptionsMap.get(e):null}async onRtcDrmFetch(e,t){return t.headers||(t.headers=new Headers),t.headers.get("x-dt-custom-data")&&t.headers.delete("x-dt-custom-data"),this.subscriberToken?t.headers.append("Authorization",`Bearer ${this.subscriberToken}`):re.warn("onRtcDrmFetch: no subscriberToken"),fetch(e,t)}configureDRM(e){if(!e)throw new Error("Required DRM options is not provided");this.drmOptionsMap||(this.drmOptionsMap=new Map);const t={merchant:"dolby",environment:Xe.Production,customTransform:this.options.metadata,videoElement:e.videoElement,audioElement:e.audioElement,video:{codec:"H264",encryption:"cbcs",keyId:ls(e.videoEncryptionParams.keyId),iv:ls(e.videoEncryptionParams.iv)},audio:{codec:"opus",encryption:"clear"},onFetch:this.onRtcDrmFetch.bind(this)};e.mediaBufferMs&&(t.mediaBufferMs=e.mediaBufferMs),this.DRMProfile&&(this.DRMProfile.playReadyUrl&&(t.prLicenseUrl=this.DRMProfile.playReadyUrl),this.DRMProfile.widevineUrl&&(t.wvLicenseUrl=this.DRMProfile.widevineUrl),this.DRMProfile.fairPlayUrl&&(t.fpsLicenseUrl=this.DRMProfile.fairPlayUrl),this.DRMProfile.fairPlayCertUrl&&(t.fpsCertificateUrl=this.DRMProfile.fairPlayCertUrl));try{Ni(t),this.drmOptionsMap.set(e.videoMid,t),e.audioMid&&this.drmOptionsMap.set(e.audioMid,t),t.videoElement.addEventListener("rtcdrmerror",n=>{re.error("DRM error: ",n.detail.message,"in video element:",t.videoElement.id),this.emit("error",new Error(n.detail.message))})}catch(n){re.error("Failed to configure DRM with options:",e,"error is:",n)}}removeDRMConfiguration(e){var t;(t=this.drmOptionsMap)==null||t.delete(e)}get isDRMOn(){return!!this.drmOptionsMap&&this.drmOptionsMap.size>0}exchangeDRMConfiguration(e,t){const n=this.getDRMConfiguration(e),r=this.getDRMConfiguration(t);if(n===null)throw new Error("No DRM configuration found for "+e);if(r===null)throw new Error("No DRM configuration found for "+t);ds(n.video,r.video,"keyId"),ds(n.video,r.video,"iv");try{Ni(n)}catch(o){re.error("Failed to configure DRM with options:",n,"error is:",o)}try{Ni(r)}catch(o){re.error("Failed to configure DRM with options:",r,"error is:",o)}}}we.Director=De,we.Logger=Ne,we.PeerConnection=Pe,we.Publish=Mo,we.Signaling=Mn,we.View=va,Object.defineProperty(we,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
